// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library interface_control_messages_mojom;
import 'package:mojo/bindings.dart' as bindings;

const int kRunMessageId = 4294967295;
const int kRunOrClosePipeMessageId = 4294967294;



class RunMessageParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int reserved0 = 0;
  int reserved1 = 0;
  QueryVersion queryVersion = null;

  RunMessageParams() : super(kVersions.last.size);

  RunMessageParams.init(
    int this.reserved0, 
    int this.reserved1, 
    QueryVersion this.queryVersion
  ) : super(kVersions.last.size);

  static RunMessageParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static RunMessageParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    RunMessageParams result = new RunMessageParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.reserved0 = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.reserved1 = decoder0.decodeUint32(12);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.queryVersion = QueryVersion.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "RunMessageParams";
    String fieldName;
    try {
      fieldName = "reserved0";
      encoder0.encodeUint32(reserved0, 8);
      fieldName = "reserved1";
      encoder0.encodeUint32(reserved1, 12);
      fieldName = "queryVersion";
      encoder0.encodeStruct(queryVersion, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "RunMessageParams("
           "reserved0: $reserved0" ", "
           "reserved1: $reserved1" ", "
           "queryVersion: $queryVersion" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["reserved0"] = reserved0;
    map["reserved1"] = reserved1;
    map["queryVersion"] = queryVersion;
    return map;
  }
}


class RunResponseMessageParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int reserved0 = 0;
  int reserved1 = 0;
  QueryVersionResult queryVersionResult = null;

  RunResponseMessageParams() : super(kVersions.last.size);

  RunResponseMessageParams.init(
    int this.reserved0, 
    int this.reserved1, 
    QueryVersionResult this.queryVersionResult
  ) : super(kVersions.last.size);

  static RunResponseMessageParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static RunResponseMessageParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    RunResponseMessageParams result = new RunResponseMessageParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.reserved0 = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.reserved1 = decoder0.decodeUint32(12);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.queryVersionResult = QueryVersionResult.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "RunResponseMessageParams";
    String fieldName;
    try {
      fieldName = "reserved0";
      encoder0.encodeUint32(reserved0, 8);
      fieldName = "reserved1";
      encoder0.encodeUint32(reserved1, 12);
      fieldName = "queryVersionResult";
      encoder0.encodeStruct(queryVersionResult, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "RunResponseMessageParams("
           "reserved0: $reserved0" ", "
           "reserved1: $reserved1" ", "
           "queryVersionResult: $queryVersionResult" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["reserved0"] = reserved0;
    map["reserved1"] = reserved1;
    map["queryVersionResult"] = queryVersionResult;
    return map;
  }
}


class QueryVersion extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  QueryVersion() : super(kVersions.last.size);

  QueryVersion.init(
  ) : super(kVersions.last.size);

  static QueryVersion deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static QueryVersion decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    QueryVersion result = new QueryVersion();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "QueryVersion";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "QueryVersion("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class QueryVersionResult extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int version = 0;

  QueryVersionResult() : super(kVersions.last.size);

  QueryVersionResult.init(
    int this.version
  ) : super(kVersions.last.size);

  static QueryVersionResult deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static QueryVersionResult decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    QueryVersionResult result = new QueryVersionResult();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.version = decoder0.decodeUint32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "QueryVersionResult";
    String fieldName;
    try {
      fieldName = "version";
      encoder0.encodeUint32(version, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "QueryVersionResult("
           "version: $version" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["version"] = version;
    return map;
  }
}


class RunOrClosePipeMessageParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int reserved0 = 0;
  int reserved1 = 0;
  RequireVersion requireVersion = null;

  RunOrClosePipeMessageParams() : super(kVersions.last.size);

  RunOrClosePipeMessageParams.init(
    int this.reserved0, 
    int this.reserved1, 
    RequireVersion this.requireVersion
  ) : super(kVersions.last.size);

  static RunOrClosePipeMessageParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static RunOrClosePipeMessageParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    RunOrClosePipeMessageParams result = new RunOrClosePipeMessageParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.reserved0 = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.reserved1 = decoder0.decodeUint32(12);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.requireVersion = RequireVersion.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "RunOrClosePipeMessageParams";
    String fieldName;
    try {
      fieldName = "reserved0";
      encoder0.encodeUint32(reserved0, 8);
      fieldName = "reserved1";
      encoder0.encodeUint32(reserved1, 12);
      fieldName = "requireVersion";
      encoder0.encodeStruct(requireVersion, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "RunOrClosePipeMessageParams("
           "reserved0: $reserved0" ", "
           "reserved1: $reserved1" ", "
           "requireVersion: $requireVersion" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["reserved0"] = reserved0;
    map["reserved1"] = reserved1;
    map["requireVersion"] = requireVersion;
    return map;
  }
}


class RequireVersion extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int version = 0;

  RequireVersion() : super(kVersions.last.size);

  RequireVersion.init(
    int this.version
  ) : super(kVersions.last.size);

  static RequireVersion deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static RequireVersion decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    RequireVersion result = new RequireVersion();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.version = decoder0.decodeUint32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "RequireVersion";
    String fieldName;
    try {
      fieldName = "version";
      encoder0.encodeUint32(version, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "RequireVersion("
           "version: $version" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["version"] = version;
    return map;
  }
}



