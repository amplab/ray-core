// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library shell_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo/mojo/application_connector.mojom.dart' as application_connector_mojom;
import 'package:mojo/mojo/service_provider.mojom.dart' as service_provider_mojom;



class _ShellConnectToApplicationParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String applicationUrl = null;
  service_provider_mojom.ServiceProviderInterfaceRequest services = null;

  _ShellConnectToApplicationParams() : super(kVersions.last.size);

  _ShellConnectToApplicationParams.init(
    String this.applicationUrl, 
    service_provider_mojom.ServiceProviderInterfaceRequest this.services
  ) : super(kVersions.last.size);

  static _ShellConnectToApplicationParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ShellConnectToApplicationParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ShellConnectToApplicationParams result = new _ShellConnectToApplicationParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.applicationUrl = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.services = decoder0.decodeInterfaceRequest(16, false, service_provider_mojom.ServiceProviderStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ShellConnectToApplicationParams";
    String fieldName;
    try {
      fieldName = "applicationUrl";
      encoder0.encodeString(applicationUrl, 8, false);
      fieldName = "services";
      encoder0.encodeInterfaceRequest(services, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ShellConnectToApplicationParams("
           "applicationUrl: $applicationUrl" ", "
           "services: $services" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _ShellCreateApplicationConnectorParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  application_connector_mojom.ApplicationConnectorInterfaceRequest applicationConnectorRequest = null;

  _ShellCreateApplicationConnectorParams() : super(kVersions.last.size);

  _ShellCreateApplicationConnectorParams.init(
    application_connector_mojom.ApplicationConnectorInterfaceRequest this.applicationConnectorRequest
  ) : super(kVersions.last.size);

  static _ShellCreateApplicationConnectorParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ShellCreateApplicationConnectorParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ShellCreateApplicationConnectorParams result = new _ShellCreateApplicationConnectorParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.applicationConnectorRequest = decoder0.decodeInterfaceRequest(8, false, application_connector_mojom.ApplicationConnectorStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ShellCreateApplicationConnectorParams";
    String fieldName;
    try {
      fieldName = "applicationConnectorRequest";
      encoder0.encodeInterfaceRequest(applicationConnectorRequest, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ShellCreateApplicationConnectorParams("
           "applicationConnectorRequest: $applicationConnectorRequest" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _shellMethodConnectToApplicationName = 0;
const int _shellMethodCreateApplicationConnectorName = 1;

class _ShellServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Shell {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ShellServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ShellProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ShellProxy p = new ShellProxy.unbound();
    String name = serviceName ?? Shell.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void connectToApplication(String applicationUrl, service_provider_mojom.ServiceProviderInterfaceRequest services);
  void createApplicationConnector(application_connector_mojom.ApplicationConnectorInterfaceRequest applicationConnectorRequest);
}

abstract class ShellInterface
    implements bindings.MojoInterface<Shell>,
               Shell {
  factory ShellInterface([Shell impl]) =>
      new ShellStub.unbound(impl);

  factory ShellInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Shell impl]) =>
      new ShellStub.fromEndpoint(endpoint, impl);

  factory ShellInterface.fromMock(
      Shell mock) =>
      new ShellProxy.fromMock(mock);
}

abstract class ShellInterfaceRequest
    implements bindings.MojoInterface<Shell>,
               Shell {
  factory ShellInterfaceRequest() =>
      new ShellProxy.unbound();
}

class _ShellProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Shell> {
  Shell impl;

  _ShellProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ShellProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ShellProxyControl.unbound() : super.unbound();

  String get serviceName => Shell.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ShellProxyControl($superString)";
  }
}

class ShellProxy
    extends bindings.Proxy<Shell>
    implements Shell,
               ShellInterface,
               ShellInterfaceRequest {
  ShellProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ShellProxyControl.fromEndpoint(endpoint));

  ShellProxy.fromHandle(core.MojoHandle handle)
      : super(new _ShellProxyControl.fromHandle(handle));

  ShellProxy.unbound()
      : super(new _ShellProxyControl.unbound());

  factory ShellProxy.fromMock(Shell mock) {
    ShellProxy newMockedProxy =
        new ShellProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ShellProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ShellProxy"));
    return new ShellProxy.fromEndpoint(endpoint);
  }


  void connectToApplication(String applicationUrl, service_provider_mojom.ServiceProviderInterfaceRequest services) {
    if (impl != null) {
      impl.connectToApplication(applicationUrl, services);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ShellConnectToApplicationParams();
    params.applicationUrl = applicationUrl;
    params.services = services;
    ctrl.sendMessage(params,
        _shellMethodConnectToApplicationName);
  }
  void createApplicationConnector(application_connector_mojom.ApplicationConnectorInterfaceRequest applicationConnectorRequest) {
    if (impl != null) {
      impl.createApplicationConnector(applicationConnectorRequest);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ShellCreateApplicationConnectorParams();
    params.applicationConnectorRequest = applicationConnectorRequest;
    ctrl.sendMessage(params,
        _shellMethodCreateApplicationConnectorName);
  }
}

class _ShellStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Shell> {
  Shell _impl;

  _ShellStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Shell impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ShellStubControl.fromHandle(
      core.MojoHandle handle, [Shell impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ShellStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Shell.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _shellMethodConnectToApplicationName:
        var params = _ShellConnectToApplicationParams.deserialize(
            message.payload);
        _impl.connectToApplication(params.applicationUrl, params.services);
        break;
      case _shellMethodCreateApplicationConnectorName:
        var params = _ShellCreateApplicationConnectorParams.deserialize(
            message.payload);
        _impl.createApplicationConnector(params.applicationConnectorRequest);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Shell get impl => _impl;
  set impl(Shell d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ShellStubControl($superString)";
  }

  int get version => 0;
}

class ShellStub
    extends bindings.Stub<Shell>
    implements Shell,
               ShellInterface,
               ShellInterfaceRequest {
  ShellStub.unbound([Shell impl])
      : super(new _ShellStubControl.unbound(impl));

  ShellStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Shell impl])
      : super(new _ShellStubControl.fromEndpoint(endpoint, impl));

  ShellStub.fromHandle(
      core.MojoHandle handle, [Shell impl])
      : super(new _ShellStubControl.fromHandle(handle, impl));

  static ShellStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ShellStub"));
    return new ShellStub.fromEndpoint(endpoint);
  }


  void connectToApplication(String applicationUrl, service_provider_mojom.ServiceProviderInterfaceRequest services) {
    return impl.connectToApplication(applicationUrl, services);
  }
  void createApplicationConnector(application_connector_mojom.ApplicationConnectorInterfaceRequest applicationConnectorRequest) {
    return impl.createApplicationConnector(applicationConnectorRequest);
  }
}



