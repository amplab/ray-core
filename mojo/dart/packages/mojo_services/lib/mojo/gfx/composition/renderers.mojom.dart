// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library renderers_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/geometry.mojom.dart' as geometry_mojom;
import 'package:mojo_services/mojo/gfx/composition/hit_tests.mojom.dart' as hit_tests_mojom;
import 'package:mojo_services/mojo/gfx/composition/scene_token.mojom.dart' as scene_token_mojom;
import 'package:mojo_services/mojo/gfx/composition/scheduling.mojom.dart' as scheduling_mojom;



class _RendererSetRootSceneParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  scene_token_mojom.SceneToken sceneToken = null;
  int sceneVersion = 0;
  geometry_mojom.Rect viewport = null;

  _RendererSetRootSceneParams() : super(kVersions.last.size);

  _RendererSetRootSceneParams.init(
    scene_token_mojom.SceneToken this.sceneToken, 
    int this.sceneVersion, 
    geometry_mojom.Rect this.viewport
  ) : super(kVersions.last.size);

  static _RendererSetRootSceneParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _RendererSetRootSceneParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _RendererSetRootSceneParams result = new _RendererSetRootSceneParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.sceneToken = scene_token_mojom.SceneToken.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.sceneVersion = decoder0.decodeUint32(16);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, false);
      result.viewport = geometry_mojom.Rect.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_RendererSetRootSceneParams";
    String fieldName;
    try {
      fieldName = "sceneToken";
      encoder0.encodeStruct(sceneToken, 8, false);
      fieldName = "sceneVersion";
      encoder0.encodeUint32(sceneVersion, 16);
      fieldName = "viewport";
      encoder0.encodeStruct(viewport, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_RendererSetRootSceneParams("
           "sceneToken: $sceneToken" ", "
           "sceneVersion: $sceneVersion" ", "
           "viewport: $viewport" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["sceneToken"] = sceneToken;
    map["sceneVersion"] = sceneVersion;
    map["viewport"] = viewport;
    return map;
  }
}


class _RendererClearRootSceneParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _RendererClearRootSceneParams() : super(kVersions.last.size);

  _RendererClearRootSceneParams.init(
  ) : super(kVersions.last.size);

  static _RendererClearRootSceneParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _RendererClearRootSceneParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _RendererClearRootSceneParams result = new _RendererClearRootSceneParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_RendererClearRootSceneParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_RendererClearRootSceneParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _RendererGetSchedulerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  scheduling_mojom.FrameSchedulerInterfaceRequest scheduler = null;

  _RendererGetSchedulerParams() : super(kVersions.last.size);

  _RendererGetSchedulerParams.init(
    scheduling_mojom.FrameSchedulerInterfaceRequest this.scheduler
  ) : super(kVersions.last.size);

  static _RendererGetSchedulerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _RendererGetSchedulerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _RendererGetSchedulerParams result = new _RendererGetSchedulerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.scheduler = decoder0.decodeInterfaceRequest(8, false, scheduling_mojom.FrameSchedulerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_RendererGetSchedulerParams";
    String fieldName;
    try {
      fieldName = "scheduler";
      encoder0.encodeInterfaceRequest(scheduler, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_RendererGetSchedulerParams("
           "scheduler: $scheduler" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _RendererGetHitTesterParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  hit_tests_mojom.HitTesterInterfaceRequest hitTester = null;

  _RendererGetHitTesterParams() : super(kVersions.last.size);

  _RendererGetHitTesterParams.init(
    hit_tests_mojom.HitTesterInterfaceRequest this.hitTester
  ) : super(kVersions.last.size);

  static _RendererGetHitTesterParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _RendererGetHitTesterParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _RendererGetHitTesterParams result = new _RendererGetHitTesterParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.hitTester = decoder0.decodeInterfaceRequest(8, false, hit_tests_mojom.HitTesterStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_RendererGetHitTesterParams";
    String fieldName;
    try {
      fieldName = "hitTester";
      encoder0.encodeInterfaceRequest(hitTester, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_RendererGetHitTesterParams("
           "hitTester: $hitTester" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _rendererMethodSetRootSceneName = 0;
const int _rendererMethodClearRootSceneName = 1;
const int _rendererMethodGetSchedulerName = 2;
const int _rendererMethodGetHitTesterName = 3;

class _RendererServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Renderer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _RendererServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static RendererProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    RendererProxy p = new RendererProxy.unbound();
    String name = serviceName ?? Renderer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void setRootScene(scene_token_mojom.SceneToken sceneToken, int sceneVersion, geometry_mojom.Rect viewport);
  void clearRootScene();
  void getScheduler(scheduling_mojom.FrameSchedulerInterfaceRequest scheduler);
  void getHitTester(hit_tests_mojom.HitTesterInterfaceRequest hitTester);
}

abstract class RendererInterface
    implements bindings.MojoInterface<Renderer>,
               Renderer {
  factory RendererInterface([Renderer impl]) =>
      new RendererStub.unbound(impl);

  factory RendererInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Renderer impl]) =>
      new RendererStub.fromEndpoint(endpoint, impl);

  factory RendererInterface.fromMock(
      Renderer mock) =>
      new RendererProxy.fromMock(mock);
}

abstract class RendererInterfaceRequest
    implements bindings.MojoInterface<Renderer>,
               Renderer {
  factory RendererInterfaceRequest() =>
      new RendererProxy.unbound();
}

class _RendererProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Renderer> {
  Renderer impl;

  _RendererProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _RendererProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _RendererProxyControl.unbound() : super.unbound();

  String get serviceName => Renderer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_RendererProxyControl($superString)";
  }
}

class RendererProxy
    extends bindings.Proxy<Renderer>
    implements Renderer,
               RendererInterface,
               RendererInterfaceRequest {
  RendererProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _RendererProxyControl.fromEndpoint(endpoint));

  RendererProxy.fromHandle(core.MojoHandle handle)
      : super(new _RendererProxyControl.fromHandle(handle));

  RendererProxy.unbound()
      : super(new _RendererProxyControl.unbound());

  factory RendererProxy.fromMock(Renderer mock) {
    RendererProxy newMockedProxy =
        new RendererProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static RendererProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For RendererProxy"));
    return new RendererProxy.fromEndpoint(endpoint);
  }


  void setRootScene(scene_token_mojom.SceneToken sceneToken, int sceneVersion, geometry_mojom.Rect viewport) {
    if (impl != null) {
      impl.setRootScene(sceneToken, sceneVersion, viewport);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _RendererSetRootSceneParams();
    params.sceneToken = sceneToken;
    params.sceneVersion = sceneVersion;
    params.viewport = viewport;
    ctrl.sendMessage(params,
        _rendererMethodSetRootSceneName);
  }
  void clearRootScene() {
    if (impl != null) {
      impl.clearRootScene();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _RendererClearRootSceneParams();
    ctrl.sendMessage(params,
        _rendererMethodClearRootSceneName);
  }
  void getScheduler(scheduling_mojom.FrameSchedulerInterfaceRequest scheduler) {
    if (impl != null) {
      impl.getScheduler(scheduler);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _RendererGetSchedulerParams();
    params.scheduler = scheduler;
    ctrl.sendMessage(params,
        _rendererMethodGetSchedulerName);
  }
  void getHitTester(hit_tests_mojom.HitTesterInterfaceRequest hitTester) {
    if (impl != null) {
      impl.getHitTester(hitTester);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _RendererGetHitTesterParams();
    params.hitTester = hitTester;
    ctrl.sendMessage(params,
        _rendererMethodGetHitTesterName);
  }
}

class _RendererStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Renderer> {
  Renderer _impl;

  _RendererStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Renderer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _RendererStubControl.fromHandle(
      core.MojoHandle handle, [Renderer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _RendererStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Renderer.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _rendererMethodSetRootSceneName:
        var params = _RendererSetRootSceneParams.deserialize(
            message.payload);
        _impl.setRootScene(params.sceneToken, params.sceneVersion, params.viewport);
        break;
      case _rendererMethodClearRootSceneName:
        _impl.clearRootScene();
        break;
      case _rendererMethodGetSchedulerName:
        var params = _RendererGetSchedulerParams.deserialize(
            message.payload);
        _impl.getScheduler(params.scheduler);
        break;
      case _rendererMethodGetHitTesterName:
        var params = _RendererGetHitTesterParams.deserialize(
            message.payload);
        _impl.getHitTester(params.hitTester);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Renderer get impl => _impl;
  set impl(Renderer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_RendererStubControl($superString)";
  }

  int get version => 0;
}

class RendererStub
    extends bindings.Stub<Renderer>
    implements Renderer,
               RendererInterface,
               RendererInterfaceRequest {
  RendererStub.unbound([Renderer impl])
      : super(new _RendererStubControl.unbound(impl));

  RendererStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Renderer impl])
      : super(new _RendererStubControl.fromEndpoint(endpoint, impl));

  RendererStub.fromHandle(
      core.MojoHandle handle, [Renderer impl])
      : super(new _RendererStubControl.fromHandle(handle, impl));

  static RendererStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For RendererStub"));
    return new RendererStub.fromEndpoint(endpoint);
  }


  void setRootScene(scene_token_mojom.SceneToken sceneToken, int sceneVersion, geometry_mojom.Rect viewport) {
    return impl.setRootScene(sceneToken, sceneVersion, viewport);
  }
  void clearRootScene() {
    return impl.clearRootScene();
  }
  void getScheduler(scheduling_mojom.FrameSchedulerInterfaceRequest scheduler) {
    return impl.getScheduler(scheduler);
  }
  void getHitTester(hit_tests_mojom.HitTesterInterfaceRequest hitTester) {
    return impl.getHitTester(hitTester);
  }
}



