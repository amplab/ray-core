// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library scheduling_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class FrameInfo extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  int frameTime = 0;
  int frameInterval = 0;
  int frameDeadline = 0;
  int presentationTime = 0;

  FrameInfo() : super(kVersions.last.size);

  FrameInfo.init(
    int this.frameTime, 
    int this.frameInterval, 
    int this.frameDeadline, 
    int this.presentationTime
  ) : super(kVersions.last.size);

  static FrameInfo deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static FrameInfo decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    FrameInfo result = new FrameInfo();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.frameTime = decoder0.decodeInt64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.frameInterval = decoder0.decodeUint64(16);
    }
    if (mainDataHeader.version >= 0) {
      
      result.frameDeadline = decoder0.decodeInt64(24);
    }
    if (mainDataHeader.version >= 0) {
      
      result.presentationTime = decoder0.decodeInt64(32);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "FrameInfo";
    String fieldName;
    try {
      fieldName = "frameTime";
      encoder0.encodeInt64(frameTime, 8);
      fieldName = "frameInterval";
      encoder0.encodeUint64(frameInterval, 16);
      fieldName = "frameDeadline";
      encoder0.encodeInt64(frameDeadline, 24);
      fieldName = "presentationTime";
      encoder0.encodeInt64(presentationTime, 32);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "FrameInfo("
           "frameTime: $frameTime" ", "
           "frameInterval: $frameInterval" ", "
           "frameDeadline: $frameDeadline" ", "
           "presentationTime: $presentationTime" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["frameTime"] = frameTime;
    map["frameInterval"] = frameInterval;
    map["frameDeadline"] = frameDeadline;
    map["presentationTime"] = presentationTime;
    return map;
  }
}


class _FrameSchedulerScheduleFrameParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _FrameSchedulerScheduleFrameParams() : super(kVersions.last.size);

  _FrameSchedulerScheduleFrameParams.init(
  ) : super(kVersions.last.size);

  static _FrameSchedulerScheduleFrameParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _FrameSchedulerScheduleFrameParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _FrameSchedulerScheduleFrameParams result = new _FrameSchedulerScheduleFrameParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_FrameSchedulerScheduleFrameParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_FrameSchedulerScheduleFrameParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class FrameSchedulerScheduleFrameResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  FrameInfo frameInfo = null;

  FrameSchedulerScheduleFrameResponseParams() : super(kVersions.last.size);

  FrameSchedulerScheduleFrameResponseParams.init(
    FrameInfo this.frameInfo
  ) : super(kVersions.last.size);

  static FrameSchedulerScheduleFrameResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static FrameSchedulerScheduleFrameResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    FrameSchedulerScheduleFrameResponseParams result = new FrameSchedulerScheduleFrameResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.frameInfo = FrameInfo.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "FrameSchedulerScheduleFrameResponseParams";
    String fieldName;
    try {
      fieldName = "frameInfo";
      encoder0.encodeStruct(frameInfo, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "FrameSchedulerScheduleFrameResponseParams("
           "frameInfo: $frameInfo" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["frameInfo"] = frameInfo;
    return map;
  }
}

const int _frameSchedulerMethodScheduleFrameName = 0;

class _FrameSchedulerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class FrameScheduler {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _FrameSchedulerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static FrameSchedulerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    FrameSchedulerProxy p = new FrameSchedulerProxy.unbound();
    String name = serviceName ?? FrameScheduler.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void scheduleFrame(void callback(FrameInfo frameInfo));
}

abstract class FrameSchedulerInterface
    implements bindings.MojoInterface<FrameScheduler>,
               FrameScheduler {
  factory FrameSchedulerInterface([FrameScheduler impl]) =>
      new FrameSchedulerStub.unbound(impl);

  factory FrameSchedulerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [FrameScheduler impl]) =>
      new FrameSchedulerStub.fromEndpoint(endpoint, impl);

  factory FrameSchedulerInterface.fromMock(
      FrameScheduler mock) =>
      new FrameSchedulerProxy.fromMock(mock);
}

abstract class FrameSchedulerInterfaceRequest
    implements bindings.MojoInterface<FrameScheduler>,
               FrameScheduler {
  factory FrameSchedulerInterfaceRequest() =>
      new FrameSchedulerProxy.unbound();
}

class _FrameSchedulerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<FrameScheduler> {
  FrameScheduler impl;

  _FrameSchedulerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _FrameSchedulerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _FrameSchedulerProxyControl.unbound() : super.unbound();

  String get serviceName => FrameScheduler.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _frameSchedulerMethodScheduleFrameName:
        var r = FrameSchedulerScheduleFrameResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.frameInfo );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_FrameSchedulerProxyControl($superString)";
  }
}

class FrameSchedulerProxy
    extends bindings.Proxy<FrameScheduler>
    implements FrameScheduler,
               FrameSchedulerInterface,
               FrameSchedulerInterfaceRequest {
  FrameSchedulerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _FrameSchedulerProxyControl.fromEndpoint(endpoint));

  FrameSchedulerProxy.fromHandle(core.MojoHandle handle)
      : super(new _FrameSchedulerProxyControl.fromHandle(handle));

  FrameSchedulerProxy.unbound()
      : super(new _FrameSchedulerProxyControl.unbound());

  factory FrameSchedulerProxy.fromMock(FrameScheduler mock) {
    FrameSchedulerProxy newMockedProxy =
        new FrameSchedulerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static FrameSchedulerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For FrameSchedulerProxy"));
    return new FrameSchedulerProxy.fromEndpoint(endpoint);
  }


  void scheduleFrame(void callback(FrameInfo frameInfo)) {
    if (impl != null) {
      impl.scheduleFrame(callback);
      return;
    }
    var params = new _FrameSchedulerScheduleFrameParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((FrameInfo frameInfo) {
        z.bindCallback(() {
          callback(frameInfo);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _frameSchedulerMethodScheduleFrameName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _FrameSchedulerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<FrameScheduler> {
  FrameScheduler _impl;

  _FrameSchedulerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [FrameScheduler impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _FrameSchedulerStubControl.fromHandle(
      core.MojoHandle handle, [FrameScheduler impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _FrameSchedulerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => FrameScheduler.serviceName;


  Function _frameSchedulerScheduleFrameResponseParamsResponder(
      int requestId) {
  return (FrameInfo frameInfo) {
      var result = new FrameSchedulerScheduleFrameResponseParams();
      result.frameInfo = frameInfo;
      sendResponse(buildResponseWithId(
          result,
          _frameSchedulerMethodScheduleFrameName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _frameSchedulerMethodScheduleFrameName:
        _impl.scheduleFrame(_frameSchedulerScheduleFrameResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  FrameScheduler get impl => _impl;
  set impl(FrameScheduler d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_FrameSchedulerStubControl($superString)";
  }

  int get version => 0;
}

class FrameSchedulerStub
    extends bindings.Stub<FrameScheduler>
    implements FrameScheduler,
               FrameSchedulerInterface,
               FrameSchedulerInterfaceRequest {
  FrameSchedulerStub.unbound([FrameScheduler impl])
      : super(new _FrameSchedulerStubControl.unbound(impl));

  FrameSchedulerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [FrameScheduler impl])
      : super(new _FrameSchedulerStubControl.fromEndpoint(endpoint, impl));

  FrameSchedulerStub.fromHandle(
      core.MojoHandle handle, [FrameScheduler impl])
      : super(new _FrameSchedulerStubControl.fromHandle(handle, impl));

  static FrameSchedulerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For FrameSchedulerStub"));
    return new FrameSchedulerStub.fromEndpoint(endpoint);
  }


  void scheduleFrame(void callback(FrameInfo frameInfo)) {
    return impl.scheduleFrame(callback);
  }
}



