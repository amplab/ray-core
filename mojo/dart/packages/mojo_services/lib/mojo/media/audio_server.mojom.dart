// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library audio_server_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/audio_track.mojom.dart' as audio_track_mojom;
import 'package:mojo_services/mojo/media/media_renderer.mojom.dart' as media_renderer_mojom;



class _AudioServerCreateTrackParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  audio_track_mojom.AudioTrackInterfaceRequest track = null;
  media_renderer_mojom.MediaRendererInterfaceRequest renderer = null;

  _AudioServerCreateTrackParams() : super(kVersions.last.size);

  _AudioServerCreateTrackParams.init(
    audio_track_mojom.AudioTrackInterfaceRequest this.track, 
    media_renderer_mojom.MediaRendererInterfaceRequest this.renderer
  ) : super(kVersions.last.size);

  static _AudioServerCreateTrackParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _AudioServerCreateTrackParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _AudioServerCreateTrackParams result = new _AudioServerCreateTrackParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.track = decoder0.decodeInterfaceRequest(8, false, audio_track_mojom.AudioTrackStub.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.renderer = decoder0.decodeInterfaceRequest(12, false, media_renderer_mojom.MediaRendererStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_AudioServerCreateTrackParams";
    String fieldName;
    try {
      fieldName = "track";
      encoder0.encodeInterfaceRequest(track, 8, false);
      fieldName = "renderer";
      encoder0.encodeInterfaceRequest(renderer, 12, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_AudioServerCreateTrackParams("
           "track: $track" ", "
           "renderer: $renderer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _audioServerMethodCreateTrackName = 0;

class _AudioServerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class AudioServer {
  static const String serviceName = "mojo::media::AudioServer";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _AudioServerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static AudioServerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    AudioServerProxy p = new AudioServerProxy.unbound();
    String name = serviceName ?? AudioServer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void createTrack(audio_track_mojom.AudioTrackInterfaceRequest track, media_renderer_mojom.MediaRendererInterfaceRequest renderer);
}

abstract class AudioServerInterface
    implements bindings.MojoInterface<AudioServer>,
               AudioServer {
  factory AudioServerInterface([AudioServer impl]) =>
      new AudioServerStub.unbound(impl);

  factory AudioServerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [AudioServer impl]) =>
      new AudioServerStub.fromEndpoint(endpoint, impl);

  factory AudioServerInterface.fromMock(
      AudioServer mock) =>
      new AudioServerProxy.fromMock(mock);
}

abstract class AudioServerInterfaceRequest
    implements bindings.MojoInterface<AudioServer>,
               AudioServer {
  factory AudioServerInterfaceRequest() =>
      new AudioServerProxy.unbound();
}

class _AudioServerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<AudioServer> {
  AudioServer impl;

  _AudioServerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _AudioServerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _AudioServerProxyControl.unbound() : super.unbound();

  String get serviceName => AudioServer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_AudioServerProxyControl($superString)";
  }
}

class AudioServerProxy
    extends bindings.Proxy<AudioServer>
    implements AudioServer,
               AudioServerInterface,
               AudioServerInterfaceRequest {
  AudioServerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _AudioServerProxyControl.fromEndpoint(endpoint));

  AudioServerProxy.fromHandle(core.MojoHandle handle)
      : super(new _AudioServerProxyControl.fromHandle(handle));

  AudioServerProxy.unbound()
      : super(new _AudioServerProxyControl.unbound());

  factory AudioServerProxy.fromMock(AudioServer mock) {
    AudioServerProxy newMockedProxy =
        new AudioServerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static AudioServerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For AudioServerProxy"));
    return new AudioServerProxy.fromEndpoint(endpoint);
  }


  void createTrack(audio_track_mojom.AudioTrackInterfaceRequest track, media_renderer_mojom.MediaRendererInterfaceRequest renderer) {
    if (impl != null) {
      impl.createTrack(track, renderer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _AudioServerCreateTrackParams();
    params.track = track;
    params.renderer = renderer;
    ctrl.sendMessage(params,
        _audioServerMethodCreateTrackName);
  }
}

class _AudioServerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<AudioServer> {
  AudioServer _impl;

  _AudioServerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [AudioServer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _AudioServerStubControl.fromHandle(
      core.MojoHandle handle, [AudioServer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _AudioServerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => AudioServer.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _audioServerMethodCreateTrackName:
        var params = _AudioServerCreateTrackParams.deserialize(
            message.payload);
        _impl.createTrack(params.track, params.renderer);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  AudioServer get impl => _impl;
  set impl(AudioServer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_AudioServerStubControl($superString)";
  }

  int get version => 0;
}

class AudioServerStub
    extends bindings.Stub<AudioServer>
    implements AudioServer,
               AudioServerInterface,
               AudioServerInterfaceRequest {
  AudioServerStub.unbound([AudioServer impl])
      : super(new _AudioServerStubControl.unbound(impl));

  AudioServerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [AudioServer impl])
      : super(new _AudioServerStubControl.fromEndpoint(endpoint, impl));

  AudioServerStub.fromHandle(
      core.MojoHandle handle, [AudioServer impl])
      : super(new _AudioServerStubControl.fromHandle(handle, impl));

  static AudioServerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For AudioServerStub"));
    return new AudioServerStub.fromEndpoint(endpoint);
  }


  void createTrack(audio_track_mojom.AudioTrackInterfaceRequest track, media_renderer_mojom.MediaRendererInterfaceRequest renderer) {
    return impl.createTrack(track, renderer);
  }
}



