// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_source_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/media_metadata.mojom.dart' as media_metadata_mojom;
import 'package:mojo_services/mojo/media/media_transport.mojom.dart' as media_transport_mojom;
import 'package:mojo_services/mojo/media/media_types.mojom.dart' as media_types_mojom;



class MediaSourceStreamDescriptor extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  int index = 0;
  media_types_mojom.MediaType mediaType = null;
  media_types_mojom.MediaType originalMediaType = null;

  MediaSourceStreamDescriptor() : super(kVersions.last.size);

  MediaSourceStreamDescriptor.init(
    int this.index, 
    media_types_mojom.MediaType this.mediaType, 
    media_types_mojom.MediaType this.originalMediaType
  ) : super(kVersions.last.size);

  static MediaSourceStreamDescriptor deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourceStreamDescriptor decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourceStreamDescriptor result = new MediaSourceStreamDescriptor();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.index = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.mediaType = media_types_mojom.MediaType.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, false);
      result.originalMediaType = media_types_mojom.MediaType.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourceStreamDescriptor";
    String fieldName;
    try {
      fieldName = "index";
      encoder0.encodeUint32(index, 8);
      fieldName = "mediaType";
      encoder0.encodeStruct(mediaType, 16, false);
      fieldName = "originalMediaType";
      encoder0.encodeStruct(originalMediaType, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourceStreamDescriptor("
           "index: $index" ", "
           "mediaType: $mediaType" ", "
           "originalMediaType: $originalMediaType" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["index"] = index;
    map["mediaType"] = mediaType;
    map["originalMediaType"] = originalMediaType;
    return map;
  }
}


class MediaSourceStatus extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  media_metadata_mojom.MediaMetadata metadata = null;

  MediaSourceStatus() : super(kVersions.last.size);

  MediaSourceStatus.init(
    media_metadata_mojom.MediaMetadata this.metadata
  ) : super(kVersions.last.size);

  static MediaSourceStatus deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourceStatus decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourceStatus result = new MediaSourceStatus();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.metadata = media_metadata_mojom.MediaMetadata.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourceStatus";
    String fieldName;
    try {
      fieldName = "metadata";
      encoder0.encodeStruct(metadata, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourceStatus("
           "metadata: $metadata" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["metadata"] = metadata;
    return map;
  }
}


class _MediaSourceGetStreamsParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaSourceGetStreamsParams() : super(kVersions.last.size);

  _MediaSourceGetStreamsParams.init(
  ) : super(kVersions.last.size);

  static _MediaSourceGetStreamsParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourceGetStreamsParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourceGetStreamsParams result = new _MediaSourceGetStreamsParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourceGetStreamsParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourceGetStreamsParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaSourceGetStreamsResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<MediaSourceStreamDescriptor> streams = null;

  MediaSourceGetStreamsResponseParams() : super(kVersions.last.size);

  MediaSourceGetStreamsResponseParams.init(
    List<MediaSourceStreamDescriptor> this.streams
  ) : super(kVersions.last.size);

  static MediaSourceGetStreamsResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourceGetStreamsResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourceGetStreamsResponseParams result = new MediaSourceGetStreamsResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.streams = new List<MediaSourceStreamDescriptor>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.streams[i1] = MediaSourceStreamDescriptor.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourceGetStreamsResponseParams";
    String fieldName;
    try {
      fieldName = "streams";
      if (streams == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(streams.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < streams.length; ++i0) {
          encoder1.encodeStruct(streams[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourceGetStreamsResponseParams("
           "streams: $streams" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["streams"] = streams;
    return map;
  }
}


class _MediaSourceGetProducerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int streamIndex = 0;
  media_transport_mojom.MediaProducerInterfaceRequest producer = null;

  _MediaSourceGetProducerParams() : super(kVersions.last.size);

  _MediaSourceGetProducerParams.init(
    int this.streamIndex, 
    media_transport_mojom.MediaProducerInterfaceRequest this.producer
  ) : super(kVersions.last.size);

  static _MediaSourceGetProducerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourceGetProducerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourceGetProducerParams result = new _MediaSourceGetProducerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.streamIndex = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.producer = decoder0.decodeInterfaceRequest(12, false, media_transport_mojom.MediaProducerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourceGetProducerParams";
    String fieldName;
    try {
      fieldName = "streamIndex";
      encoder0.encodeUint32(streamIndex, 8);
      fieldName = "producer";
      encoder0.encodeInterfaceRequest(producer, 12, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourceGetProducerParams("
           "streamIndex: $streamIndex" ", "
           "producer: $producer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaSourceGetPullModeProducerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int streamIndex = 0;
  media_transport_mojom.MediaPullModeProducerInterfaceRequest producer = null;

  _MediaSourceGetPullModeProducerParams() : super(kVersions.last.size);

  _MediaSourceGetPullModeProducerParams.init(
    int this.streamIndex, 
    media_transport_mojom.MediaPullModeProducerInterfaceRequest this.producer
  ) : super(kVersions.last.size);

  static _MediaSourceGetPullModeProducerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourceGetPullModeProducerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourceGetPullModeProducerParams result = new _MediaSourceGetPullModeProducerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.streamIndex = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.producer = decoder0.decodeInterfaceRequest(12, false, media_transport_mojom.MediaPullModeProducerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourceGetPullModeProducerParams";
    String fieldName;
    try {
      fieldName = "streamIndex";
      encoder0.encodeUint32(streamIndex, 8);
      fieldName = "producer";
      encoder0.encodeInterfaceRequest(producer, 12, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourceGetPullModeProducerParams("
           "streamIndex: $streamIndex" ", "
           "producer: $producer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaSourceGetStatusParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int versionLastSeen = 0;

  _MediaSourceGetStatusParams() : super(kVersions.last.size);

  _MediaSourceGetStatusParams.init(
    int this.versionLastSeen
  ) : super(kVersions.last.size);

  static _MediaSourceGetStatusParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourceGetStatusParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourceGetStatusParams result = new _MediaSourceGetStatusParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.versionLastSeen = decoder0.decodeUint64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourceGetStatusParams";
    String fieldName;
    try {
      fieldName = "versionLastSeen";
      encoder0.encodeUint64(versionLastSeen, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourceGetStatusParams("
           "versionLastSeen: $versionLastSeen" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["versionLastSeen"] = versionLastSeen;
    return map;
  }
}


class MediaSourceGetStatusResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int version = 0;
  MediaSourceStatus status = null;

  MediaSourceGetStatusResponseParams() : super(kVersions.last.size);

  MediaSourceGetStatusResponseParams.init(
    int this.version, 
    MediaSourceStatus this.status
  ) : super(kVersions.last.size);

  static MediaSourceGetStatusResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourceGetStatusResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourceGetStatusResponseParams result = new MediaSourceGetStatusResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.version = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      result.status = MediaSourceStatus.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourceGetStatusResponseParams";
    String fieldName;
    try {
      fieldName = "version";
      encoder0.encodeUint64(version, 8);
      fieldName = "status";
      encoder0.encodeStruct(status, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourceGetStatusResponseParams("
           "version: $version" ", "
           "status: $status" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["version"] = version;
    map["status"] = status;
    return map;
  }
}


class _MediaSourcePrepareParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaSourcePrepareParams() : super(kVersions.last.size);

  _MediaSourcePrepareParams.init(
  ) : super(kVersions.last.size);

  static _MediaSourcePrepareParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourcePrepareParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourcePrepareParams result = new _MediaSourcePrepareParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourcePrepareParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourcePrepareParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaSourcePrepareResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaSourcePrepareResponseParams() : super(kVersions.last.size);

  MediaSourcePrepareResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaSourcePrepareResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourcePrepareResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourcePrepareResponseParams result = new MediaSourcePrepareResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourcePrepareResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourcePrepareResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaSourcePrimeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaSourcePrimeParams() : super(kVersions.last.size);

  _MediaSourcePrimeParams.init(
  ) : super(kVersions.last.size);

  static _MediaSourcePrimeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourcePrimeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourcePrimeParams result = new _MediaSourcePrimeParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourcePrimeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourcePrimeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaSourcePrimeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaSourcePrimeResponseParams() : super(kVersions.last.size);

  MediaSourcePrimeResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaSourcePrimeResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourcePrimeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourcePrimeResponseParams result = new MediaSourcePrimeResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourcePrimeResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourcePrimeResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaSourceFlushParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaSourceFlushParams() : super(kVersions.last.size);

  _MediaSourceFlushParams.init(
  ) : super(kVersions.last.size);

  static _MediaSourceFlushParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourceFlushParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourceFlushParams result = new _MediaSourceFlushParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourceFlushParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourceFlushParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaSourceFlushResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaSourceFlushResponseParams() : super(kVersions.last.size);

  MediaSourceFlushResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaSourceFlushResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourceFlushResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourceFlushResponseParams result = new MediaSourceFlushResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourceFlushResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourceFlushResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaSourceSeekParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int position = 0;

  _MediaSourceSeekParams() : super(kVersions.last.size);

  _MediaSourceSeekParams.init(
    int this.position
  ) : super(kVersions.last.size);

  static _MediaSourceSeekParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaSourceSeekParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaSourceSeekParams result = new _MediaSourceSeekParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.position = decoder0.decodeInt64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaSourceSeekParams";
    String fieldName;
    try {
      fieldName = "position";
      encoder0.encodeInt64(position, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaSourceSeekParams("
           "position: $position" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["position"] = position;
    return map;
  }
}


class MediaSourceSeekResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaSourceSeekResponseParams() : super(kVersions.last.size);

  MediaSourceSeekResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaSourceSeekResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaSourceSeekResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaSourceSeekResponseParams result = new MediaSourceSeekResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaSourceSeekResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaSourceSeekResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _mediaSourceMethodGetStreamsName = 0;
const int _mediaSourceMethodGetProducerName = 1;
const int _mediaSourceMethodGetPullModeProducerName = 2;
const int _mediaSourceMethodGetStatusName = 3;
const int _mediaSourceMethodPrepareName = 4;
const int _mediaSourceMethodPrimeName = 5;
const int _mediaSourceMethodFlushName = 6;
const int _mediaSourceMethodSeekName = 7;

class _MediaSourceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaSource {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaSourceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaSourceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaSourceProxy p = new MediaSourceProxy.unbound();
    String name = serviceName ?? MediaSource.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getStreams(void callback(List<MediaSourceStreamDescriptor> streams));
  void getProducer(int streamIndex, media_transport_mojom.MediaProducerInterfaceRequest producer);
  void getPullModeProducer(int streamIndex, media_transport_mojom.MediaPullModeProducerInterfaceRequest producer);
  void getStatus(int versionLastSeen,void callback(int version, MediaSourceStatus status));
  void prepare(void callback());
  void prime(void callback());
  void flush(void callback());
  void seek(int position,void callback());
  static const int kInitialStatus = 0;
}

abstract class MediaSourceInterface
    implements bindings.MojoInterface<MediaSource>,
               MediaSource {
  factory MediaSourceInterface([MediaSource impl]) =>
      new MediaSourceStub.unbound(impl);

  factory MediaSourceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaSource impl]) =>
      new MediaSourceStub.fromEndpoint(endpoint, impl);

  factory MediaSourceInterface.fromMock(
      MediaSource mock) =>
      new MediaSourceProxy.fromMock(mock);
}

abstract class MediaSourceInterfaceRequest
    implements bindings.MojoInterface<MediaSource>,
               MediaSource {
  factory MediaSourceInterfaceRequest() =>
      new MediaSourceProxy.unbound();
}

class _MediaSourceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaSource> {
  MediaSource impl;

  _MediaSourceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaSourceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaSourceProxyControl.unbound() : super.unbound();

  String get serviceName => MediaSource.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaSourceMethodGetStreamsName:
        var r = MediaSourceGetStreamsResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.streams );
        break;
      case _mediaSourceMethodGetStatusName:
        var r = MediaSourceGetStatusResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.version , r.status );
        break;
      case _mediaSourceMethodPrepareName:
        var r = MediaSourcePrepareResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      case _mediaSourceMethodPrimeName:
        var r = MediaSourcePrimeResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      case _mediaSourceMethodFlushName:
        var r = MediaSourceFlushResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      case _mediaSourceMethodSeekName:
        var r = MediaSourceSeekResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaSourceProxyControl($superString)";
  }
}

class MediaSourceProxy
    extends bindings.Proxy<MediaSource>
    implements MediaSource,
               MediaSourceInterface,
               MediaSourceInterfaceRequest {
  MediaSourceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaSourceProxyControl.fromEndpoint(endpoint));

  MediaSourceProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaSourceProxyControl.fromHandle(handle));

  MediaSourceProxy.unbound()
      : super(new _MediaSourceProxyControl.unbound());

  factory MediaSourceProxy.fromMock(MediaSource mock) {
    MediaSourceProxy newMockedProxy =
        new MediaSourceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaSourceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaSourceProxy"));
    return new MediaSourceProxy.fromEndpoint(endpoint);
  }


  void getStreams(void callback(List<MediaSourceStreamDescriptor> streams)) {
    if (impl != null) {
      impl.getStreams(callback);
      return;
    }
    var params = new _MediaSourceGetStreamsParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((List<MediaSourceStreamDescriptor> streams) {
        z.bindCallback(() {
          callback(streams);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaSourceMethodGetStreamsName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getProducer(int streamIndex, media_transport_mojom.MediaProducerInterfaceRequest producer) {
    if (impl != null) {
      impl.getProducer(streamIndex, producer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaSourceGetProducerParams();
    params.streamIndex = streamIndex;
    params.producer = producer;
    ctrl.sendMessage(params,
        _mediaSourceMethodGetProducerName);
  }
  void getPullModeProducer(int streamIndex, media_transport_mojom.MediaPullModeProducerInterfaceRequest producer) {
    if (impl != null) {
      impl.getPullModeProducer(streamIndex, producer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaSourceGetPullModeProducerParams();
    params.streamIndex = streamIndex;
    params.producer = producer;
    ctrl.sendMessage(params,
        _mediaSourceMethodGetPullModeProducerName);
  }
  void getStatus(int versionLastSeen,void callback(int version, MediaSourceStatus status)) {
    if (impl != null) {
      impl.getStatus(versionLastSeen,callback);
      return;
    }
    var params = new _MediaSourceGetStatusParams();
    params.versionLastSeen = versionLastSeen;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int version, MediaSourceStatus status) {
        z.bindCallback(() {
          callback(version, status);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaSourceMethodGetStatusName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void prepare(void callback()) {
    if (impl != null) {
      impl.prepare(callback);
      return;
    }
    var params = new _MediaSourcePrepareParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaSourceMethodPrepareName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void prime(void callback()) {
    if (impl != null) {
      impl.prime(callback);
      return;
    }
    var params = new _MediaSourcePrimeParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaSourceMethodPrimeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void flush(void callback()) {
    if (impl != null) {
      impl.flush(callback);
      return;
    }
    var params = new _MediaSourceFlushParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaSourceMethodFlushName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void seek(int position,void callback()) {
    if (impl != null) {
      impl.seek(position,callback);
      return;
    }
    var params = new _MediaSourceSeekParams();
    params.position = position;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaSourceMethodSeekName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _MediaSourceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaSource> {
  MediaSource _impl;

  _MediaSourceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaSource impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaSourceStubControl.fromHandle(
      core.MojoHandle handle, [MediaSource impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaSourceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaSource.serviceName;


  Function _mediaSourceGetStreamsResponseParamsResponder(
      int requestId) {
  return (List<MediaSourceStreamDescriptor> streams) {
      var result = new MediaSourceGetStreamsResponseParams();
      result.streams = streams;
      sendResponse(buildResponseWithId(
          result,
          _mediaSourceMethodGetStreamsName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaSourceGetStatusResponseParamsResponder(
      int requestId) {
  return (int version, MediaSourceStatus status) {
      var result = new MediaSourceGetStatusResponseParams();
      result.version = version;
      result.status = status;
      sendResponse(buildResponseWithId(
          result,
          _mediaSourceMethodGetStatusName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaSourcePrepareResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaSourcePrepareResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaSourceMethodPrepareName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaSourcePrimeResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaSourcePrimeResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaSourceMethodPrimeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaSourceFlushResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaSourceFlushResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaSourceMethodFlushName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaSourceSeekResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaSourceSeekResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaSourceMethodSeekName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaSourceMethodGetStreamsName:
        _impl.getStreams(_mediaSourceGetStreamsResponseParamsResponder(message.header.requestId));
        break;
      case _mediaSourceMethodGetProducerName:
        var params = _MediaSourceGetProducerParams.deserialize(
            message.payload);
        _impl.getProducer(params.streamIndex, params.producer);
        break;
      case _mediaSourceMethodGetPullModeProducerName:
        var params = _MediaSourceGetPullModeProducerParams.deserialize(
            message.payload);
        _impl.getPullModeProducer(params.streamIndex, params.producer);
        break;
      case _mediaSourceMethodGetStatusName:
        var params = _MediaSourceGetStatusParams.deserialize(
            message.payload);
        _impl.getStatus(params.versionLastSeen, _mediaSourceGetStatusResponseParamsResponder(message.header.requestId));
        break;
      case _mediaSourceMethodPrepareName:
        _impl.prepare(_mediaSourcePrepareResponseParamsResponder(message.header.requestId));
        break;
      case _mediaSourceMethodPrimeName:
        _impl.prime(_mediaSourcePrimeResponseParamsResponder(message.header.requestId));
        break;
      case _mediaSourceMethodFlushName:
        _impl.flush(_mediaSourceFlushResponseParamsResponder(message.header.requestId));
        break;
      case _mediaSourceMethodSeekName:
        var params = _MediaSourceSeekParams.deserialize(
            message.payload);
        _impl.seek(params.position, _mediaSourceSeekResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaSource get impl => _impl;
  set impl(MediaSource d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaSourceStubControl($superString)";
  }

  int get version => 0;
}

class MediaSourceStub
    extends bindings.Stub<MediaSource>
    implements MediaSource,
               MediaSourceInterface,
               MediaSourceInterfaceRequest {
  MediaSourceStub.unbound([MediaSource impl])
      : super(new _MediaSourceStubControl.unbound(impl));

  MediaSourceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaSource impl])
      : super(new _MediaSourceStubControl.fromEndpoint(endpoint, impl));

  MediaSourceStub.fromHandle(
      core.MojoHandle handle, [MediaSource impl])
      : super(new _MediaSourceStubControl.fromHandle(handle, impl));

  static MediaSourceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaSourceStub"));
    return new MediaSourceStub.fromEndpoint(endpoint);
  }


  void getStreams(void callback(List<MediaSourceStreamDescriptor> streams)) {
    return impl.getStreams(callback);
  }
  void getProducer(int streamIndex, media_transport_mojom.MediaProducerInterfaceRequest producer) {
    return impl.getProducer(streamIndex, producer);
  }
  void getPullModeProducer(int streamIndex, media_transport_mojom.MediaPullModeProducerInterfaceRequest producer) {
    return impl.getPullModeProducer(streamIndex, producer);
  }
  void getStatus(int versionLastSeen,void callback(int version, MediaSourceStatus status)) {
    return impl.getStatus(versionLastSeen,callback);
  }
  void prepare(void callback()) {
    return impl.prepare(callback);
  }
  void prime(void callback()) {
    return impl.prime(callback);
  }
  void flush(void callback()) {
    return impl.flush(callback);
  }
  void seek(int position,void callback()) {
    return impl.seek(position,callback);
  }
}



