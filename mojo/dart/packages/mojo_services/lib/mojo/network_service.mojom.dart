// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library network_service_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo/mojo/network_error.mojom.dart' as network_error_mojom;
import 'package:mojo_services/mojo/cookie_store.mojom.dart' as cookie_store_mojom;
import 'package:mojo_services/mojo/host_resolver.mojom.dart' as host_resolver_mojom;
import 'package:mojo_services/mojo/http_server.mojom.dart' as http_server_mojom;
import 'package:mojo_services/mojo/net_address.mojom.dart' as net_address_mojom;
import 'package:mojo_services/mojo/tcp_bound_socket.mojom.dart' as tcp_bound_socket_mojom;
import 'package:mojo_services/mojo/tcp_connected_socket.mojom.dart' as tcp_connected_socket_mojom;
import 'package:mojo_services/mojo/udp_socket.mojom.dart' as udp_socket_mojom;
import 'package:mojo_services/mojo/url_loader.mojom.dart' as url_loader_mojom;
import 'package:mojo_services/mojo/url_loader_interceptor.mojom.dart' as url_loader_interceptor_mojom;
import 'package:mojo_services/mojo/web_socket.mojom.dart' as web_socket_mojom;



class _NetworkServiceCreateUrlLoaderParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  url_loader_mojom.UrlLoaderInterfaceRequest loader = null;

  _NetworkServiceCreateUrlLoaderParams() : super(kVersions.last.size);

  _NetworkServiceCreateUrlLoaderParams.init(
    url_loader_mojom.UrlLoaderInterfaceRequest this.loader
  ) : super(kVersions.last.size);

  static _NetworkServiceCreateUrlLoaderParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceCreateUrlLoaderParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceCreateUrlLoaderParams result = new _NetworkServiceCreateUrlLoaderParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.loader = decoder0.decodeInterfaceRequest(8, false, url_loader_mojom.UrlLoaderStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceCreateUrlLoaderParams";
    String fieldName;
    try {
      fieldName = "loader";
      encoder0.encodeInterfaceRequest(loader, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceCreateUrlLoaderParams("
           "loader: $loader" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NetworkServiceGetCookieStoreParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  cookie_store_mojom.CookieStoreInterfaceRequest cookieStore = null;

  _NetworkServiceGetCookieStoreParams() : super(kVersions.last.size);

  _NetworkServiceGetCookieStoreParams.init(
    cookie_store_mojom.CookieStoreInterfaceRequest this.cookieStore
  ) : super(kVersions.last.size);

  static _NetworkServiceGetCookieStoreParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceGetCookieStoreParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceGetCookieStoreParams result = new _NetworkServiceGetCookieStoreParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.cookieStore = decoder0.decodeInterfaceRequest(8, false, cookie_store_mojom.CookieStoreStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceGetCookieStoreParams";
    String fieldName;
    try {
      fieldName = "cookieStore";
      encoder0.encodeInterfaceRequest(cookieStore, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceGetCookieStoreParams("
           "cookieStore: $cookieStore" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NetworkServiceCreateWebSocketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  web_socket_mojom.WebSocketInterfaceRequest socket = null;

  _NetworkServiceCreateWebSocketParams() : super(kVersions.last.size);

  _NetworkServiceCreateWebSocketParams.init(
    web_socket_mojom.WebSocketInterfaceRequest this.socket
  ) : super(kVersions.last.size);

  static _NetworkServiceCreateWebSocketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceCreateWebSocketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceCreateWebSocketParams result = new _NetworkServiceCreateWebSocketParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.socket = decoder0.decodeInterfaceRequest(8, false, web_socket_mojom.WebSocketStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceCreateWebSocketParams";
    String fieldName;
    try {
      fieldName = "socket";
      encoder0.encodeInterfaceRequest(socket, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceCreateWebSocketParams("
           "socket: $socket" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NetworkServiceCreateTcpBoundSocketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  net_address_mojom.NetAddress localAddress = null;
  tcp_bound_socket_mojom.TcpBoundSocketInterfaceRequest boundSocket = null;

  _NetworkServiceCreateTcpBoundSocketParams() : super(kVersions.last.size);

  _NetworkServiceCreateTcpBoundSocketParams.init(
    net_address_mojom.NetAddress this.localAddress, 
    tcp_bound_socket_mojom.TcpBoundSocketInterfaceRequest this.boundSocket
  ) : super(kVersions.last.size);

  static _NetworkServiceCreateTcpBoundSocketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceCreateTcpBoundSocketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceCreateTcpBoundSocketParams result = new _NetworkServiceCreateTcpBoundSocketParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.localAddress = net_address_mojom.NetAddress.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.boundSocket = decoder0.decodeInterfaceRequest(16, false, tcp_bound_socket_mojom.TcpBoundSocketStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceCreateTcpBoundSocketParams";
    String fieldName;
    try {
      fieldName = "localAddress";
      encoder0.encodeStruct(localAddress, 8, true);
      fieldName = "boundSocket";
      encoder0.encodeInterfaceRequest(boundSocket, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceCreateTcpBoundSocketParams("
           "localAddress: $localAddress" ", "
           "boundSocket: $boundSocket" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class NetworkServiceCreateTcpBoundSocketResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  network_error_mojom.NetworkError result = null;
  net_address_mojom.NetAddress boundTo = null;

  NetworkServiceCreateTcpBoundSocketResponseParams() : super(kVersions.last.size);

  NetworkServiceCreateTcpBoundSocketResponseParams.init(
    network_error_mojom.NetworkError this.result, 
    net_address_mojom.NetAddress this.boundTo
  ) : super(kVersions.last.size);

  static NetworkServiceCreateTcpBoundSocketResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static NetworkServiceCreateTcpBoundSocketResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NetworkServiceCreateTcpBoundSocketResponseParams result = new NetworkServiceCreateTcpBoundSocketResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.result = network_error_mojom.NetworkError.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      result.boundTo = net_address_mojom.NetAddress.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "NetworkServiceCreateTcpBoundSocketResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeStruct(result, 8, false);
      fieldName = "boundTo";
      encoder0.encodeStruct(boundTo, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "NetworkServiceCreateTcpBoundSocketResponseParams("
           "result: $result" ", "
           "boundTo: $boundTo" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    map["boundTo"] = boundTo;
    return map;
  }
}


class _NetworkServiceCreateTcpConnectedSocketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  net_address_mojom.NetAddress remoteAddress = null;
  core.MojoDataPipeConsumer sendStream = null;
  core.MojoDataPipeProducer receiveStream = null;
  tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket = null;

  _NetworkServiceCreateTcpConnectedSocketParams() : super(kVersions.last.size);

  _NetworkServiceCreateTcpConnectedSocketParams.init(
    net_address_mojom.NetAddress this.remoteAddress, 
    core.MojoDataPipeConsumer this.sendStream, 
    core.MojoDataPipeProducer this.receiveStream, 
    tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest this.clientSocket
  ) : super(kVersions.last.size);

  static _NetworkServiceCreateTcpConnectedSocketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceCreateTcpConnectedSocketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceCreateTcpConnectedSocketParams result = new _NetworkServiceCreateTcpConnectedSocketParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.remoteAddress = net_address_mojom.NetAddress.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.sendStream = decoder0.decodeConsumerHandle(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.receiveStream = decoder0.decodeProducerHandle(20, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.clientSocket = decoder0.decodeInterfaceRequest(24, false, tcp_connected_socket_mojom.TcpConnectedSocketStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceCreateTcpConnectedSocketParams";
    String fieldName;
    try {
      fieldName = "remoteAddress";
      encoder0.encodeStruct(remoteAddress, 8, false);
      fieldName = "sendStream";
      encoder0.encodeConsumerHandle(sendStream, 16, false);
      fieldName = "receiveStream";
      encoder0.encodeProducerHandle(receiveStream, 20, false);
      fieldName = "clientSocket";
      encoder0.encodeInterfaceRequest(clientSocket, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceCreateTcpConnectedSocketParams("
           "remoteAddress: $remoteAddress" ", "
           "sendStream: $sendStream" ", "
           "receiveStream: $receiveStream" ", "
           "clientSocket: $clientSocket" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class NetworkServiceCreateTcpConnectedSocketResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  network_error_mojom.NetworkError result = null;
  net_address_mojom.NetAddress localAddress = null;

  NetworkServiceCreateTcpConnectedSocketResponseParams() : super(kVersions.last.size);

  NetworkServiceCreateTcpConnectedSocketResponseParams.init(
    network_error_mojom.NetworkError this.result, 
    net_address_mojom.NetAddress this.localAddress
  ) : super(kVersions.last.size);

  static NetworkServiceCreateTcpConnectedSocketResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static NetworkServiceCreateTcpConnectedSocketResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NetworkServiceCreateTcpConnectedSocketResponseParams result = new NetworkServiceCreateTcpConnectedSocketResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.result = network_error_mojom.NetworkError.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      result.localAddress = net_address_mojom.NetAddress.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "NetworkServiceCreateTcpConnectedSocketResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeStruct(result, 8, false);
      fieldName = "localAddress";
      encoder0.encodeStruct(localAddress, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "NetworkServiceCreateTcpConnectedSocketResponseParams("
           "result: $result" ", "
           "localAddress: $localAddress" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    map["localAddress"] = localAddress;
    return map;
  }
}


class _NetworkServiceCreateUdpSocketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  udp_socket_mojom.UdpSocketInterfaceRequest socket = null;

  _NetworkServiceCreateUdpSocketParams() : super(kVersions.last.size);

  _NetworkServiceCreateUdpSocketParams.init(
    udp_socket_mojom.UdpSocketInterfaceRequest this.socket
  ) : super(kVersions.last.size);

  static _NetworkServiceCreateUdpSocketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceCreateUdpSocketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceCreateUdpSocketParams result = new _NetworkServiceCreateUdpSocketParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.socket = decoder0.decodeInterfaceRequest(8, false, udp_socket_mojom.UdpSocketStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceCreateUdpSocketParams";
    String fieldName;
    try {
      fieldName = "socket";
      encoder0.encodeInterfaceRequest(socket, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceCreateUdpSocketParams("
           "socket: $socket" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NetworkServiceCreateHttpServerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  net_address_mojom.NetAddress localAddress = null;
  http_server_mojom.HttpServerDelegateInterface delegate = null;

  _NetworkServiceCreateHttpServerParams() : super(kVersions.last.size);

  _NetworkServiceCreateHttpServerParams.init(
    net_address_mojom.NetAddress this.localAddress, 
    http_server_mojom.HttpServerDelegateInterface this.delegate
  ) : super(kVersions.last.size);

  static _NetworkServiceCreateHttpServerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceCreateHttpServerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceCreateHttpServerParams result = new _NetworkServiceCreateHttpServerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.localAddress = net_address_mojom.NetAddress.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.delegate = decoder0.decodeServiceInterface(16, false, http_server_mojom.HttpServerDelegateProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceCreateHttpServerParams";
    String fieldName;
    try {
      fieldName = "localAddress";
      encoder0.encodeStruct(localAddress, 8, false);
      fieldName = "delegate";
      encoder0.encodeInterface(delegate, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceCreateHttpServerParams("
           "localAddress: $localAddress" ", "
           "delegate: $delegate" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class NetworkServiceCreateHttpServerResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  network_error_mojom.NetworkError result = null;
  net_address_mojom.NetAddress boundTo = null;

  NetworkServiceCreateHttpServerResponseParams() : super(kVersions.last.size);

  NetworkServiceCreateHttpServerResponseParams.init(
    network_error_mojom.NetworkError this.result, 
    net_address_mojom.NetAddress this.boundTo
  ) : super(kVersions.last.size);

  static NetworkServiceCreateHttpServerResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static NetworkServiceCreateHttpServerResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NetworkServiceCreateHttpServerResponseParams result = new NetworkServiceCreateHttpServerResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.result = network_error_mojom.NetworkError.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      result.boundTo = net_address_mojom.NetAddress.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "NetworkServiceCreateHttpServerResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeStruct(result, 8, false);
      fieldName = "boundTo";
      encoder0.encodeStruct(boundTo, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "NetworkServiceCreateHttpServerResponseParams("
           "result: $result" ", "
           "boundTo: $boundTo" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    map["boundTo"] = boundTo;
    return map;
  }
}


class _NetworkServiceRegisterUrlLoaderInterceptorParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  url_loader_interceptor_mojom.UrlLoaderInterceptorFactoryInterface factory = null;

  _NetworkServiceRegisterUrlLoaderInterceptorParams() : super(kVersions.last.size);

  _NetworkServiceRegisterUrlLoaderInterceptorParams.init(
    url_loader_interceptor_mojom.UrlLoaderInterceptorFactoryInterface this.factory
  ) : super(kVersions.last.size);

  static _NetworkServiceRegisterUrlLoaderInterceptorParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceRegisterUrlLoaderInterceptorParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceRegisterUrlLoaderInterceptorParams result = new _NetworkServiceRegisterUrlLoaderInterceptorParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.factory = decoder0.decodeServiceInterface(8, false, url_loader_interceptor_mojom.UrlLoaderInterceptorFactoryProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceRegisterUrlLoaderInterceptorParams";
    String fieldName;
    try {
      fieldName = "factory";
      encoder0.encodeInterface(factory, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceRegisterUrlLoaderInterceptorParams("
           "factory: $factory" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NetworkServiceCreateHostResolverParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  host_resolver_mojom.HostResolverInterfaceRequest hostResolver = null;

  _NetworkServiceCreateHostResolverParams() : super(kVersions.last.size);

  _NetworkServiceCreateHostResolverParams.init(
    host_resolver_mojom.HostResolverInterfaceRequest this.hostResolver
  ) : super(kVersions.last.size);

  static _NetworkServiceCreateHostResolverParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkServiceCreateHostResolverParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkServiceCreateHostResolverParams result = new _NetworkServiceCreateHostResolverParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.hostResolver = decoder0.decodeInterfaceRequest(8, false, host_resolver_mojom.HostResolverStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkServiceCreateHostResolverParams";
    String fieldName;
    try {
      fieldName = "hostResolver";
      encoder0.encodeInterfaceRequest(hostResolver, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkServiceCreateHostResolverParams("
           "hostResolver: $hostResolver" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _networkServiceMethodCreateUrlLoaderName = 0;
const int _networkServiceMethodGetCookieStoreName = 1;
const int _networkServiceMethodCreateWebSocketName = 2;
const int _networkServiceMethodCreateTcpBoundSocketName = 3;
const int _networkServiceMethodCreateTcpConnectedSocketName = 4;
const int _networkServiceMethodCreateUdpSocketName = 5;
const int _networkServiceMethodCreateHttpServerName = 6;
const int _networkServiceMethodRegisterUrlLoaderInterceptorName = 7;
const int _networkServiceMethodCreateHostResolverName = 8;

class _NetworkServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class NetworkService {
  static const String serviceName = "mojo::NetworkService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _NetworkServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static NetworkServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    NetworkServiceProxy p = new NetworkServiceProxy.unbound();
    String name = serviceName ?? NetworkService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void createUrlLoader(url_loader_mojom.UrlLoaderInterfaceRequest loader);
  void getCookieStore(cookie_store_mojom.CookieStoreInterfaceRequest cookieStore);
  void createWebSocket(web_socket_mojom.WebSocketInterfaceRequest socket);
  void createTcpBoundSocket(net_address_mojom.NetAddress localAddress,tcp_bound_socket_mojom.TcpBoundSocketInterfaceRequest boundSocket,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo));
  void createTcpConnectedSocket(net_address_mojom.NetAddress remoteAddress,core.MojoDataPipeConsumer sendStream,core.MojoDataPipeProducer receiveStream,tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress localAddress));
  void createUdpSocket(udp_socket_mojom.UdpSocketInterfaceRequest socket);
  void createHttpServer(net_address_mojom.NetAddress localAddress,http_server_mojom.HttpServerDelegateInterface delegate,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo));
  void registerUrlLoaderInterceptor(url_loader_interceptor_mojom.UrlLoaderInterceptorFactoryInterface factory);
  void createHostResolver(host_resolver_mojom.HostResolverInterfaceRequest hostResolver);
}

abstract class NetworkServiceInterface
    implements bindings.MojoInterface<NetworkService>,
               NetworkService {
  factory NetworkServiceInterface([NetworkService impl]) =>
      new NetworkServiceStub.unbound(impl);

  factory NetworkServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [NetworkService impl]) =>
      new NetworkServiceStub.fromEndpoint(endpoint, impl);

  factory NetworkServiceInterface.fromMock(
      NetworkService mock) =>
      new NetworkServiceProxy.fromMock(mock);
}

abstract class NetworkServiceInterfaceRequest
    implements bindings.MojoInterface<NetworkService>,
               NetworkService {
  factory NetworkServiceInterfaceRequest() =>
      new NetworkServiceProxy.unbound();
}

class _NetworkServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<NetworkService> {
  NetworkService impl;

  _NetworkServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _NetworkServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _NetworkServiceProxyControl.unbound() : super.unbound();

  String get serviceName => NetworkService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _networkServiceMethodCreateTcpBoundSocketName:
        var r = NetworkServiceCreateTcpBoundSocketResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.result , r.boundTo );
        break;
      case _networkServiceMethodCreateTcpConnectedSocketName:
        var r = NetworkServiceCreateTcpConnectedSocketResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.result , r.localAddress );
        break;
      case _networkServiceMethodCreateHttpServerName:
        var r = NetworkServiceCreateHttpServerResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.result , r.boundTo );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NetworkServiceProxyControl($superString)";
  }
}

class NetworkServiceProxy
    extends bindings.Proxy<NetworkService>
    implements NetworkService,
               NetworkServiceInterface,
               NetworkServiceInterfaceRequest {
  NetworkServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _NetworkServiceProxyControl.fromEndpoint(endpoint));

  NetworkServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _NetworkServiceProxyControl.fromHandle(handle));

  NetworkServiceProxy.unbound()
      : super(new _NetworkServiceProxyControl.unbound());

  factory NetworkServiceProxy.fromMock(NetworkService mock) {
    NetworkServiceProxy newMockedProxy =
        new NetworkServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static NetworkServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NetworkServiceProxy"));
    return new NetworkServiceProxy.fromEndpoint(endpoint);
  }


  void createUrlLoader(url_loader_mojom.UrlLoaderInterfaceRequest loader) {
    if (impl != null) {
      impl.createUrlLoader(loader);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NetworkServiceCreateUrlLoaderParams();
    params.loader = loader;
    ctrl.sendMessage(params,
        _networkServiceMethodCreateUrlLoaderName);
  }
  void getCookieStore(cookie_store_mojom.CookieStoreInterfaceRequest cookieStore) {
    if (impl != null) {
      impl.getCookieStore(cookieStore);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NetworkServiceGetCookieStoreParams();
    params.cookieStore = cookieStore;
    ctrl.sendMessage(params,
        _networkServiceMethodGetCookieStoreName);
  }
  void createWebSocket(web_socket_mojom.WebSocketInterfaceRequest socket) {
    if (impl != null) {
      impl.createWebSocket(socket);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NetworkServiceCreateWebSocketParams();
    params.socket = socket;
    ctrl.sendMessage(params,
        _networkServiceMethodCreateWebSocketName);
  }
  void createTcpBoundSocket(net_address_mojom.NetAddress localAddress,tcp_bound_socket_mojom.TcpBoundSocketInterfaceRequest boundSocket,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo)) {
    if (impl != null) {
      impl.createTcpBoundSocket(localAddress,boundSocket,callback);
      return;
    }
    var params = new _NetworkServiceCreateTcpBoundSocketParams();
    params.localAddress = localAddress;
    params.boundSocket = boundSocket;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo) {
        z.bindCallback(() {
          callback(result, boundTo);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _networkServiceMethodCreateTcpBoundSocketName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void createTcpConnectedSocket(net_address_mojom.NetAddress remoteAddress,core.MojoDataPipeConsumer sendStream,core.MojoDataPipeProducer receiveStream,tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress localAddress)) {
    if (impl != null) {
      impl.createTcpConnectedSocket(remoteAddress,sendStream,receiveStream,clientSocket,callback);
      return;
    }
    var params = new _NetworkServiceCreateTcpConnectedSocketParams();
    params.remoteAddress = remoteAddress;
    params.sendStream = sendStream;
    params.receiveStream = receiveStream;
    params.clientSocket = clientSocket;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((network_error_mojom.NetworkError result, net_address_mojom.NetAddress localAddress) {
        z.bindCallback(() {
          callback(result, localAddress);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _networkServiceMethodCreateTcpConnectedSocketName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void createUdpSocket(udp_socket_mojom.UdpSocketInterfaceRequest socket) {
    if (impl != null) {
      impl.createUdpSocket(socket);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NetworkServiceCreateUdpSocketParams();
    params.socket = socket;
    ctrl.sendMessage(params,
        _networkServiceMethodCreateUdpSocketName);
  }
  void createHttpServer(net_address_mojom.NetAddress localAddress,http_server_mojom.HttpServerDelegateInterface delegate,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo)) {
    if (impl != null) {
      impl.createHttpServer(localAddress,delegate,callback);
      return;
    }
    var params = new _NetworkServiceCreateHttpServerParams();
    params.localAddress = localAddress;
    params.delegate = delegate;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo) {
        z.bindCallback(() {
          callback(result, boundTo);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _networkServiceMethodCreateHttpServerName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void registerUrlLoaderInterceptor(url_loader_interceptor_mojom.UrlLoaderInterceptorFactoryInterface factory) {
    if (impl != null) {
      impl.registerUrlLoaderInterceptor(factory);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NetworkServiceRegisterUrlLoaderInterceptorParams();
    params.factory = factory;
    ctrl.sendMessage(params,
        _networkServiceMethodRegisterUrlLoaderInterceptorName);
  }
  void createHostResolver(host_resolver_mojom.HostResolverInterfaceRequest hostResolver) {
    if (impl != null) {
      impl.createHostResolver(hostResolver);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NetworkServiceCreateHostResolverParams();
    params.hostResolver = hostResolver;
    ctrl.sendMessage(params,
        _networkServiceMethodCreateHostResolverName);
  }
}

class _NetworkServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<NetworkService> {
  NetworkService _impl;

  _NetworkServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NetworkService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _NetworkServiceStubControl.fromHandle(
      core.MojoHandle handle, [NetworkService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _NetworkServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => NetworkService.serviceName;


  Function _networkServiceCreateTcpBoundSocketResponseParamsResponder(
      int requestId) {
  return (network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo) {
      var result = new NetworkServiceCreateTcpBoundSocketResponseParams();
      result.result = result;
      result.boundTo = boundTo;
      sendResponse(buildResponseWithId(
          result,
          _networkServiceMethodCreateTcpBoundSocketName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _networkServiceCreateTcpConnectedSocketResponseParamsResponder(
      int requestId) {
  return (network_error_mojom.NetworkError result, net_address_mojom.NetAddress localAddress) {
      var result = new NetworkServiceCreateTcpConnectedSocketResponseParams();
      result.result = result;
      result.localAddress = localAddress;
      sendResponse(buildResponseWithId(
          result,
          _networkServiceMethodCreateTcpConnectedSocketName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _networkServiceCreateHttpServerResponseParamsResponder(
      int requestId) {
  return (network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo) {
      var result = new NetworkServiceCreateHttpServerResponseParams();
      result.result = result;
      result.boundTo = boundTo;
      sendResponse(buildResponseWithId(
          result,
          _networkServiceMethodCreateHttpServerName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _networkServiceMethodCreateUrlLoaderName:
        var params = _NetworkServiceCreateUrlLoaderParams.deserialize(
            message.payload);
        _impl.createUrlLoader(params.loader);
        break;
      case _networkServiceMethodGetCookieStoreName:
        var params = _NetworkServiceGetCookieStoreParams.deserialize(
            message.payload);
        _impl.getCookieStore(params.cookieStore);
        break;
      case _networkServiceMethodCreateWebSocketName:
        var params = _NetworkServiceCreateWebSocketParams.deserialize(
            message.payload);
        _impl.createWebSocket(params.socket);
        break;
      case _networkServiceMethodCreateTcpBoundSocketName:
        var params = _NetworkServiceCreateTcpBoundSocketParams.deserialize(
            message.payload);
        _impl.createTcpBoundSocket(params.localAddress, params.boundSocket, _networkServiceCreateTcpBoundSocketResponseParamsResponder(message.header.requestId));
        break;
      case _networkServiceMethodCreateTcpConnectedSocketName:
        var params = _NetworkServiceCreateTcpConnectedSocketParams.deserialize(
            message.payload);
        _impl.createTcpConnectedSocket(params.remoteAddress, params.sendStream, params.receiveStream, params.clientSocket, _networkServiceCreateTcpConnectedSocketResponseParamsResponder(message.header.requestId));
        break;
      case _networkServiceMethodCreateUdpSocketName:
        var params = _NetworkServiceCreateUdpSocketParams.deserialize(
            message.payload);
        _impl.createUdpSocket(params.socket);
        break;
      case _networkServiceMethodCreateHttpServerName:
        var params = _NetworkServiceCreateHttpServerParams.deserialize(
            message.payload);
        _impl.createHttpServer(params.localAddress, params.delegate, _networkServiceCreateHttpServerResponseParamsResponder(message.header.requestId));
        break;
      case _networkServiceMethodRegisterUrlLoaderInterceptorName:
        var params = _NetworkServiceRegisterUrlLoaderInterceptorParams.deserialize(
            message.payload);
        _impl.registerUrlLoaderInterceptor(params.factory);
        break;
      case _networkServiceMethodCreateHostResolverName:
        var params = _NetworkServiceCreateHostResolverParams.deserialize(
            message.payload);
        _impl.createHostResolver(params.hostResolver);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  NetworkService get impl => _impl;
  set impl(NetworkService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NetworkServiceStubControl($superString)";
  }

  int get version => 0;
}

class NetworkServiceStub
    extends bindings.Stub<NetworkService>
    implements NetworkService,
               NetworkServiceInterface,
               NetworkServiceInterfaceRequest {
  NetworkServiceStub.unbound([NetworkService impl])
      : super(new _NetworkServiceStubControl.unbound(impl));

  NetworkServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NetworkService impl])
      : super(new _NetworkServiceStubControl.fromEndpoint(endpoint, impl));

  NetworkServiceStub.fromHandle(
      core.MojoHandle handle, [NetworkService impl])
      : super(new _NetworkServiceStubControl.fromHandle(handle, impl));

  static NetworkServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NetworkServiceStub"));
    return new NetworkServiceStub.fromEndpoint(endpoint);
  }


  void createUrlLoader(url_loader_mojom.UrlLoaderInterfaceRequest loader) {
    return impl.createUrlLoader(loader);
  }
  void getCookieStore(cookie_store_mojom.CookieStoreInterfaceRequest cookieStore) {
    return impl.getCookieStore(cookieStore);
  }
  void createWebSocket(web_socket_mojom.WebSocketInterfaceRequest socket) {
    return impl.createWebSocket(socket);
  }
  void createTcpBoundSocket(net_address_mojom.NetAddress localAddress,tcp_bound_socket_mojom.TcpBoundSocketInterfaceRequest boundSocket,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo)) {
    return impl.createTcpBoundSocket(localAddress,boundSocket,callback);
  }
  void createTcpConnectedSocket(net_address_mojom.NetAddress remoteAddress,core.MojoDataPipeConsumer sendStream,core.MojoDataPipeProducer receiveStream,tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress localAddress)) {
    return impl.createTcpConnectedSocket(remoteAddress,sendStream,receiveStream,clientSocket,callback);
  }
  void createUdpSocket(udp_socket_mojom.UdpSocketInterfaceRequest socket) {
    return impl.createUdpSocket(socket);
  }
  void createHttpServer(net_address_mojom.NetAddress localAddress,http_server_mojom.HttpServerDelegateInterface delegate,void callback(network_error_mojom.NetworkError result, net_address_mojom.NetAddress boundTo)) {
    return impl.createHttpServer(localAddress,delegate,callback);
  }
  void registerUrlLoaderInterceptor(url_loader_interceptor_mojom.UrlLoaderInterceptorFactoryInterface factory) {
    return impl.registerUrlLoaderInterceptor(factory);
  }
  void createHostResolver(host_resolver_mojom.HostResolverInterfaceRequest hostResolver) {
    return impl.createHostResolver(hostResolver);
  }
}



