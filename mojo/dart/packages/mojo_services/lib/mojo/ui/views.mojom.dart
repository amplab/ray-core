// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library views_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo/mojo/service_provider.mojom.dart' as service_provider_mojom;
import 'package:mojo_services/mojo/gfx/composition/scenes.mojom.dart' as scenes_mojom;
import 'package:mojo_services/mojo/gfx/composition/scheduling.mojom.dart' as scheduling_mojom;
import 'package:mojo_services/mojo/ui/view_containers.mojom.dart' as view_containers_mojom;
import 'package:mojo_services/mojo/ui/view_properties.mojom.dart' as view_properties_mojom;
import 'package:mojo_services/mojo/ui/view_token.mojom.dart' as view_token_mojom;



class ViewInvalidation extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  view_properties_mojom.ViewProperties properties = null;
  int containerFlushToken = 0;
  int sceneVersion = 0;
  scheduling_mojom.FrameInfo frameInfo = null;

  ViewInvalidation() : super(kVersions.last.size);

  ViewInvalidation.init(
    view_properties_mojom.ViewProperties this.properties, 
    int this.containerFlushToken, 
    int this.sceneVersion, 
    scheduling_mojom.FrameInfo this.frameInfo
  ) : super(kVersions.last.size);

  static ViewInvalidation deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ViewInvalidation decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ViewInvalidation result = new ViewInvalidation();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.properties = view_properties_mojom.ViewProperties.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.containerFlushToken = decoder0.decodeUint32(16);
    }
    if (mainDataHeader.version >= 0) {
      
      result.sceneVersion = decoder0.decodeUint32(20);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, false);
      result.frameInfo = scheduling_mojom.FrameInfo.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ViewInvalidation";
    String fieldName;
    try {
      fieldName = "properties";
      encoder0.encodeStruct(properties, 8, true);
      fieldName = "containerFlushToken";
      encoder0.encodeUint32(containerFlushToken, 16);
      fieldName = "sceneVersion";
      encoder0.encodeUint32(sceneVersion, 20);
      fieldName = "frameInfo";
      encoder0.encodeStruct(frameInfo, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ViewInvalidation("
           "properties: $properties" ", "
           "containerFlushToken: $containerFlushToken" ", "
           "sceneVersion: $sceneVersion" ", "
           "frameInfo: $frameInfo" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["properties"] = properties;
    map["containerFlushToken"] = containerFlushToken;
    map["sceneVersion"] = sceneVersion;
    map["frameInfo"] = frameInfo;
    return map;
  }
}


class _ViewGetTokenParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _ViewGetTokenParams() : super(kVersions.last.size);

  _ViewGetTokenParams.init(
  ) : super(kVersions.last.size);

  static _ViewGetTokenParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ViewGetTokenParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ViewGetTokenParams result = new _ViewGetTokenParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ViewGetTokenParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ViewGetTokenParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class ViewGetTokenResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  view_token_mojom.ViewToken token = null;

  ViewGetTokenResponseParams() : super(kVersions.last.size);

  ViewGetTokenResponseParams.init(
    view_token_mojom.ViewToken this.token
  ) : super(kVersions.last.size);

  static ViewGetTokenResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ViewGetTokenResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ViewGetTokenResponseParams result = new ViewGetTokenResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.token = view_token_mojom.ViewToken.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ViewGetTokenResponseParams";
    String fieldName;
    try {
      fieldName = "token";
      encoder0.encodeStruct(token, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ViewGetTokenResponseParams("
           "token: $token" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["token"] = token;
    return map;
  }
}


class _ViewGetServiceProviderParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  service_provider_mojom.ServiceProviderInterfaceRequest serviceProvider = null;

  _ViewGetServiceProviderParams() : super(kVersions.last.size);

  _ViewGetServiceProviderParams.init(
    service_provider_mojom.ServiceProviderInterfaceRequest this.serviceProvider
  ) : super(kVersions.last.size);

  static _ViewGetServiceProviderParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ViewGetServiceProviderParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ViewGetServiceProviderParams result = new _ViewGetServiceProviderParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.serviceProvider = decoder0.decodeInterfaceRequest(8, false, service_provider_mojom.ServiceProviderStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ViewGetServiceProviderParams";
    String fieldName;
    try {
      fieldName = "serviceProvider";
      encoder0.encodeInterfaceRequest(serviceProvider, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ViewGetServiceProviderParams("
           "serviceProvider: $serviceProvider" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _ViewCreateSceneParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  scenes_mojom.SceneInterfaceRequest scene = null;

  _ViewCreateSceneParams() : super(kVersions.last.size);

  _ViewCreateSceneParams.init(
    scenes_mojom.SceneInterfaceRequest this.scene
  ) : super(kVersions.last.size);

  static _ViewCreateSceneParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ViewCreateSceneParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ViewCreateSceneParams result = new _ViewCreateSceneParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.scene = decoder0.decodeInterfaceRequest(8, false, scenes_mojom.SceneStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ViewCreateSceneParams";
    String fieldName;
    try {
      fieldName = "scene";
      encoder0.encodeInterfaceRequest(scene, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ViewCreateSceneParams("
           "scene: $scene" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _ViewGetContainerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  view_containers_mojom.ViewContainerInterfaceRequest container = null;

  _ViewGetContainerParams() : super(kVersions.last.size);

  _ViewGetContainerParams.init(
    view_containers_mojom.ViewContainerInterfaceRequest this.container
  ) : super(kVersions.last.size);

  static _ViewGetContainerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ViewGetContainerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ViewGetContainerParams result = new _ViewGetContainerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.container = decoder0.decodeInterfaceRequest(8, false, view_containers_mojom.ViewContainerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ViewGetContainerParams";
    String fieldName;
    try {
      fieldName = "container";
      encoder0.encodeInterfaceRequest(container, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ViewGetContainerParams("
           "container: $container" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _ViewInvalidateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _ViewInvalidateParams() : super(kVersions.last.size);

  _ViewInvalidateParams.init(
  ) : super(kVersions.last.size);

  static _ViewInvalidateParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ViewInvalidateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ViewInvalidateParams result = new _ViewInvalidateParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ViewInvalidateParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ViewInvalidateParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _ViewListenerOnInvalidationParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  ViewInvalidation invalidation = null;

  _ViewListenerOnInvalidationParams() : super(kVersions.last.size);

  _ViewListenerOnInvalidationParams.init(
    ViewInvalidation this.invalidation
  ) : super(kVersions.last.size);

  static _ViewListenerOnInvalidationParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ViewListenerOnInvalidationParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ViewListenerOnInvalidationParams result = new _ViewListenerOnInvalidationParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.invalidation = ViewInvalidation.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ViewListenerOnInvalidationParams";
    String fieldName;
    try {
      fieldName = "invalidation";
      encoder0.encodeStruct(invalidation, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ViewListenerOnInvalidationParams("
           "invalidation: $invalidation" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["invalidation"] = invalidation;
    return map;
  }
}


class ViewListenerOnInvalidationResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  ViewListenerOnInvalidationResponseParams() : super(kVersions.last.size);

  ViewListenerOnInvalidationResponseParams.init(
  ) : super(kVersions.last.size);

  static ViewListenerOnInvalidationResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ViewListenerOnInvalidationResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ViewListenerOnInvalidationResponseParams result = new ViewListenerOnInvalidationResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ViewListenerOnInvalidationResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ViewListenerOnInvalidationResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _viewMethodGetTokenName = 0;
const int _viewMethodGetServiceProviderName = 1;
const int _viewMethodCreateSceneName = 2;
const int _viewMethodGetContainerName = 3;
const int _viewMethodInvalidateName = 4;

class _ViewServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class View {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ViewServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ViewProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ViewProxy p = new ViewProxy.unbound();
    String name = serviceName ?? View.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getToken(void callback(view_token_mojom.ViewToken token));
  void getServiceProvider(service_provider_mojom.ServiceProviderInterfaceRequest serviceProvider);
  void createScene(scenes_mojom.SceneInterfaceRequest scene);
  void getContainer(view_containers_mojom.ViewContainerInterfaceRequest container);
  void invalidate();
}

abstract class ViewInterface
    implements bindings.MojoInterface<View>,
               View {
  factory ViewInterface([View impl]) =>
      new ViewStub.unbound(impl);

  factory ViewInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [View impl]) =>
      new ViewStub.fromEndpoint(endpoint, impl);

  factory ViewInterface.fromMock(
      View mock) =>
      new ViewProxy.fromMock(mock);
}

abstract class ViewInterfaceRequest
    implements bindings.MojoInterface<View>,
               View {
  factory ViewInterfaceRequest() =>
      new ViewProxy.unbound();
}

class _ViewProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<View> {
  View impl;

  _ViewProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ViewProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ViewProxyControl.unbound() : super.unbound();

  String get serviceName => View.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _viewMethodGetTokenName:
        var r = ViewGetTokenResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.token );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ViewProxyControl($superString)";
  }
}

class ViewProxy
    extends bindings.Proxy<View>
    implements View,
               ViewInterface,
               ViewInterfaceRequest {
  ViewProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ViewProxyControl.fromEndpoint(endpoint));

  ViewProxy.fromHandle(core.MojoHandle handle)
      : super(new _ViewProxyControl.fromHandle(handle));

  ViewProxy.unbound()
      : super(new _ViewProxyControl.unbound());

  factory ViewProxy.fromMock(View mock) {
    ViewProxy newMockedProxy =
        new ViewProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ViewProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ViewProxy"));
    return new ViewProxy.fromEndpoint(endpoint);
  }


  void getToken(void callback(view_token_mojom.ViewToken token)) {
    if (impl != null) {
      impl.getToken(callback);
      return;
    }
    var params = new _ViewGetTokenParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((view_token_mojom.ViewToken token) {
        z.bindCallback(() {
          callback(token);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _viewMethodGetTokenName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getServiceProvider(service_provider_mojom.ServiceProviderInterfaceRequest serviceProvider) {
    if (impl != null) {
      impl.getServiceProvider(serviceProvider);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ViewGetServiceProviderParams();
    params.serviceProvider = serviceProvider;
    ctrl.sendMessage(params,
        _viewMethodGetServiceProviderName);
  }
  void createScene(scenes_mojom.SceneInterfaceRequest scene) {
    if (impl != null) {
      impl.createScene(scene);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ViewCreateSceneParams();
    params.scene = scene;
    ctrl.sendMessage(params,
        _viewMethodCreateSceneName);
  }
  void getContainer(view_containers_mojom.ViewContainerInterfaceRequest container) {
    if (impl != null) {
      impl.getContainer(container);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ViewGetContainerParams();
    params.container = container;
    ctrl.sendMessage(params,
        _viewMethodGetContainerName);
  }
  void invalidate() {
    if (impl != null) {
      impl.invalidate();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ViewInvalidateParams();
    ctrl.sendMessage(params,
        _viewMethodInvalidateName);
  }
}

class _ViewStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<View> {
  View _impl;

  _ViewStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [View impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ViewStubControl.fromHandle(
      core.MojoHandle handle, [View impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ViewStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => View.serviceName;


  Function _viewGetTokenResponseParamsResponder(
      int requestId) {
  return (view_token_mojom.ViewToken token) {
      var result = new ViewGetTokenResponseParams();
      result.token = token;
      sendResponse(buildResponseWithId(
          result,
          _viewMethodGetTokenName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _viewMethodGetTokenName:
        _impl.getToken(_viewGetTokenResponseParamsResponder(message.header.requestId));
        break;
      case _viewMethodGetServiceProviderName:
        var params = _ViewGetServiceProviderParams.deserialize(
            message.payload);
        _impl.getServiceProvider(params.serviceProvider);
        break;
      case _viewMethodCreateSceneName:
        var params = _ViewCreateSceneParams.deserialize(
            message.payload);
        _impl.createScene(params.scene);
        break;
      case _viewMethodGetContainerName:
        var params = _ViewGetContainerParams.deserialize(
            message.payload);
        _impl.getContainer(params.container);
        break;
      case _viewMethodInvalidateName:
        _impl.invalidate();
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  View get impl => _impl;
  set impl(View d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ViewStubControl($superString)";
  }

  int get version => 0;
}

class ViewStub
    extends bindings.Stub<View>
    implements View,
               ViewInterface,
               ViewInterfaceRequest {
  ViewStub.unbound([View impl])
      : super(new _ViewStubControl.unbound(impl));

  ViewStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [View impl])
      : super(new _ViewStubControl.fromEndpoint(endpoint, impl));

  ViewStub.fromHandle(
      core.MojoHandle handle, [View impl])
      : super(new _ViewStubControl.fromHandle(handle, impl));

  static ViewStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ViewStub"));
    return new ViewStub.fromEndpoint(endpoint);
  }


  void getToken(void callback(view_token_mojom.ViewToken token)) {
    return impl.getToken(callback);
  }
  void getServiceProvider(service_provider_mojom.ServiceProviderInterfaceRequest serviceProvider) {
    return impl.getServiceProvider(serviceProvider);
  }
  void createScene(scenes_mojom.SceneInterfaceRequest scene) {
    return impl.createScene(scene);
  }
  void getContainer(view_containers_mojom.ViewContainerInterfaceRequest container) {
    return impl.getContainer(container);
  }
  void invalidate() {
    return impl.invalidate();
  }
}

const int _viewListenerMethodOnInvalidationName = 0;

class _ViewListenerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class ViewListener {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ViewListenerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ViewListenerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ViewListenerProxy p = new ViewListenerProxy.unbound();
    String name = serviceName ?? ViewListener.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void onInvalidation(ViewInvalidation invalidation,void callback());
}

abstract class ViewListenerInterface
    implements bindings.MojoInterface<ViewListener>,
               ViewListener {
  factory ViewListenerInterface([ViewListener impl]) =>
      new ViewListenerStub.unbound(impl);

  factory ViewListenerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [ViewListener impl]) =>
      new ViewListenerStub.fromEndpoint(endpoint, impl);

  factory ViewListenerInterface.fromMock(
      ViewListener mock) =>
      new ViewListenerProxy.fromMock(mock);
}

abstract class ViewListenerInterfaceRequest
    implements bindings.MojoInterface<ViewListener>,
               ViewListener {
  factory ViewListenerInterfaceRequest() =>
      new ViewListenerProxy.unbound();
}

class _ViewListenerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<ViewListener> {
  ViewListener impl;

  _ViewListenerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ViewListenerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ViewListenerProxyControl.unbound() : super.unbound();

  String get serviceName => ViewListener.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _viewListenerMethodOnInvalidationName:
        var r = ViewListenerOnInvalidationResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ViewListenerProxyControl($superString)";
  }
}

class ViewListenerProxy
    extends bindings.Proxy<ViewListener>
    implements ViewListener,
               ViewListenerInterface,
               ViewListenerInterfaceRequest {
  ViewListenerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ViewListenerProxyControl.fromEndpoint(endpoint));

  ViewListenerProxy.fromHandle(core.MojoHandle handle)
      : super(new _ViewListenerProxyControl.fromHandle(handle));

  ViewListenerProxy.unbound()
      : super(new _ViewListenerProxyControl.unbound());

  factory ViewListenerProxy.fromMock(ViewListener mock) {
    ViewListenerProxy newMockedProxy =
        new ViewListenerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ViewListenerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ViewListenerProxy"));
    return new ViewListenerProxy.fromEndpoint(endpoint);
  }


  void onInvalidation(ViewInvalidation invalidation,void callback()) {
    if (impl != null) {
      impl.onInvalidation(invalidation,callback);
      return;
    }
    var params = new _ViewListenerOnInvalidationParams();
    params.invalidation = invalidation;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _viewListenerMethodOnInvalidationName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _ViewListenerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<ViewListener> {
  ViewListener _impl;

  _ViewListenerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ViewListener impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ViewListenerStubControl.fromHandle(
      core.MojoHandle handle, [ViewListener impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ViewListenerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => ViewListener.serviceName;


  Function _viewListenerOnInvalidationResponseParamsResponder(
      int requestId) {
  return () {
      var result = new ViewListenerOnInvalidationResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _viewListenerMethodOnInvalidationName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _viewListenerMethodOnInvalidationName:
        var params = _ViewListenerOnInvalidationParams.deserialize(
            message.payload);
        _impl.onInvalidation(params.invalidation, _viewListenerOnInvalidationResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  ViewListener get impl => _impl;
  set impl(ViewListener d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ViewListenerStubControl($superString)";
  }

  int get version => 0;
}

class ViewListenerStub
    extends bindings.Stub<ViewListener>
    implements ViewListener,
               ViewListenerInterface,
               ViewListenerInterfaceRequest {
  ViewListenerStub.unbound([ViewListener impl])
      : super(new _ViewListenerStubControl.unbound(impl));

  ViewListenerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ViewListener impl])
      : super(new _ViewListenerStubControl.fromEndpoint(endpoint, impl));

  ViewListenerStub.fromHandle(
      core.MojoHandle handle, [ViewListener impl])
      : super(new _ViewListenerStubControl.fromHandle(handle, impl));

  static ViewListenerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ViewListenerStub"));
    return new ViewListenerStub.fromEndpoint(endpoint);
  }


  void onInvalidation(ViewInvalidation invalidation,void callback()) {
    return impl.onInvalidation(invalidation,callback);
  }
}



