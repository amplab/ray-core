// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="mojo_services"]
module mojo.media;

// Describes the type of media.
struct MediaType {
  const string kAudioEncodingAac = "aac";
  const string kAudioEncodingAmrNb = "amrnb";
  const string kAudioEncodingAmrWb = "amrwb";
  const string kAudioEncodingFlac = "flac";
  const string kAudioEncodingGsmMs = "gsmms";
  const string kAudioEncodingLpcm = "lpcm";
  const string kAudioEncodingMp3 = "mp3";
  const string kAudioEncodingPcmALaw = "pcmalaw";
  const string kAudioEncodingPcmMuLaw = "pcmmulaw";
  const string kAudioEncodingVorbis = "vorbis";

  const string kVideoEncodingH263 = "h263";
  const string kVideoEncodingH264 = "h264";
  const string kVideoEncodingMpeg4 = "mpeg4";
  const string kVideoEncodingTheora = "theora";
  const string kVideoEncodingUncompressed = "uncompressed_video";
  const string kVideoEncodingVp3 = "vp3";
  const string kVideoEncodingVp8 = "vp8";

  // Identifies the type’s medium.
  MediaTypeMedium medium;

  // Medium-dependent details.
  MediaTypeDetails details;

  // Encoding.
  string encoding;

  // Encoding-specific parameters.
  array<uint8>? encoding_parameters;
};

// Describes a set of types of media.
struct MediaTypeSet {
  // Identifies the types’ medium.
  MediaTypeMedium medium;

  // Medium-dependent details.
  MediaTypeSetDetails details;

  // Included encodings.
  array<string> encodings;
};

// Medium values for MediaType
enum MediaTypeMedium {
  AUDIO,
  VIDEO,
  TEXT,
  SUBPICTURE
};

// A union of all media type details.
union MediaTypeDetails {
  AudioMediaTypeDetails audio;
  VideoMediaTypeDetails video;
  TextMediaTypeDetails text;
  SubpictureMediaTypeDetails subpicture;
};

// A union of all media type set details.
union MediaTypeSetDetails {
  AudioMediaTypeSetDetails audio;
  VideoMediaTypeSetDetails video;
  TextMediaTypeSetDetails text;
  SubpictureMediaTypeSetDetails subpicture;
};

// Media type details for the AUDIO medium.
struct AudioMediaTypeDetails {
  AudioSampleFormat sample_format;
  uint32 channels;
  uint32 frames_per_second;
  // TODO(dalesat): Channel designations.
};

// Media type set details for the AUDIO medium.
struct AudioMediaTypeSetDetails {
  AudioSampleFormat sample_format;
  uint32 min_channels;
  uint32 max_channels;
  uint32 min_frames_per_second;
  uint32 max_frames_per_second;
};

enum AudioSampleFormat {
  // Placeholder indicating any sample format.
  ANY,

  // 8-bit unsigned samples, sample size 1 byte.
  UNSIGNED_8,

  // 16-bit signed samples, host-endian, sample size 2 bytes.
  SIGNED_16,

  // 24-bit signed samples in 32 bits, host-endian, sample size 4 bytes.
  // TODO(johngro): describe the packing for this
  SIGNED_24_IN_32,

  // 32-bit floating-point samples, sample size 4 bytes.
  FLOAT,
};

// Media type details for the VIDEO medium.
// TODO(dalesat): Refine and document.
struct VideoMediaTypeDetails {
  VideoProfile profile;
  PixelFormat pixel_format;
  ColorSpace color_space;
  uint32 width;
  uint32 height;
  uint32 coded_width;
  uint32 coded_height;
};

// Media type set details for the VIDEO medium.
// TODO(dalesat): Expand and document.
struct VideoMediaTypeSetDetails {
  uint32 min_width;
  uint32 max_width;
  uint32 min_height;
  uint32 max_height;
};

// Video profiles.
// TODO(dalesat): Blindly copied from Chromium, revisit.
enum VideoProfile {
  UNKNOWN,
  NOT_APPLICABLE,
  H264_BASELINE,
  H264_MAIN,
  H264_EXTENDED,
  H264_HIGH,
  H264_HIGH10,
  H264_HIGH422,
  H264_HIGH444_PREDICTIVE,
  H264_SCALABLE_BASELINE,
  H264_SCALABLE_HIGH,
  H264_STEREO_HIGH,
  H264_MULTIVIEW_HIGH,
};

// Pixel format.
// TODO(dalesat): Blindly copied from Chromium, revisit.
enum PixelFormat {
  UNKNOWN,
  I420,  // 12bpp YUV planar 1x1 Y, 2x2 UV samples, a.k.a. YU12.
  YV12,  // 12bpp YVU planar 1x1 Y, 2x2 VU samples.
  YV16,  // 16bpp YVU planar 1x1 Y, 2x1 VU samples.
  YV12A,  // 20bpp YUVA planar 1x1 Y, 2x2 VU, 1x1 A samples.
  YV24,  // 24bpp YUV planar, no subsampling.
  NV12,  // 12bpp with Y plane followed by a 2x2 interleaved UV plane.
  NV21,  // 12bpp with Y plane followed by a 2x2 interleaved VU plane.
  UYVY,  // 16bpp interleaved 2x1 U, 1x1 Y, 2x1 V, 1x1 Y samples.
  YUY2,  // 16bpp interleaved 1x1 Y, 2x1 U, 1x1 Y, 2x1 V samples.
  ARGB,  // 32bpp ARGB, 1 plane.
  XRGB,  // 24bpp XRGB, 1 plane.
  RGB24,  // 24bpp BGR, 1 plane.
  RGB32,  // 32bpp BGRA, 1 plane.
  MJPEG,  // MJPEG compressed.
  MT21,
};

// Pixel format.
// TODO(dalesat): Blindly copied from Chromium, revisit.
enum ColorSpace {
  UNKNOWN,
  NOT_APPLICABLE,
  JPEG,
  HD_REC709,
  SD_REC601,
};

// Media type details for the TEXT medium.
// TODO(dalesat): Define.
struct TextMediaTypeDetails {
};

// Media type set details for the TEXT medium.
// TODO(dalesat): Define.
struct TextMediaTypeSetDetails {
};

// Media type details for the SUBPICTURE medium.
// TODO(dalesat): Define.
struct SubpictureMediaTypeDetails {
};

// Media type set details for the SUBPICTURE medium.
// TODO(dalesat): Define.
struct SubpictureMediaTypeSetDetails {
};
