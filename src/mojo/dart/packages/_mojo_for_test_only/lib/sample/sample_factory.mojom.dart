// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library sample_factory_mojom;
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/mojom_types.mojom.dart' as mojom_types;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:_mojo_for_test_only/imported/sample_import.mojom.dart' as sample_import_mojom;



class Request extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  int x = 0;
  core.MojoMessagePipeEndpoint pipe = null;
  List<core.MojoMessagePipeEndpoint> morePipes = null;
  sample_import_mojom.ImportedInterfaceInterface obj = null;

  Request() : super(kVersions.last.size);

  Request.init(
    int this.x, 
    core.MojoMessagePipeEndpoint this.pipe, 
    List<core.MojoMessagePipeEndpoint> this.morePipes, 
    sample_import_mojom.ImportedInterfaceInterface this.obj
  ) : super(kVersions.last.size);

  static Request deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static Request decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    Request result = new Request();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.x = decoder0.decodeInt32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.pipe = decoder0.decodeMessagePipeHandle(12, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.morePipes = decoder0.decodeMessagePipeHandleArray(16, bindings.kArrayNullable, bindings.kUnspecifiedArrayLength);
    }
    if (mainDataHeader.version >= 0) {
      
      result.obj = decoder0.decodeServiceInterface(24, true, sample_import_mojom.ImportedInterfaceProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "Request";
    String fieldName;
    try {
      fieldName = "x";
      encoder0.encodeInt32(x, 8);
      fieldName = "pipe";
      encoder0.encodeMessagePipeHandle(pipe, 12, true);
      fieldName = "morePipes";
      encoder0.encodeMessagePipeHandleArray(morePipes, 16, bindings.kArrayNullable, bindings.kUnspecifiedArrayLength);
      fieldName = "obj";
      encoder0.encodeInterface(obj, 24, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "Request("
           "x: $x" ", "
           "pipe: $pipe" ", "
           "morePipes: $morePipes" ", "
           "obj: $obj" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class Response extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int x = 0;
  core.MojoMessagePipeEndpoint pipe = null;

  Response() : super(kVersions.last.size);

  Response.init(
    int this.x, 
    core.MojoMessagePipeEndpoint this.pipe
  ) : super(kVersions.last.size);

  static Response deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static Response decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    Response result = new Response();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.x = decoder0.decodeInt32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.pipe = decoder0.decodeMessagePipeHandle(12, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "Response";
    String fieldName;
    try {
      fieldName = "x";
      encoder0.encodeInt32(x, 8);
      fieldName = "pipe";
      encoder0.encodeMessagePipeHandle(pipe, 12, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "Response("
           "x: $x" ", "
           "pipe: $pipe" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NamedObjectSetNameParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String name = null;

  _NamedObjectSetNameParams() : super(kVersions.last.size);

  _NamedObjectSetNameParams.init(
    String this.name
  ) : super(kVersions.last.size);

  static _NamedObjectSetNameParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NamedObjectSetNameParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NamedObjectSetNameParams result = new _NamedObjectSetNameParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.name = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NamedObjectSetNameParams";
    String fieldName;
    try {
      fieldName = "name";
      encoder0.encodeString(name, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NamedObjectSetNameParams("
           "name: $name" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["name"] = name;
    return map;
  }
}


class _NamedObjectGetNameParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _NamedObjectGetNameParams() : super(kVersions.last.size);

  _NamedObjectGetNameParams.init(
  ) : super(kVersions.last.size);

  static _NamedObjectGetNameParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NamedObjectGetNameParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NamedObjectGetNameParams result = new _NamedObjectGetNameParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NamedObjectGetNameParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NamedObjectGetNameParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class NamedObjectGetNameResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String name = null;

  NamedObjectGetNameResponseParams() : super(kVersions.last.size);

  NamedObjectGetNameResponseParams.init(
    String this.name
  ) : super(kVersions.last.size);

  static NamedObjectGetNameResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static NamedObjectGetNameResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NamedObjectGetNameResponseParams result = new NamedObjectGetNameResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.name = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "NamedObjectGetNameResponseParams";
    String fieldName;
    try {
      fieldName = "name";
      encoder0.encodeString(name, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "NamedObjectGetNameResponseParams("
           "name: $name" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["name"] = name;
    return map;
  }
}


class _FactoryDoStuffParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  Request request = null;
  core.MojoMessagePipeEndpoint pipe = null;

  _FactoryDoStuffParams() : super(kVersions.last.size);

  _FactoryDoStuffParams.init(
    Request this.request, 
    core.MojoMessagePipeEndpoint this.pipe
  ) : super(kVersions.last.size);

  static _FactoryDoStuffParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _FactoryDoStuffParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _FactoryDoStuffParams result = new _FactoryDoStuffParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.request = Request.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.pipe = decoder0.decodeMessagePipeHandle(16, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_FactoryDoStuffParams";
    String fieldName;
    try {
      fieldName = "request";
      encoder0.encodeStruct(request, 8, false);
      fieldName = "pipe";
      encoder0.encodeMessagePipeHandle(pipe, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_FactoryDoStuffParams("
           "request: $request" ", "
           "pipe: $pipe" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class FactoryDoStuffResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  Response response = null;
  String text = null;

  FactoryDoStuffResponseParams() : super(kVersions.last.size);

  FactoryDoStuffResponseParams.init(
    Response this.response, 
    String this.text
  ) : super(kVersions.last.size);

  static FactoryDoStuffResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static FactoryDoStuffResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    FactoryDoStuffResponseParams result = new FactoryDoStuffResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.response = Response.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.text = decoder0.decodeString(16, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "FactoryDoStuffResponseParams";
    String fieldName;
    try {
      fieldName = "response";
      encoder0.encodeStruct(response, 8, false);
      fieldName = "text";
      encoder0.encodeString(text, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "FactoryDoStuffResponseParams("
           "response: $response" ", "
           "text: $text" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _FactoryDoStuff2Params extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  core.MojoDataPipeConsumer pipe = null;

  _FactoryDoStuff2Params() : super(kVersions.last.size);

  _FactoryDoStuff2Params.init(
    core.MojoDataPipeConsumer this.pipe
  ) : super(kVersions.last.size);

  static _FactoryDoStuff2Params deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _FactoryDoStuff2Params decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _FactoryDoStuff2Params result = new _FactoryDoStuff2Params();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.pipe = decoder0.decodeConsumerHandle(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_FactoryDoStuff2Params";
    String fieldName;
    try {
      fieldName = "pipe";
      encoder0.encodeConsumerHandle(pipe, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_FactoryDoStuff2Params("
           "pipe: $pipe" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class FactoryDoStuff2ResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String text = null;

  FactoryDoStuff2ResponseParams() : super(kVersions.last.size);

  FactoryDoStuff2ResponseParams.init(
    String this.text
  ) : super(kVersions.last.size);

  static FactoryDoStuff2ResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static FactoryDoStuff2ResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    FactoryDoStuff2ResponseParams result = new FactoryDoStuff2ResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.text = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "FactoryDoStuff2ResponseParams";
    String fieldName;
    try {
      fieldName = "text";
      encoder0.encodeString(text, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "FactoryDoStuff2ResponseParams("
           "text: $text" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["text"] = text;
    return map;
  }
}


class _FactoryCreateNamedObjectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  NamedObjectInterfaceRequest obj = null;

  _FactoryCreateNamedObjectParams() : super(kVersions.last.size);

  _FactoryCreateNamedObjectParams.init(
    NamedObjectInterfaceRequest this.obj
  ) : super(kVersions.last.size);

  static _FactoryCreateNamedObjectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _FactoryCreateNamedObjectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _FactoryCreateNamedObjectParams result = new _FactoryCreateNamedObjectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.obj = decoder0.decodeInterfaceRequest(8, false, NamedObjectStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_FactoryCreateNamedObjectParams";
    String fieldName;
    try {
      fieldName = "obj";
      encoder0.encodeInterfaceRequest(obj, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_FactoryCreateNamedObjectParams("
           "obj: $obj" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _FactoryRequestImportedInterfaceParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  sample_import_mojom.ImportedInterfaceInterfaceRequest obj = null;

  _FactoryRequestImportedInterfaceParams() : super(kVersions.last.size);

  _FactoryRequestImportedInterfaceParams.init(
    sample_import_mojom.ImportedInterfaceInterfaceRequest this.obj
  ) : super(kVersions.last.size);

  static _FactoryRequestImportedInterfaceParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _FactoryRequestImportedInterfaceParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _FactoryRequestImportedInterfaceParams result = new _FactoryRequestImportedInterfaceParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.obj = decoder0.decodeInterfaceRequest(8, false, sample_import_mojom.ImportedInterfaceStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_FactoryRequestImportedInterfaceParams";
    String fieldName;
    try {
      fieldName = "obj";
      encoder0.encodeInterfaceRequest(obj, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_FactoryRequestImportedInterfaceParams("
           "obj: $obj" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class FactoryRequestImportedInterfaceResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  sample_import_mojom.ImportedInterfaceInterfaceRequest obj = null;

  FactoryRequestImportedInterfaceResponseParams() : super(kVersions.last.size);

  FactoryRequestImportedInterfaceResponseParams.init(
    sample_import_mojom.ImportedInterfaceInterfaceRequest this.obj
  ) : super(kVersions.last.size);

  static FactoryRequestImportedInterfaceResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static FactoryRequestImportedInterfaceResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    FactoryRequestImportedInterfaceResponseParams result = new FactoryRequestImportedInterfaceResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.obj = decoder0.decodeInterfaceRequest(8, false, sample_import_mojom.ImportedInterfaceStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "FactoryRequestImportedInterfaceResponseParams";
    String fieldName;
    try {
      fieldName = "obj";
      encoder0.encodeInterfaceRequest(obj, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "FactoryRequestImportedInterfaceResponseParams("
           "obj: $obj" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _FactoryTakeImportedInterfaceParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  sample_import_mojom.ImportedInterfaceInterface obj = null;

  _FactoryTakeImportedInterfaceParams() : super(kVersions.last.size);

  _FactoryTakeImportedInterfaceParams.init(
    sample_import_mojom.ImportedInterfaceInterface this.obj
  ) : super(kVersions.last.size);

  static _FactoryTakeImportedInterfaceParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _FactoryTakeImportedInterfaceParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _FactoryTakeImportedInterfaceParams result = new _FactoryTakeImportedInterfaceParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.obj = decoder0.decodeServiceInterface(8, false, sample_import_mojom.ImportedInterfaceProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_FactoryTakeImportedInterfaceParams";
    String fieldName;
    try {
      fieldName = "obj";
      encoder0.encodeInterface(obj, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_FactoryTakeImportedInterfaceParams("
           "obj: $obj" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class FactoryTakeImportedInterfaceResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  sample_import_mojom.ImportedInterfaceInterface obj = null;

  FactoryTakeImportedInterfaceResponseParams() : super(kVersions.last.size);

  FactoryTakeImportedInterfaceResponseParams.init(
    sample_import_mojom.ImportedInterfaceInterface this.obj
  ) : super(kVersions.last.size);

  static FactoryTakeImportedInterfaceResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static FactoryTakeImportedInterfaceResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    FactoryTakeImportedInterfaceResponseParams result = new FactoryTakeImportedInterfaceResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.obj = decoder0.decodeServiceInterface(8, false, sample_import_mojom.ImportedInterfaceProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "FactoryTakeImportedInterfaceResponseParams";
    String fieldName;
    try {
      fieldName = "obj";
      encoder0.encodeInterface(obj, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "FactoryTakeImportedInterfaceResponseParams("
           "obj: $obj" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _namedObjectMethodSetNameName = 0;
const int _namedObjectMethodGetNameName = 1;

class _NamedObjectServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder){
    var interfaceTypeKey = getRuntimeTypeInfo().services["sample::NamedObject"];
    var userDefinedType = getAllMojomTypeDefinitions()[interfaceTypeKey];
    responder(userDefinedType.interfaceType);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(getAllMojomTypeDefinitions()[typeKey]);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(getAllMojomTypeDefinitions());
  }
}

abstract class NamedObject {
  static const String serviceName = "sample::NamedObject";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _NamedObjectServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static NamedObjectProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    NamedObjectProxy p = new NamedObjectProxy.unbound();
    String name = serviceName ?? NamedObject.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void setName(String name);
  void getName(void callback(String name));
}

abstract class NamedObjectInterface
    implements bindings.MojoInterface<NamedObject>,
               NamedObject {
  factory NamedObjectInterface([NamedObject impl]) =>
      new NamedObjectStub.unbound(impl);

  factory NamedObjectInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [NamedObject impl]) =>
      new NamedObjectStub.fromEndpoint(endpoint, impl);

  factory NamedObjectInterface.fromMock(
      NamedObject mock) =>
      new NamedObjectProxy.fromMock(mock);
}

abstract class NamedObjectInterfaceRequest
    implements bindings.MojoInterface<NamedObject>,
               NamedObject {
  factory NamedObjectInterfaceRequest() =>
      new NamedObjectProxy.unbound();
}

class _NamedObjectProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<NamedObject> {
  NamedObject impl;

  _NamedObjectProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _NamedObjectProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _NamedObjectProxyControl.unbound() : super.unbound();

  String get serviceName => NamedObject.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _namedObjectMethodGetNameName:
        var r = NamedObjectGetNameResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.name );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NamedObjectProxyControl($superString)";
  }
}

class NamedObjectProxy
    extends bindings.Proxy<NamedObject>
    implements NamedObject,
               NamedObjectInterface,
               NamedObjectInterfaceRequest {
  NamedObjectProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _NamedObjectProxyControl.fromEndpoint(endpoint));

  NamedObjectProxy.fromHandle(core.MojoHandle handle)
      : super(new _NamedObjectProxyControl.fromHandle(handle));

  NamedObjectProxy.unbound()
      : super(new _NamedObjectProxyControl.unbound());

  factory NamedObjectProxy.fromMock(NamedObject mock) {
    NamedObjectProxy newMockedProxy =
        new NamedObjectProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static NamedObjectProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NamedObjectProxy"));
    return new NamedObjectProxy.fromEndpoint(endpoint);
  }


  void setName(String name) {
    if (impl != null) {
      impl.setName(name);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NamedObjectSetNameParams();
    params.name = name;
    ctrl.sendMessage(params,
        _namedObjectMethodSetNameName);
  }
  void getName(void callback(String name)) {
    if (impl != null) {
      impl.getName(callback);
      return;
    }
    var params = new _NamedObjectGetNameParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((String name) {
        z.bindCallback(() {
          callback(name);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _namedObjectMethodGetNameName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _NamedObjectStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<NamedObject> {
  NamedObject _impl;

  _NamedObjectStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NamedObject impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _NamedObjectStubControl.fromHandle(
      core.MojoHandle handle, [NamedObject impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _NamedObjectStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => NamedObject.serviceName;


  Function _namedObjectGetNameResponseParamsResponder(
      int requestId) {
  return (String name) {
      var result = new NamedObjectGetNameResponseParams();
      result.name = name;
      sendResponse(buildResponseWithId(
          result,
          _namedObjectMethodGetNameName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _namedObjectMethodSetNameName:
        var params = _NamedObjectSetNameParams.deserialize(
            message.payload);
        _impl.setName(params.name);
        break;
      case _namedObjectMethodGetNameName:
        _impl.getName(_namedObjectGetNameResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  NamedObject get impl => _impl;
  set impl(NamedObject d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NamedObjectStubControl($superString)";
  }

  int get version => 0;
}

class NamedObjectStub
    extends bindings.Stub<NamedObject>
    implements NamedObject,
               NamedObjectInterface,
               NamedObjectInterfaceRequest {
  NamedObjectStub.unbound([NamedObject impl])
      : super(new _NamedObjectStubControl.unbound(impl));

  NamedObjectStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NamedObject impl])
      : super(new _NamedObjectStubControl.fromEndpoint(endpoint, impl));

  NamedObjectStub.fromHandle(
      core.MojoHandle handle, [NamedObject impl])
      : super(new _NamedObjectStubControl.fromHandle(handle, impl));

  static NamedObjectStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NamedObjectStub"));
    return new NamedObjectStub.fromEndpoint(endpoint);
  }


  void setName(String name) {
    return impl.setName(name);
  }
  void getName(void callback(String name)) {
    return impl.getName(callback);
  }
}

const int _factoryMethodDoStuffName = 0;
const int _factoryMethodDoStuff2Name = 1;
const int _factoryMethodCreateNamedObjectName = 2;
const int _factoryMethodRequestImportedInterfaceName = 3;
const int _factoryMethodTakeImportedInterfaceName = 4;

class _FactoryServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Factory {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _FactoryServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static FactoryProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    FactoryProxy p = new FactoryProxy.unbound();
    String name = serviceName ?? Factory.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void doStuff(Request request,core.MojoMessagePipeEndpoint pipe,void callback(Response response, String text));
  void doStuff2(core.MojoDataPipeConsumer pipe,void callback(String text));
  void createNamedObject(NamedObjectInterfaceRequest obj);
  void requestImportedInterface(sample_import_mojom.ImportedInterfaceInterfaceRequest obj,void callback(sample_import_mojom.ImportedInterfaceInterfaceRequest obj));
  void takeImportedInterface(sample_import_mojom.ImportedInterfaceInterface obj,void callback(sample_import_mojom.ImportedInterfaceInterface obj));
}

abstract class FactoryInterface
    implements bindings.MojoInterface<Factory>,
               Factory {
  factory FactoryInterface([Factory impl]) =>
      new FactoryStub.unbound(impl);

  factory FactoryInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Factory impl]) =>
      new FactoryStub.fromEndpoint(endpoint, impl);

  factory FactoryInterface.fromMock(
      Factory mock) =>
      new FactoryProxy.fromMock(mock);
}

abstract class FactoryInterfaceRequest
    implements bindings.MojoInterface<Factory>,
               Factory {
  factory FactoryInterfaceRequest() =>
      new FactoryProxy.unbound();
}

class _FactoryProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Factory> {
  Factory impl;

  _FactoryProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _FactoryProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _FactoryProxyControl.unbound() : super.unbound();

  String get serviceName => Factory.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _factoryMethodDoStuffName:
        var r = FactoryDoStuffResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.response , r.text );
        break;
      case _factoryMethodDoStuff2Name:
        var r = FactoryDoStuff2ResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.text );
        break;
      case _factoryMethodRequestImportedInterfaceName:
        var r = FactoryRequestImportedInterfaceResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.obj );
        break;
      case _factoryMethodTakeImportedInterfaceName:
        var r = FactoryTakeImportedInterfaceResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.obj );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_FactoryProxyControl($superString)";
  }
}

class FactoryProxy
    extends bindings.Proxy<Factory>
    implements Factory,
               FactoryInterface,
               FactoryInterfaceRequest {
  FactoryProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _FactoryProxyControl.fromEndpoint(endpoint));

  FactoryProxy.fromHandle(core.MojoHandle handle)
      : super(new _FactoryProxyControl.fromHandle(handle));

  FactoryProxy.unbound()
      : super(new _FactoryProxyControl.unbound());

  factory FactoryProxy.fromMock(Factory mock) {
    FactoryProxy newMockedProxy =
        new FactoryProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static FactoryProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For FactoryProxy"));
    return new FactoryProxy.fromEndpoint(endpoint);
  }


  void doStuff(Request request,core.MojoMessagePipeEndpoint pipe,void callback(Response response, String text)) {
    if (impl != null) {
      impl.doStuff(request,pipe,callback);
      return;
    }
    var params = new _FactoryDoStuffParams();
    params.request = request;
    params.pipe = pipe;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((Response response, String text) {
        z.bindCallback(() {
          callback(response, text);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _factoryMethodDoStuffName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void doStuff2(core.MojoDataPipeConsumer pipe,void callback(String text)) {
    if (impl != null) {
      impl.doStuff2(pipe,callback);
      return;
    }
    var params = new _FactoryDoStuff2Params();
    params.pipe = pipe;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((String text) {
        z.bindCallback(() {
          callback(text);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _factoryMethodDoStuff2Name,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void createNamedObject(NamedObjectInterfaceRequest obj) {
    if (impl != null) {
      impl.createNamedObject(obj);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _FactoryCreateNamedObjectParams();
    params.obj = obj;
    ctrl.sendMessage(params,
        _factoryMethodCreateNamedObjectName);
  }
  void requestImportedInterface(sample_import_mojom.ImportedInterfaceInterfaceRequest obj,void callback(sample_import_mojom.ImportedInterfaceInterfaceRequest obj)) {
    if (impl != null) {
      impl.requestImportedInterface(obj,callback);
      return;
    }
    var params = new _FactoryRequestImportedInterfaceParams();
    params.obj = obj;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((sample_import_mojom.ImportedInterfaceInterfaceRequest obj) {
        z.bindCallback(() {
          callback(obj);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _factoryMethodRequestImportedInterfaceName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void takeImportedInterface(sample_import_mojom.ImportedInterfaceInterface obj,void callback(sample_import_mojom.ImportedInterfaceInterface obj)) {
    if (impl != null) {
      impl.takeImportedInterface(obj,callback);
      return;
    }
    var params = new _FactoryTakeImportedInterfaceParams();
    params.obj = obj;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((sample_import_mojom.ImportedInterfaceInterface obj) {
        z.bindCallback(() {
          callback(obj);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _factoryMethodTakeImportedInterfaceName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _FactoryStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Factory> {
  Factory _impl;

  _FactoryStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Factory impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _FactoryStubControl.fromHandle(
      core.MojoHandle handle, [Factory impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _FactoryStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Factory.serviceName;


  Function _factoryDoStuffResponseParamsResponder(
      int requestId) {
  return (Response response, String text) {
      var result = new FactoryDoStuffResponseParams();
      result.response = response;
      result.text = text;
      sendResponse(buildResponseWithId(
          result,
          _factoryMethodDoStuffName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _factoryDoStuff2ResponseParamsResponder(
      int requestId) {
  return (String text) {
      var result = new FactoryDoStuff2ResponseParams();
      result.text = text;
      sendResponse(buildResponseWithId(
          result,
          _factoryMethodDoStuff2Name,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _factoryRequestImportedInterfaceResponseParamsResponder(
      int requestId) {
  return (sample_import_mojom.ImportedInterfaceInterfaceRequest obj) {
      var result = new FactoryRequestImportedInterfaceResponseParams();
      result.obj = obj;
      sendResponse(buildResponseWithId(
          result,
          _factoryMethodRequestImportedInterfaceName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _factoryTakeImportedInterfaceResponseParamsResponder(
      int requestId) {
  return (sample_import_mojom.ImportedInterfaceInterface obj) {
      var result = new FactoryTakeImportedInterfaceResponseParams();
      result.obj = obj;
      sendResponse(buildResponseWithId(
          result,
          _factoryMethodTakeImportedInterfaceName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _factoryMethodDoStuffName:
        var params = _FactoryDoStuffParams.deserialize(
            message.payload);
        _impl.doStuff(params.request, params.pipe, _factoryDoStuffResponseParamsResponder(message.header.requestId));
        break;
      case _factoryMethodDoStuff2Name:
        var params = _FactoryDoStuff2Params.deserialize(
            message.payload);
        _impl.doStuff2(params.pipe, _factoryDoStuff2ResponseParamsResponder(message.header.requestId));
        break;
      case _factoryMethodCreateNamedObjectName:
        var params = _FactoryCreateNamedObjectParams.deserialize(
            message.payload);
        _impl.createNamedObject(params.obj);
        break;
      case _factoryMethodRequestImportedInterfaceName:
        var params = _FactoryRequestImportedInterfaceParams.deserialize(
            message.payload);
        _impl.requestImportedInterface(params.obj, _factoryRequestImportedInterfaceResponseParamsResponder(message.header.requestId));
        break;
      case _factoryMethodTakeImportedInterfaceName:
        var params = _FactoryTakeImportedInterfaceParams.deserialize(
            message.payload);
        _impl.takeImportedInterface(params.obj, _factoryTakeImportedInterfaceResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Factory get impl => _impl;
  set impl(Factory d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_FactoryStubControl($superString)";
  }

  int get version => 0;
}

class FactoryStub
    extends bindings.Stub<Factory>
    implements Factory,
               FactoryInterface,
               FactoryInterfaceRequest {
  FactoryStub.unbound([Factory impl])
      : super(new _FactoryStubControl.unbound(impl));

  FactoryStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Factory impl])
      : super(new _FactoryStubControl.fromEndpoint(endpoint, impl));

  FactoryStub.fromHandle(
      core.MojoHandle handle, [Factory impl])
      : super(new _FactoryStubControl.fromHandle(handle, impl));

  static FactoryStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For FactoryStub"));
    return new FactoryStub.fromEndpoint(endpoint);
  }


  void doStuff(Request request,core.MojoMessagePipeEndpoint pipe,void callback(Response response, String text)) {
    return impl.doStuff(request,pipe,callback);
  }
  void doStuff2(core.MojoDataPipeConsumer pipe,void callback(String text)) {
    return impl.doStuff2(pipe,callback);
  }
  void createNamedObject(NamedObjectInterfaceRequest obj) {
    return impl.createNamedObject(obj);
  }
  void requestImportedInterface(sample_import_mojom.ImportedInterfaceInterfaceRequest obj,void callback(sample_import_mojom.ImportedInterfaceInterfaceRequest obj)) {
    return impl.requestImportedInterface(obj,callback);
  }
  void takeImportedInterface(sample_import_mojom.ImportedInterfaceInterface obj,void callback(sample_import_mojom.ImportedInterfaceInterface obj)) {
    return impl.takeImportedInterface(obj,callback);
  }
}


mojom_types.RuntimeTypeInfo getRuntimeTypeInfo() => _runtimeTypeInfo ??
    _initRuntimeTypeInfo();

Map<String, mojom_types.UserDefinedType> getAllMojomTypeDefinitions() {
  return getRuntimeTypeInfo().typeMap;
}

var _runtimeTypeInfo;
mojom_types.RuntimeTypeInfo  _initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this
  // file. The string contains the base64 encoding of the gzip-compressed bytes.
  var serializedRuntimeTypeInfo = "H4sIAAAJbogC/+xaT3PbRBTXH4eaf6nTDI0oberQNrgwRCYcyOTUGShthxnoEA705JGdteNgW0KSGcOJY44c8xH4CPkYfIweOXKjK+utvV7tSpYrS+uOd2ZnLUWK9v3e7/3Z3WcoYavAeAEje/+IulZxL8P1R7hv4+5ZfaeHjo+/t/ro9IfmOWr53OfvwTs/vXj+uPHd4xfH4YsH7Hvs969grOFewr3KzOtnGB0Y7+K+w/nOt1bLt93f556H6P/8iH4dIs8fz8Pg/t1z7IGHnsJ8Azl0Bsfg+rI6i2vt09lrpz6VW6HkJu0/5voRc11ncPofGvscaddxv4Y7wekm/r050e8Evoh+9nB/B/cO7g3czaHnmj27ZfXMjm13esg8s/vI/MO1zL59bh+antsa/zKdYbPXbZndgY/cttVCntnsDk67g45n+hhhzww/3WiHnz4IXupHvk/wuY37BvwO8NMA5xKFxwb1/AUQs7oZjv9sheOZwcf9JYyXpflwVyjc6f8nwv0b+8QfttsR+T4GWfLCt8r4ASL3SJ9f3qDVBfLugMwg7+cu2BMrN2l58kqjvn+mzspL2+8Gx/5ELSt+iHAK+HGjAH4ozDwMZr7ETyb5UR6+pRh8ywvgq8bg+x58z+k6iBd/Any/yBHfCuXDVE4cNai5a9T1su3WgLlM7TaMc2u75bcK6EyE0z3In2SxWzJfkr8k5TePBPlh3nbro5HPs9sA3/sF2K0iyJdFdivKM+r61A9kgRfRL9jvIYvXfUnyjIq2FH91SBKNov0Vy4u08S9rP5UU/wJe7BdkR1qCHanUPFk+/UuuU/LpSIDTh7hvzfIpdISCdbOMvFIL4JXIPwe8+kpS/6xy1pdVwbpbS4GXRulDxK+vXWT5iN2NiOL3oGB/TXBwUtqXaP9hDzCIyD9ZIa6OneWZZ74L+xx281zIk70CeKIx8yD3t2HOLMPn3Zd7Xbu9grxKT4G/HmO3JE+G9eyzvmO7Pjp9RlBj9bEvid1eZGS3NcBAJP8q5V0y2e1+zvFRZLd1ah/kFu5dUPBBRNPhc5+BLU/sOOGFRfM7sjD6KyWPnwr08RD8ZAyPVy7fk4nPn+S8jpCdz0nxqZRCL6WY+HQH9w+C+Vu/IN6Meecpb1J8egAYcOWncsu1Paez5+C9LyXYv5Q1PmXN48B37sbwmASnNY/T8fgh+Ig1j/lxaUTyLJWvF6LXSxj/Zvh8FbMfTc+nysmrrnHWjSfI/a3bGm8QzFWHIlpv3oJzU8EyM8KT2znXOSTJZcSc42iUXtnzsed6/LnDss6vT5A/1hk77ztv2LkDqW8AeaWpb5B1f3gAhszjxdYK7g8TPpW1bM/viB09EdjRriR29FLJ1o6eSGZH5Tn4ocTEtWWdc05xkqMuY9X8zS5wTnZ/I1pnGG/F45S2DpTUZzF1oOR2BL/34b288GPrgWuk7gfs6k9dzDtFmdaKLpt3b4P+RoJ9w03QeV64pa03KOVcb3cd7hVVb8fDR6MDeQZ1TRrnPmk3YJ3Rt13UCEDy+LwJxrsFxHsVZCC8KXPijLrAur+yAI76a6z7t8HnF4GfLOt+2n+K4sqRnk1cYesLSX7HlBVG9HQz57jCrpcNdTXiyM46jkT2Q4qMI0n1n+T5VwEAAP//hkGPYIg1AAA=";

  // Deserialize RuntimeTypeInfo
  var bytes = BASE64.decode(serializedRuntimeTypeInfo);
  var unzippedBytes = new ZLibDecoder().convert(bytes);
  var bdata = new ByteData.view(unzippedBytes.buffer);
  var message = new bindings.Message(bdata, null, unzippedBytes.length, 0);
  _runtimeTypeInfo = mojom_types.RuntimeTypeInfo.deserialize(message);
  sample_import_mojom.getAllMojomTypeDefinitions()
      .forEach((String s, mojom_types.UserDefinedType udt) {
          _runtimeTypeInfo.typeMap[s] = udt;
      });

  return _runtimeTypeInfo;
}
