// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library pingpong_service_mojom;
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/mojom_types.mojom.dart' as mojom_types;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _PingPongServiceSetClientParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  PingPongClientInterface client = null;

  _PingPongServiceSetClientParams() : super(kVersions.last.size);

  _PingPongServiceSetClientParams.init(
    PingPongClientInterface this.client
  ) : super(kVersions.last.size);

  static _PingPongServiceSetClientParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongServiceSetClientParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongServiceSetClientParams result = new _PingPongServiceSetClientParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.client = decoder0.decodeServiceInterface(8, false, PingPongClientProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongServiceSetClientParams";
    String fieldName;
    try {
      fieldName = "client";
      encoder0.encodeInterface(client, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongServiceSetClientParams("
           "client: $client" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _PingPongServicePingParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int pingValue = 0;

  _PingPongServicePingParams() : super(kVersions.last.size);

  _PingPongServicePingParams.init(
    int this.pingValue
  ) : super(kVersions.last.size);

  static _PingPongServicePingParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongServicePingParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongServicePingParams result = new _PingPongServicePingParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.pingValue = decoder0.decodeUint16(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongServicePingParams";
    String fieldName;
    try {
      fieldName = "pingValue";
      encoder0.encodeUint16(pingValue, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongServicePingParams("
           "pingValue: $pingValue" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["pingValue"] = pingValue;
    return map;
  }
}


class _PingPongServicePingTargetUrlParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String url = null;
  int count = 0;

  _PingPongServicePingTargetUrlParams() : super(kVersions.last.size);

  _PingPongServicePingTargetUrlParams.init(
    String this.url, 
    int this.count
  ) : super(kVersions.last.size);

  static _PingPongServicePingTargetUrlParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongServicePingTargetUrlParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongServicePingTargetUrlParams result = new _PingPongServicePingTargetUrlParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.url = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.count = decoder0.decodeUint16(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongServicePingTargetUrlParams";
    String fieldName;
    try {
      fieldName = "url";
      encoder0.encodeString(url, 8, false);
      fieldName = "count";
      encoder0.encodeUint16(count, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongServicePingTargetUrlParams("
           "url: $url" ", "
           "count: $count" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["url"] = url;
    map["count"] = count;
    return map;
  }
}


class PingPongServicePingTargetUrlResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  bool ok = false;

  PingPongServicePingTargetUrlResponseParams() : super(kVersions.last.size);

  PingPongServicePingTargetUrlResponseParams.init(
    bool this.ok
  ) : super(kVersions.last.size);

  static PingPongServicePingTargetUrlResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PingPongServicePingTargetUrlResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PingPongServicePingTargetUrlResponseParams result = new PingPongServicePingTargetUrlResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.ok = decoder0.decodeBool(8, 0);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PingPongServicePingTargetUrlResponseParams";
    String fieldName;
    try {
      fieldName = "ok";
      encoder0.encodeBool(ok, 8, 0);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PingPongServicePingTargetUrlResponseParams("
           "ok: $ok" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["ok"] = ok;
    return map;
  }
}


class _PingPongServicePingTargetServiceParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  PingPongServiceInterface service = null;
  int count = 0;

  _PingPongServicePingTargetServiceParams() : super(kVersions.last.size);

  _PingPongServicePingTargetServiceParams.init(
    PingPongServiceInterface this.service, 
    int this.count
  ) : super(kVersions.last.size);

  static _PingPongServicePingTargetServiceParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongServicePingTargetServiceParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongServicePingTargetServiceParams result = new _PingPongServicePingTargetServiceParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.service = decoder0.decodeServiceInterface(8, false, PingPongServiceProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.count = decoder0.decodeUint16(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongServicePingTargetServiceParams";
    String fieldName;
    try {
      fieldName = "service";
      encoder0.encodeInterface(service, 8, false);
      fieldName = "count";
      encoder0.encodeUint16(count, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongServicePingTargetServiceParams("
           "service: $service" ", "
           "count: $count" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class PingPongServicePingTargetServiceResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  bool ok = false;

  PingPongServicePingTargetServiceResponseParams() : super(kVersions.last.size);

  PingPongServicePingTargetServiceResponseParams.init(
    bool this.ok
  ) : super(kVersions.last.size);

  static PingPongServicePingTargetServiceResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PingPongServicePingTargetServiceResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PingPongServicePingTargetServiceResponseParams result = new PingPongServicePingTargetServiceResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.ok = decoder0.decodeBool(8, 0);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PingPongServicePingTargetServiceResponseParams";
    String fieldName;
    try {
      fieldName = "ok";
      encoder0.encodeBool(ok, 8, 0);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PingPongServicePingTargetServiceResponseParams("
           "ok: $ok" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["ok"] = ok;
    return map;
  }
}


class _PingPongServiceGetPingPongServiceParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  PingPongServiceInterfaceRequest service = null;

  _PingPongServiceGetPingPongServiceParams() : super(kVersions.last.size);

  _PingPongServiceGetPingPongServiceParams.init(
    PingPongServiceInterfaceRequest this.service
  ) : super(kVersions.last.size);

  static _PingPongServiceGetPingPongServiceParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongServiceGetPingPongServiceParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongServiceGetPingPongServiceParams result = new _PingPongServiceGetPingPongServiceParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.service = decoder0.decodeInterfaceRequest(8, false, PingPongServiceStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongServiceGetPingPongServiceParams";
    String fieldName;
    try {
      fieldName = "service";
      encoder0.encodeInterfaceRequest(service, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongServiceGetPingPongServiceParams("
           "service: $service" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _PingPongServiceGetPingPongServiceDelayedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  PingPongServiceInterfaceRequest service = null;

  _PingPongServiceGetPingPongServiceDelayedParams() : super(kVersions.last.size);

  _PingPongServiceGetPingPongServiceDelayedParams.init(
    PingPongServiceInterfaceRequest this.service
  ) : super(kVersions.last.size);

  static _PingPongServiceGetPingPongServiceDelayedParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongServiceGetPingPongServiceDelayedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongServiceGetPingPongServiceDelayedParams result = new _PingPongServiceGetPingPongServiceDelayedParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.service = decoder0.decodeInterfaceRequest(8, false, PingPongServiceStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongServiceGetPingPongServiceDelayedParams";
    String fieldName;
    try {
      fieldName = "service";
      encoder0.encodeInterfaceRequest(service, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongServiceGetPingPongServiceDelayedParams("
           "service: $service" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _PingPongServiceQuitParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _PingPongServiceQuitParams() : super(kVersions.last.size);

  _PingPongServiceQuitParams.init(
  ) : super(kVersions.last.size);

  static _PingPongServiceQuitParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongServiceQuitParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongServiceQuitParams result = new _PingPongServiceQuitParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongServiceQuitParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongServiceQuitParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _PingPongClientPongParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int pongValue = 0;

  _PingPongClientPongParams() : super(kVersions.last.size);

  _PingPongClientPongParams.init(
    int this.pongValue
  ) : super(kVersions.last.size);

  static _PingPongClientPongParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingPongClientPongParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingPongClientPongParams result = new _PingPongClientPongParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.pongValue = decoder0.decodeUint16(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingPongClientPongParams";
    String fieldName;
    try {
      fieldName = "pongValue";
      encoder0.encodeUint16(pongValue, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingPongClientPongParams("
           "pongValue: $pongValue" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["pongValue"] = pongValue;
    return map;
  }
}

const int _pingPongServiceMethodSetClientName = 0;
const int _pingPongServiceMethodPingName = 1;
const int _pingPongServiceMethodPingTargetUrlName = 2;
const int _pingPongServiceMethodPingTargetServiceName = 3;
const int _pingPongServiceMethodGetPingPongServiceName = 4;
const int _pingPongServiceMethodGetPingPongServiceDelayedName = 5;
const int _pingPongServiceMethodQuitName = 6;

class _PingPongServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder){
    var interfaceTypeKey = getRuntimeTypeInfo().services["test::PingPongService"];
    var userDefinedType = getAllMojomTypeDefinitions()[interfaceTypeKey];
    responder(userDefinedType.interfaceType);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(getAllMojomTypeDefinitions()[typeKey]);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(getAllMojomTypeDefinitions());
  }
}

abstract class PingPongService {
  static const String serviceName = "test::PingPongService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _PingPongServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static PingPongServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    PingPongServiceProxy p = new PingPongServiceProxy.unbound();
    String name = serviceName ?? PingPongService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void setClient(PingPongClientInterface client);
  void ping(int pingValue);
  void pingTargetUrl(String url,int count,void callback(bool ok));
  void pingTargetService(PingPongServiceInterface service,int count,void callback(bool ok));
  void getPingPongService(PingPongServiceInterfaceRequest service);
  void getPingPongServiceDelayed(PingPongServiceInterfaceRequest service);
  void quit();
}

abstract class PingPongServiceInterface
    implements bindings.MojoInterface<PingPongService>,
               PingPongService {
  factory PingPongServiceInterface([PingPongService impl]) =>
      new PingPongServiceStub.unbound(impl);

  factory PingPongServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [PingPongService impl]) =>
      new PingPongServiceStub.fromEndpoint(endpoint, impl);

  factory PingPongServiceInterface.fromMock(
      PingPongService mock) =>
      new PingPongServiceProxy.fromMock(mock);
}

abstract class PingPongServiceInterfaceRequest
    implements bindings.MojoInterface<PingPongService>,
               PingPongService {
  factory PingPongServiceInterfaceRequest() =>
      new PingPongServiceProxy.unbound();
}

class _PingPongServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<PingPongService> {
  PingPongService impl;

  _PingPongServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _PingPongServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _PingPongServiceProxyControl.unbound() : super.unbound();

  String get serviceName => PingPongService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _pingPongServiceMethodPingTargetUrlName:
        var r = PingPongServicePingTargetUrlResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.ok );
        break;
      case _pingPongServiceMethodPingTargetServiceName:
        var r = PingPongServicePingTargetServiceResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.ok );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingPongServiceProxyControl($superString)";
  }
}

class PingPongServiceProxy
    extends bindings.Proxy<PingPongService>
    implements PingPongService,
               PingPongServiceInterface,
               PingPongServiceInterfaceRequest {
  PingPongServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _PingPongServiceProxyControl.fromEndpoint(endpoint));

  PingPongServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _PingPongServiceProxyControl.fromHandle(handle));

  PingPongServiceProxy.unbound()
      : super(new _PingPongServiceProxyControl.unbound());

  factory PingPongServiceProxy.fromMock(PingPongService mock) {
    PingPongServiceProxy newMockedProxy =
        new PingPongServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static PingPongServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingPongServiceProxy"));
    return new PingPongServiceProxy.fromEndpoint(endpoint);
  }


  void setClient(PingPongClientInterface client) {
    if (impl != null) {
      impl.setClient(client);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PingPongServiceSetClientParams();
    params.client = client;
    ctrl.sendMessage(params,
        _pingPongServiceMethodSetClientName);
  }
  void ping(int pingValue) {
    if (impl != null) {
      impl.ping(pingValue);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PingPongServicePingParams();
    params.pingValue = pingValue;
    ctrl.sendMessage(params,
        _pingPongServiceMethodPingName);
  }
  void pingTargetUrl(String url,int count,void callback(bool ok)) {
    if (impl != null) {
      impl.pingTargetUrl(url,count,callback);
      return;
    }
    var params = new _PingPongServicePingTargetUrlParams();
    params.url = url;
    params.count = count;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((bool ok) {
        z.bindCallback(() {
          callback(ok);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _pingPongServiceMethodPingTargetUrlName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void pingTargetService(PingPongServiceInterface service,int count,void callback(bool ok)) {
    if (impl != null) {
      impl.pingTargetService(service,count,callback);
      return;
    }
    var params = new _PingPongServicePingTargetServiceParams();
    params.service = service;
    params.count = count;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((bool ok) {
        z.bindCallback(() {
          callback(ok);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _pingPongServiceMethodPingTargetServiceName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getPingPongService(PingPongServiceInterfaceRequest service) {
    if (impl != null) {
      impl.getPingPongService(service);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PingPongServiceGetPingPongServiceParams();
    params.service = service;
    ctrl.sendMessage(params,
        _pingPongServiceMethodGetPingPongServiceName);
  }
  void getPingPongServiceDelayed(PingPongServiceInterfaceRequest service) {
    if (impl != null) {
      impl.getPingPongServiceDelayed(service);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PingPongServiceGetPingPongServiceDelayedParams();
    params.service = service;
    ctrl.sendMessage(params,
        _pingPongServiceMethodGetPingPongServiceDelayedName);
  }
  void quit() {
    if (impl != null) {
      impl.quit();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PingPongServiceQuitParams();
    ctrl.sendMessage(params,
        _pingPongServiceMethodQuitName);
  }
}

class _PingPongServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<PingPongService> {
  PingPongService _impl;

  _PingPongServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PingPongService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingPongServiceStubControl.fromHandle(
      core.MojoHandle handle, [PingPongService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingPongServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => PingPongService.serviceName;


  Function _pingPongServicePingTargetUrlResponseParamsResponder(
      int requestId) {
  return (bool ok) {
      var result = new PingPongServicePingTargetUrlResponseParams();
      result.ok = ok;
      sendResponse(buildResponseWithId(
          result,
          _pingPongServiceMethodPingTargetUrlName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _pingPongServicePingTargetServiceResponseParamsResponder(
      int requestId) {
  return (bool ok) {
      var result = new PingPongServicePingTargetServiceResponseParams();
      result.ok = ok;
      sendResponse(buildResponseWithId(
          result,
          _pingPongServiceMethodPingTargetServiceName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _pingPongServiceMethodSetClientName:
        var params = _PingPongServiceSetClientParams.deserialize(
            message.payload);
        _impl.setClient(params.client);
        break;
      case _pingPongServiceMethodPingName:
        var params = _PingPongServicePingParams.deserialize(
            message.payload);
        _impl.ping(params.pingValue);
        break;
      case _pingPongServiceMethodPingTargetUrlName:
        var params = _PingPongServicePingTargetUrlParams.deserialize(
            message.payload);
        _impl.pingTargetUrl(params.url, params.count, _pingPongServicePingTargetUrlResponseParamsResponder(message.header.requestId));
        break;
      case _pingPongServiceMethodPingTargetServiceName:
        var params = _PingPongServicePingTargetServiceParams.deserialize(
            message.payload);
        _impl.pingTargetService(params.service, params.count, _pingPongServicePingTargetServiceResponseParamsResponder(message.header.requestId));
        break;
      case _pingPongServiceMethodGetPingPongServiceName:
        var params = _PingPongServiceGetPingPongServiceParams.deserialize(
            message.payload);
        _impl.getPingPongService(params.service);
        break;
      case _pingPongServiceMethodGetPingPongServiceDelayedName:
        var params = _PingPongServiceGetPingPongServiceDelayedParams.deserialize(
            message.payload);
        _impl.getPingPongServiceDelayed(params.service);
        break;
      case _pingPongServiceMethodQuitName:
        _impl.quit();
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  PingPongService get impl => _impl;
  set impl(PingPongService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingPongServiceStubControl($superString)";
  }

  int get version => 0;
}

class PingPongServiceStub
    extends bindings.Stub<PingPongService>
    implements PingPongService,
               PingPongServiceInterface,
               PingPongServiceInterfaceRequest {
  PingPongServiceStub.unbound([PingPongService impl])
      : super(new _PingPongServiceStubControl.unbound(impl));

  PingPongServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PingPongService impl])
      : super(new _PingPongServiceStubControl.fromEndpoint(endpoint, impl));

  PingPongServiceStub.fromHandle(
      core.MojoHandle handle, [PingPongService impl])
      : super(new _PingPongServiceStubControl.fromHandle(handle, impl));

  static PingPongServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingPongServiceStub"));
    return new PingPongServiceStub.fromEndpoint(endpoint);
  }


  void setClient(PingPongClientInterface client) {
    return impl.setClient(client);
  }
  void ping(int pingValue) {
    return impl.ping(pingValue);
  }
  void pingTargetUrl(String url,int count,void callback(bool ok)) {
    return impl.pingTargetUrl(url,count,callback);
  }
  void pingTargetService(PingPongServiceInterface service,int count,void callback(bool ok)) {
    return impl.pingTargetService(service,count,callback);
  }
  void getPingPongService(PingPongServiceInterfaceRequest service) {
    return impl.getPingPongService(service);
  }
  void getPingPongServiceDelayed(PingPongServiceInterfaceRequest service) {
    return impl.getPingPongServiceDelayed(service);
  }
  void quit() {
    return impl.quit();
  }
}

const int _pingPongClientMethodPongName = 0;

class _PingPongClientServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class PingPongClient {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _PingPongClientServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static PingPongClientProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    PingPongClientProxy p = new PingPongClientProxy.unbound();
    String name = serviceName ?? PingPongClient.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void pong(int pongValue);
}

abstract class PingPongClientInterface
    implements bindings.MojoInterface<PingPongClient>,
               PingPongClient {
  factory PingPongClientInterface([PingPongClient impl]) =>
      new PingPongClientStub.unbound(impl);

  factory PingPongClientInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [PingPongClient impl]) =>
      new PingPongClientStub.fromEndpoint(endpoint, impl);

  factory PingPongClientInterface.fromMock(
      PingPongClient mock) =>
      new PingPongClientProxy.fromMock(mock);
}

abstract class PingPongClientInterfaceRequest
    implements bindings.MojoInterface<PingPongClient>,
               PingPongClient {
  factory PingPongClientInterfaceRequest() =>
      new PingPongClientProxy.unbound();
}

class _PingPongClientProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<PingPongClient> {
  PingPongClient impl;

  _PingPongClientProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _PingPongClientProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _PingPongClientProxyControl.unbound() : super.unbound();

  String get serviceName => PingPongClient.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingPongClientProxyControl($superString)";
  }
}

class PingPongClientProxy
    extends bindings.Proxy<PingPongClient>
    implements PingPongClient,
               PingPongClientInterface,
               PingPongClientInterfaceRequest {
  PingPongClientProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _PingPongClientProxyControl.fromEndpoint(endpoint));

  PingPongClientProxy.fromHandle(core.MojoHandle handle)
      : super(new _PingPongClientProxyControl.fromHandle(handle));

  PingPongClientProxy.unbound()
      : super(new _PingPongClientProxyControl.unbound());

  factory PingPongClientProxy.fromMock(PingPongClient mock) {
    PingPongClientProxy newMockedProxy =
        new PingPongClientProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static PingPongClientProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingPongClientProxy"));
    return new PingPongClientProxy.fromEndpoint(endpoint);
  }


  void pong(int pongValue) {
    if (impl != null) {
      impl.pong(pongValue);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PingPongClientPongParams();
    params.pongValue = pongValue;
    ctrl.sendMessage(params,
        _pingPongClientMethodPongName);
  }
}

class _PingPongClientStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<PingPongClient> {
  PingPongClient _impl;

  _PingPongClientStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PingPongClient impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingPongClientStubControl.fromHandle(
      core.MojoHandle handle, [PingPongClient impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingPongClientStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => PingPongClient.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _pingPongClientMethodPongName:
        var params = _PingPongClientPongParams.deserialize(
            message.payload);
        _impl.pong(params.pongValue);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  PingPongClient get impl => _impl;
  set impl(PingPongClient d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingPongClientStubControl($superString)";
  }

  int get version => 0;
}

class PingPongClientStub
    extends bindings.Stub<PingPongClient>
    implements PingPongClient,
               PingPongClientInterface,
               PingPongClientInterfaceRequest {
  PingPongClientStub.unbound([PingPongClient impl])
      : super(new _PingPongClientStubControl.unbound(impl));

  PingPongClientStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PingPongClient impl])
      : super(new _PingPongClientStubControl.fromEndpoint(endpoint, impl));

  PingPongClientStub.fromHandle(
      core.MojoHandle handle, [PingPongClient impl])
      : super(new _PingPongClientStubControl.fromHandle(handle, impl));

  static PingPongClientStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingPongClientStub"));
    return new PingPongClientStub.fromEndpoint(endpoint);
  }


  void pong(int pongValue) {
    return impl.pong(pongValue);
  }
}


mojom_types.RuntimeTypeInfo getRuntimeTypeInfo() => _runtimeTypeInfo ??
    _initRuntimeTypeInfo();

Map<String, mojom_types.UserDefinedType> getAllMojomTypeDefinitions() {
  return getRuntimeTypeInfo().typeMap;
}

var _runtimeTypeInfo;
mojom_types.RuntimeTypeInfo  _initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this
  // file. The string contains the base64 encoding of the gzip-compressed bytes.
  var serializedRuntimeTypeInfo = "H4sIAAAJbogC/+xazW7TThC3nabNv/33Cwikn0pLQeXQugIOVU+VaEUlEApQDj1VVrqkpk4cbKcCTj32EXrkyCNw5DF4jB65wW4zWzbr3cSO3GSNstJgdhNnZ347M7/Z3Ra0ZpuC5zk8+fFNpq9jyUF/AUseS4D8YGurZNcqJbdWeYu8U7uMBN9/AO/sH5R2D1/sHmyRF9fD7/Hz1xm9DGZ8A54rWOalv/vMsVEtiDP/KjNPhtOH9H8MNfurMF7UWtuU3trf5j7f4MZ/Qytp4nYXywQW3qI5PHYb8BeYG8JxCcsolhMsZSxmw/dMxy1bjllx3YqDzGO3iswvnmVW3Q/uY9P3ylf/M48sLzCtep3M5Jvk30Pc8027FiDvvVVGvlnH89fx/Id+E8d18mJVqAft/w/+oUn8i8f3UoKPDF+NwZf9Pb4RPciSEvhE+i6DP/QatyKHF7W/YES3m7QNid13wHZi95qHPjawfiL7aeu1/bw/bAvykcZ83qlF9RMZXrcgfq7UPbWcBhLny2WI137jVWB01xn9+Lg6gyC8kOQtivcFPL9x/vVdghevT1HALyPMOMllY1ggE7+yqigSz9zDMsnkR/rJPPi4JM2H1i3Xp/zYyT5eT5b3Rpj1NYCfSC7LYhlm1nGEWcfLDIzDy8WJ5vM4D78/A3gsiP3l1w3F1zSW/67WP2BYLGz/qCL5mOLwKWY+3pTYPwMYXNvPJuWU5eWsxpF7AnlZxt8T4OtlcBqRv8z10V80Tp9ih7ouaj3bbb7n6yg9xjroUeooW1xHjf/rdZQ9qKNi1VF2+zpqPGV11DUfwP7QiIGX0QavPGBB/Gvf8iooePfmpQCvacV4cS+TDC/S+qjFfibQVImz0PmELo83vYf8OAZ1YcNzhHE2DTV0P+Ks3X6jU17KdYFTO/4ah7ql7DZqgQSn+4rlI4Ppy+KwkFB9ugg1Cx+HPtbbR+njO03rTfzR/Yp7oknj70mKeI7mrZ/Ac5kYOGWYdZDtf/76F7NZF+CWV4TvKB5fY/LdtgSHJcAihIOi+0Ge9850NfaFk3DuARoL/WdFwX2h7Dwr6v2F6jxKcH+aIh6l/lo0kolvcj48K4lvyqVp3D+qwqfEv3ZSyKe0DcXAaagNn87CXvs5CgSn3+J7OZX49CzheAvj0Eqog/PV7niU9B/20W+MG+LRbuM5x61LNsY6ZAXf4+vCsB/vIMf6jI4kdeGcInFNcTmPGdd7EjweASZSPAb3J4nEN/GftUF8S+9PhmOsw3CE+5PXDVt4f7Co2P3JpZbs/QmxW8X7k5zk7xkKkn3UnwAAAP//RrpkZ1gnAAA=";

  // Deserialize RuntimeTypeInfo
  var bytes = BASE64.decode(serializedRuntimeTypeInfo);
  var unzippedBytes = new ZLibDecoder().convert(bytes);
  var bdata = new ByteData.view(unzippedBytes.buffer);
  var message = new bindings.Message(bdata, null, unzippedBytes.length, 0);
  _runtimeTypeInfo = mojom_types.RuntimeTypeInfo.deserialize(message);
  return _runtimeTypeInfo;
}
