// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library contacts_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class Contact extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int id = 0;
  String name = null;

  Contact() : super(kVersions.last.size);

  Contact.init(
    int this.id, 
    String this.name
  ) : super(kVersions.last.size);

  static Contact deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static Contact decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    Contact result = new Contact();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.id = decoder0.decodeInt64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.name = decoder0.decodeString(16, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "Contact";
    String fieldName;
    try {
      fieldName = "id";
      encoder0.encodeInt64(id, 8);
      fieldName = "name";
      encoder0.encodeString(name, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "Contact("
           "id: $id" ", "
           "name: $name" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["id"] = id;
    map["name"] = name;
    return map;
  }
}


class _ContactsServiceGetCountParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String filter = null;

  _ContactsServiceGetCountParams() : super(kVersions.last.size);

  _ContactsServiceGetCountParams.init(
    String this.filter
  ) : super(kVersions.last.size);

  static _ContactsServiceGetCountParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ContactsServiceGetCountParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ContactsServiceGetCountParams result = new _ContactsServiceGetCountParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.filter = decoder0.decodeString(8, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ContactsServiceGetCountParams";
    String fieldName;
    try {
      fieldName = "filter";
      encoder0.encodeString(filter, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ContactsServiceGetCountParams("
           "filter: $filter" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["filter"] = filter;
    return map;
  }
}


class ContactsServiceGetCountResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int count = 0;

  ContactsServiceGetCountResponseParams() : super(kVersions.last.size);

  ContactsServiceGetCountResponseParams.init(
    int this.count
  ) : super(kVersions.last.size);

  static ContactsServiceGetCountResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ContactsServiceGetCountResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ContactsServiceGetCountResponseParams result = new ContactsServiceGetCountResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.count = decoder0.decodeUint64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ContactsServiceGetCountResponseParams";
    String fieldName;
    try {
      fieldName = "count";
      encoder0.encodeUint64(count, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ContactsServiceGetCountResponseParams("
           "count: $count" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["count"] = count;
    return map;
  }
}


class _ContactsServiceGetParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String filter = null;
  int offset = 0;
  int limit = 0;

  _ContactsServiceGetParams() : super(kVersions.last.size);

  _ContactsServiceGetParams.init(
    String this.filter, 
    int this.offset, 
    int this.limit
  ) : super(kVersions.last.size);

  static _ContactsServiceGetParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ContactsServiceGetParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ContactsServiceGetParams result = new _ContactsServiceGetParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.filter = decoder0.decodeString(8, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.offset = decoder0.decodeUint32(16);
    }
    if (mainDataHeader.version >= 0) {
      
      result.limit = decoder0.decodeUint32(20);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ContactsServiceGetParams";
    String fieldName;
    try {
      fieldName = "filter";
      encoder0.encodeString(filter, 8, true);
      fieldName = "offset";
      encoder0.encodeUint32(offset, 16);
      fieldName = "limit";
      encoder0.encodeUint32(limit, 20);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ContactsServiceGetParams("
           "filter: $filter" ", "
           "offset: $offset" ", "
           "limit: $limit" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["filter"] = filter;
    map["offset"] = offset;
    map["limit"] = limit;
    return map;
  }
}


class ContactsServiceGetResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<Contact> contacts = null;

  ContactsServiceGetResponseParams() : super(kVersions.last.size);

  ContactsServiceGetResponseParams.init(
    List<Contact> this.contacts
  ) : super(kVersions.last.size);

  static ContactsServiceGetResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ContactsServiceGetResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ContactsServiceGetResponseParams result = new ContactsServiceGetResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.contacts = new List<Contact>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.contacts[i1] = Contact.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ContactsServiceGetResponseParams";
    String fieldName;
    try {
      fieldName = "contacts";
      if (contacts == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(contacts.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < contacts.length; ++i0) {
          encoder1.encodeStruct(contacts[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ContactsServiceGetResponseParams("
           "contacts: $contacts" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["contacts"] = contacts;
    return map;
  }
}


class _ContactsServiceGetEmailsParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int id = 0;

  _ContactsServiceGetEmailsParams() : super(kVersions.last.size);

  _ContactsServiceGetEmailsParams.init(
    int this.id
  ) : super(kVersions.last.size);

  static _ContactsServiceGetEmailsParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ContactsServiceGetEmailsParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ContactsServiceGetEmailsParams result = new _ContactsServiceGetEmailsParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.id = decoder0.decodeInt64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ContactsServiceGetEmailsParams";
    String fieldName;
    try {
      fieldName = "id";
      encoder0.encodeInt64(id, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ContactsServiceGetEmailsParams("
           "id: $id" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["id"] = id;
    return map;
  }
}


class ContactsServiceGetEmailsResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<String> emails = null;

  ContactsServiceGetEmailsResponseParams() : super(kVersions.last.size);

  ContactsServiceGetEmailsResponseParams.init(
    List<String> this.emails
  ) : super(kVersions.last.size);

  static ContactsServiceGetEmailsResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ContactsServiceGetEmailsResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ContactsServiceGetEmailsResponseParams result = new ContactsServiceGetEmailsResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.emails = new List<String>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.emails[i1] = decoder1.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ContactsServiceGetEmailsResponseParams";
    String fieldName;
    try {
      fieldName = "emails";
      if (emails == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(emails.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < emails.length; ++i0) {
          encoder1.encodeString(emails[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ContactsServiceGetEmailsResponseParams("
           "emails: $emails" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["emails"] = emails;
    return map;
  }
}


class _ContactsServiceGetPhotoParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int id = 0;
  bool highResolution = false;

  _ContactsServiceGetPhotoParams() : super(kVersions.last.size);

  _ContactsServiceGetPhotoParams.init(
    int this.id, 
    bool this.highResolution
  ) : super(kVersions.last.size);

  static _ContactsServiceGetPhotoParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ContactsServiceGetPhotoParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ContactsServiceGetPhotoParams result = new _ContactsServiceGetPhotoParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.id = decoder0.decodeInt64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.highResolution = decoder0.decodeBool(16, 0);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ContactsServiceGetPhotoParams";
    String fieldName;
    try {
      fieldName = "id";
      encoder0.encodeInt64(id, 8);
      fieldName = "highResolution";
      encoder0.encodeBool(highResolution, 16, 0);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ContactsServiceGetPhotoParams("
           "id: $id" ", "
           "highResolution: $highResolution" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["id"] = id;
    map["highResolution"] = highResolution;
    return map;
  }
}


class ContactsServiceGetPhotoResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String photoUrl = null;

  ContactsServiceGetPhotoResponseParams() : super(kVersions.last.size);

  ContactsServiceGetPhotoResponseParams.init(
    String this.photoUrl
  ) : super(kVersions.last.size);

  static ContactsServiceGetPhotoResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ContactsServiceGetPhotoResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ContactsServiceGetPhotoResponseParams result = new ContactsServiceGetPhotoResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.photoUrl = decoder0.decodeString(8, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ContactsServiceGetPhotoResponseParams";
    String fieldName;
    try {
      fieldName = "photoUrl";
      encoder0.encodeString(photoUrl, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ContactsServiceGetPhotoResponseParams("
           "photoUrl: $photoUrl" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["photoUrl"] = photoUrl;
    return map;
  }
}

const int _contactsServiceMethodGetCountName = 0;
const int _contactsServiceMethodGetName = 1;
const int _contactsServiceMethodGetEmailsName = 2;
const int _contactsServiceMethodGetPhotoName = 3;

class _ContactsServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class ContactsService {
  static const String serviceName = "contacts::ContactsService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ContactsServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ContactsServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ContactsServiceProxy p = new ContactsServiceProxy.unbound();
    String name = serviceName ?? ContactsService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getCount(String filter,void callback(int count));
  void get(String filter,int offset,int limit,void callback(List<Contact> contacts));
  void getEmails(int id,void callback(List<String> emails));
  void getPhoto(int id,bool highResolution,void callback(String photoUrl));
}

abstract class ContactsServiceInterface
    implements bindings.MojoInterface<ContactsService>,
               ContactsService {
  factory ContactsServiceInterface([ContactsService impl]) =>
      new ContactsServiceStub.unbound(impl);

  factory ContactsServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [ContactsService impl]) =>
      new ContactsServiceStub.fromEndpoint(endpoint, impl);

  factory ContactsServiceInterface.fromMock(
      ContactsService mock) =>
      new ContactsServiceProxy.fromMock(mock);
}

abstract class ContactsServiceInterfaceRequest
    implements bindings.MojoInterface<ContactsService>,
               ContactsService {
  factory ContactsServiceInterfaceRequest() =>
      new ContactsServiceProxy.unbound();
}

class _ContactsServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<ContactsService> {
  ContactsService impl;

  _ContactsServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ContactsServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ContactsServiceProxyControl.unbound() : super.unbound();

  String get serviceName => ContactsService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _contactsServiceMethodGetCountName:
        var r = ContactsServiceGetCountResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.count );
        break;
      case _contactsServiceMethodGetName:
        var r = ContactsServiceGetResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.contacts );
        break;
      case _contactsServiceMethodGetEmailsName:
        var r = ContactsServiceGetEmailsResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.emails );
        break;
      case _contactsServiceMethodGetPhotoName:
        var r = ContactsServiceGetPhotoResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.photoUrl );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ContactsServiceProxyControl($superString)";
  }
}

class ContactsServiceProxy
    extends bindings.Proxy<ContactsService>
    implements ContactsService,
               ContactsServiceInterface,
               ContactsServiceInterfaceRequest {
  ContactsServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ContactsServiceProxyControl.fromEndpoint(endpoint));

  ContactsServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _ContactsServiceProxyControl.fromHandle(handle));

  ContactsServiceProxy.unbound()
      : super(new _ContactsServiceProxyControl.unbound());

  factory ContactsServiceProxy.fromMock(ContactsService mock) {
    ContactsServiceProxy newMockedProxy =
        new ContactsServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ContactsServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ContactsServiceProxy"));
    return new ContactsServiceProxy.fromEndpoint(endpoint);
  }


  void getCount(String filter,void callback(int count)) {
    if (impl != null) {
      impl.getCount(filter,callback);
      return;
    }
    var params = new _ContactsServiceGetCountParams();
    params.filter = filter;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int count) {
        z.bindCallback(() {
          callback(count);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _contactsServiceMethodGetCountName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void get(String filter,int offset,int limit,void callback(List<Contact> contacts)) {
    if (impl != null) {
      impl.get(filter,offset,limit,callback);
      return;
    }
    var params = new _ContactsServiceGetParams();
    params.filter = filter;
    params.offset = offset;
    params.limit = limit;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((List<Contact> contacts) {
        z.bindCallback(() {
          callback(contacts);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _contactsServiceMethodGetName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getEmails(int id,void callback(List<String> emails)) {
    if (impl != null) {
      impl.getEmails(id,callback);
      return;
    }
    var params = new _ContactsServiceGetEmailsParams();
    params.id = id;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((List<String> emails) {
        z.bindCallback(() {
          callback(emails);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _contactsServiceMethodGetEmailsName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getPhoto(int id,bool highResolution,void callback(String photoUrl)) {
    if (impl != null) {
      impl.getPhoto(id,highResolution,callback);
      return;
    }
    var params = new _ContactsServiceGetPhotoParams();
    params.id = id;
    params.highResolution = highResolution;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((String photoUrl) {
        z.bindCallback(() {
          callback(photoUrl);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _contactsServiceMethodGetPhotoName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _ContactsServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<ContactsService> {
  ContactsService _impl;

  _ContactsServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ContactsService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ContactsServiceStubControl.fromHandle(
      core.MojoHandle handle, [ContactsService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ContactsServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => ContactsService.serviceName;


  Function _contactsServiceGetCountResponseParamsResponder(
      int requestId) {
  return (int count) {
      var result = new ContactsServiceGetCountResponseParams();
      result.count = count;
      sendResponse(buildResponseWithId(
          result,
          _contactsServiceMethodGetCountName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _contactsServiceGetResponseParamsResponder(
      int requestId) {
  return (List<Contact> contacts) {
      var result = new ContactsServiceGetResponseParams();
      result.contacts = contacts;
      sendResponse(buildResponseWithId(
          result,
          _contactsServiceMethodGetName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _contactsServiceGetEmailsResponseParamsResponder(
      int requestId) {
  return (List<String> emails) {
      var result = new ContactsServiceGetEmailsResponseParams();
      result.emails = emails;
      sendResponse(buildResponseWithId(
          result,
          _contactsServiceMethodGetEmailsName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _contactsServiceGetPhotoResponseParamsResponder(
      int requestId) {
  return (String photoUrl) {
      var result = new ContactsServiceGetPhotoResponseParams();
      result.photoUrl = photoUrl;
      sendResponse(buildResponseWithId(
          result,
          _contactsServiceMethodGetPhotoName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _contactsServiceMethodGetCountName:
        var params = _ContactsServiceGetCountParams.deserialize(
            message.payload);
        _impl.getCount(params.filter, _contactsServiceGetCountResponseParamsResponder(message.header.requestId));
        break;
      case _contactsServiceMethodGetName:
        var params = _ContactsServiceGetParams.deserialize(
            message.payload);
        _impl.get(params.filter, params.offset, params.limit, _contactsServiceGetResponseParamsResponder(message.header.requestId));
        break;
      case _contactsServiceMethodGetEmailsName:
        var params = _ContactsServiceGetEmailsParams.deserialize(
            message.payload);
        _impl.getEmails(params.id, _contactsServiceGetEmailsResponseParamsResponder(message.header.requestId));
        break;
      case _contactsServiceMethodGetPhotoName:
        var params = _ContactsServiceGetPhotoParams.deserialize(
            message.payload);
        _impl.getPhoto(params.id, params.highResolution, _contactsServiceGetPhotoResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  ContactsService get impl => _impl;
  set impl(ContactsService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ContactsServiceStubControl($superString)";
  }

  int get version => 0;
}

class ContactsServiceStub
    extends bindings.Stub<ContactsService>
    implements ContactsService,
               ContactsServiceInterface,
               ContactsServiceInterfaceRequest {
  ContactsServiceStub.unbound([ContactsService impl])
      : super(new _ContactsServiceStubControl.unbound(impl));

  ContactsServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ContactsService impl])
      : super(new _ContactsServiceStubControl.fromEndpoint(endpoint, impl));

  ContactsServiceStub.fromHandle(
      core.MojoHandle handle, [ContactsService impl])
      : super(new _ContactsServiceStubControl.fromHandle(handle, impl));

  static ContactsServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ContactsServiceStub"));
    return new ContactsServiceStub.fromEndpoint(endpoint);
  }


  void getCount(String filter,void callback(int count)) {
    return impl.getCount(filter,callback);
  }
  void get(String filter,int offset,int limit,void callback(List<Contact> contacts)) {
    return impl.get(filter,offset,limit,callback);
  }
  void getEmails(int id,void callback(List<String> emails)) {
    return impl.getEmails(id,callback);
  }
  void getPhoto(int id,bool highResolution,void callback(String photoUrl)) {
    return impl.getPhoto(id,highResolution,callback);
  }
}



