// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library camera_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class Photo extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String uniqueId = null;
  core.MojoDataPipeConsumer content = null;

  Photo() : super(kVersions.last.size);

  Photo.init(
    String this.uniqueId, 
    core.MojoDataPipeConsumer this.content
  ) : super(kVersions.last.size);

  static Photo deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static Photo decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    Photo result = new Photo();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.uniqueId = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.content = decoder0.decodeConsumerHandle(16, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "Photo";
    String fieldName;
    try {
      fieldName = "uniqueId";
      encoder0.encodeString(uniqueId, 8, false);
      fieldName = "content";
      encoder0.encodeConsumerHandle(content, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "Photo("
           "uniqueId: $uniqueId" ", "
           "content: $content" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _CameraRollServiceUpdateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _CameraRollServiceUpdateParams() : super(kVersions.last.size);

  _CameraRollServiceUpdateParams.init(
  ) : super(kVersions.last.size);

  static _CameraRollServiceUpdateParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _CameraRollServiceUpdateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _CameraRollServiceUpdateParams result = new _CameraRollServiceUpdateParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_CameraRollServiceUpdateParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_CameraRollServiceUpdateParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _CameraRollServiceGetCountParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _CameraRollServiceGetCountParams() : super(kVersions.last.size);

  _CameraRollServiceGetCountParams.init(
  ) : super(kVersions.last.size);

  static _CameraRollServiceGetCountParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _CameraRollServiceGetCountParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _CameraRollServiceGetCountParams result = new _CameraRollServiceGetCountParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_CameraRollServiceGetCountParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_CameraRollServiceGetCountParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class CameraRollServiceGetCountResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int numPhotos = 0;

  CameraRollServiceGetCountResponseParams() : super(kVersions.last.size);

  CameraRollServiceGetCountResponseParams.init(
    int this.numPhotos
  ) : super(kVersions.last.size);

  static CameraRollServiceGetCountResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static CameraRollServiceGetCountResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    CameraRollServiceGetCountResponseParams result = new CameraRollServiceGetCountResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.numPhotos = decoder0.decodeUint32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "CameraRollServiceGetCountResponseParams";
    String fieldName;
    try {
      fieldName = "numPhotos";
      encoder0.encodeUint32(numPhotos, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "CameraRollServiceGetCountResponseParams("
           "numPhotos: $numPhotos" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["numPhotos"] = numPhotos;
    return map;
  }
}


class _CameraRollServiceGetPhotoParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int index = 0;

  _CameraRollServiceGetPhotoParams() : super(kVersions.last.size);

  _CameraRollServiceGetPhotoParams.init(
    int this.index
  ) : super(kVersions.last.size);

  static _CameraRollServiceGetPhotoParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _CameraRollServiceGetPhotoParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _CameraRollServiceGetPhotoParams result = new _CameraRollServiceGetPhotoParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.index = decoder0.decodeUint32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_CameraRollServiceGetPhotoParams";
    String fieldName;
    try {
      fieldName = "index";
      encoder0.encodeUint32(index, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_CameraRollServiceGetPhotoParams("
           "index: $index" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["index"] = index;
    return map;
  }
}


class CameraRollServiceGetPhotoResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  Photo photo = null;

  CameraRollServiceGetPhotoResponseParams() : super(kVersions.last.size);

  CameraRollServiceGetPhotoResponseParams.init(
    Photo this.photo
  ) : super(kVersions.last.size);

  static CameraRollServiceGetPhotoResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static CameraRollServiceGetPhotoResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    CameraRollServiceGetPhotoResponseParams result = new CameraRollServiceGetPhotoResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.photo = Photo.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "CameraRollServiceGetPhotoResponseParams";
    String fieldName;
    try {
      fieldName = "photo";
      encoder0.encodeStruct(photo, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "CameraRollServiceGetPhotoResponseParams("
           "photo: $photo" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _CameraServiceGetLatestFrameParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _CameraServiceGetLatestFrameParams() : super(kVersions.last.size);

  _CameraServiceGetLatestFrameParams.init(
  ) : super(kVersions.last.size);

  static _CameraServiceGetLatestFrameParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _CameraServiceGetLatestFrameParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _CameraServiceGetLatestFrameParams result = new _CameraServiceGetLatestFrameParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_CameraServiceGetLatestFrameParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_CameraServiceGetLatestFrameParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class CameraServiceGetLatestFrameResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  core.MojoDataPipeConsumer content = null;

  CameraServiceGetLatestFrameResponseParams() : super(kVersions.last.size);

  CameraServiceGetLatestFrameResponseParams.init(
    core.MojoDataPipeConsumer this.content
  ) : super(kVersions.last.size);

  static CameraServiceGetLatestFrameResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static CameraServiceGetLatestFrameResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    CameraServiceGetLatestFrameResponseParams result = new CameraServiceGetLatestFrameResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.content = decoder0.decodeConsumerHandle(8, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "CameraServiceGetLatestFrameResponseParams";
    String fieldName;
    try {
      fieldName = "content";
      encoder0.encodeConsumerHandle(content, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "CameraServiceGetLatestFrameResponseParams("
           "content: $content" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _cameraRollServiceMethodUpdateName = 0;
const int _cameraRollServiceMethodGetCountName = 1;
const int _cameraRollServiceMethodGetPhotoName = 2;

class _CameraRollServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class CameraRollService {
  static const String serviceName = "mojo::CameraRollService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _CameraRollServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static CameraRollServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    CameraRollServiceProxy p = new CameraRollServiceProxy.unbound();
    String name = serviceName ?? CameraRollService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void update();
  void getCount(void callback(int numPhotos));
  void getPhoto(int index,void callback(Photo photo));
}

abstract class CameraRollServiceInterface
    implements bindings.MojoInterface<CameraRollService>,
               CameraRollService {
  factory CameraRollServiceInterface([CameraRollService impl]) =>
      new CameraRollServiceStub.unbound(impl);

  factory CameraRollServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [CameraRollService impl]) =>
      new CameraRollServiceStub.fromEndpoint(endpoint, impl);

  factory CameraRollServiceInterface.fromMock(
      CameraRollService mock) =>
      new CameraRollServiceProxy.fromMock(mock);
}

abstract class CameraRollServiceInterfaceRequest
    implements bindings.MojoInterface<CameraRollService>,
               CameraRollService {
  factory CameraRollServiceInterfaceRequest() =>
      new CameraRollServiceProxy.unbound();
}

class _CameraRollServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<CameraRollService> {
  CameraRollService impl;

  _CameraRollServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _CameraRollServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _CameraRollServiceProxyControl.unbound() : super.unbound();

  String get serviceName => CameraRollService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _cameraRollServiceMethodGetCountName:
        var r = CameraRollServiceGetCountResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.numPhotos );
        break;
      case _cameraRollServiceMethodGetPhotoName:
        var r = CameraRollServiceGetPhotoResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.photo );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_CameraRollServiceProxyControl($superString)";
  }
}

class CameraRollServiceProxy
    extends bindings.Proxy<CameraRollService>
    implements CameraRollService,
               CameraRollServiceInterface,
               CameraRollServiceInterfaceRequest {
  CameraRollServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _CameraRollServiceProxyControl.fromEndpoint(endpoint));

  CameraRollServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _CameraRollServiceProxyControl.fromHandle(handle));

  CameraRollServiceProxy.unbound()
      : super(new _CameraRollServiceProxyControl.unbound());

  factory CameraRollServiceProxy.fromMock(CameraRollService mock) {
    CameraRollServiceProxy newMockedProxy =
        new CameraRollServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static CameraRollServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For CameraRollServiceProxy"));
    return new CameraRollServiceProxy.fromEndpoint(endpoint);
  }


  void update() {
    if (impl != null) {
      impl.update();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _CameraRollServiceUpdateParams();
    ctrl.sendMessage(params,
        _cameraRollServiceMethodUpdateName);
  }
  void getCount(void callback(int numPhotos)) {
    if (impl != null) {
      impl.getCount(callback);
      return;
    }
    var params = new _CameraRollServiceGetCountParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int numPhotos) {
        z.bindCallback(() {
          callback(numPhotos);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _cameraRollServiceMethodGetCountName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getPhoto(int index,void callback(Photo photo)) {
    if (impl != null) {
      impl.getPhoto(index,callback);
      return;
    }
    var params = new _CameraRollServiceGetPhotoParams();
    params.index = index;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((Photo photo) {
        z.bindCallback(() {
          callback(photo);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _cameraRollServiceMethodGetPhotoName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _CameraRollServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<CameraRollService> {
  CameraRollService _impl;

  _CameraRollServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [CameraRollService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _CameraRollServiceStubControl.fromHandle(
      core.MojoHandle handle, [CameraRollService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _CameraRollServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => CameraRollService.serviceName;


  Function _cameraRollServiceGetCountResponseParamsResponder(
      int requestId) {
  return (int numPhotos) {
      var result = new CameraRollServiceGetCountResponseParams();
      result.numPhotos = numPhotos;
      sendResponse(buildResponseWithId(
          result,
          _cameraRollServiceMethodGetCountName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _cameraRollServiceGetPhotoResponseParamsResponder(
      int requestId) {
  return (Photo photo) {
      var result = new CameraRollServiceGetPhotoResponseParams();
      result.photo = photo;
      sendResponse(buildResponseWithId(
          result,
          _cameraRollServiceMethodGetPhotoName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _cameraRollServiceMethodUpdateName:
        _impl.update();
        break;
      case _cameraRollServiceMethodGetCountName:
        _impl.getCount(_cameraRollServiceGetCountResponseParamsResponder(message.header.requestId));
        break;
      case _cameraRollServiceMethodGetPhotoName:
        var params = _CameraRollServiceGetPhotoParams.deserialize(
            message.payload);
        _impl.getPhoto(params.index, _cameraRollServiceGetPhotoResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  CameraRollService get impl => _impl;
  set impl(CameraRollService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_CameraRollServiceStubControl($superString)";
  }

  int get version => 0;
}

class CameraRollServiceStub
    extends bindings.Stub<CameraRollService>
    implements CameraRollService,
               CameraRollServiceInterface,
               CameraRollServiceInterfaceRequest {
  CameraRollServiceStub.unbound([CameraRollService impl])
      : super(new _CameraRollServiceStubControl.unbound(impl));

  CameraRollServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [CameraRollService impl])
      : super(new _CameraRollServiceStubControl.fromEndpoint(endpoint, impl));

  CameraRollServiceStub.fromHandle(
      core.MojoHandle handle, [CameraRollService impl])
      : super(new _CameraRollServiceStubControl.fromHandle(handle, impl));

  static CameraRollServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For CameraRollServiceStub"));
    return new CameraRollServiceStub.fromEndpoint(endpoint);
  }


  void update() {
    return impl.update();
  }
  void getCount(void callback(int numPhotos)) {
    return impl.getCount(callback);
  }
  void getPhoto(int index,void callback(Photo photo)) {
    return impl.getPhoto(index,callback);
  }
}

const int _cameraServiceMethodGetLatestFrameName = 0;

class _CameraServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class CameraService {
  static const String serviceName = "mojo::CameraService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _CameraServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static CameraServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    CameraServiceProxy p = new CameraServiceProxy.unbound();
    String name = serviceName ?? CameraService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getLatestFrame(void callback(core.MojoDataPipeConsumer content));
}

abstract class CameraServiceInterface
    implements bindings.MojoInterface<CameraService>,
               CameraService {
  factory CameraServiceInterface([CameraService impl]) =>
      new CameraServiceStub.unbound(impl);

  factory CameraServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [CameraService impl]) =>
      new CameraServiceStub.fromEndpoint(endpoint, impl);

  factory CameraServiceInterface.fromMock(
      CameraService mock) =>
      new CameraServiceProxy.fromMock(mock);
}

abstract class CameraServiceInterfaceRequest
    implements bindings.MojoInterface<CameraService>,
               CameraService {
  factory CameraServiceInterfaceRequest() =>
      new CameraServiceProxy.unbound();
}

class _CameraServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<CameraService> {
  CameraService impl;

  _CameraServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _CameraServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _CameraServiceProxyControl.unbound() : super.unbound();

  String get serviceName => CameraService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _cameraServiceMethodGetLatestFrameName:
        var r = CameraServiceGetLatestFrameResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.content );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_CameraServiceProxyControl($superString)";
  }
}

class CameraServiceProxy
    extends bindings.Proxy<CameraService>
    implements CameraService,
               CameraServiceInterface,
               CameraServiceInterfaceRequest {
  CameraServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _CameraServiceProxyControl.fromEndpoint(endpoint));

  CameraServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _CameraServiceProxyControl.fromHandle(handle));

  CameraServiceProxy.unbound()
      : super(new _CameraServiceProxyControl.unbound());

  factory CameraServiceProxy.fromMock(CameraService mock) {
    CameraServiceProxy newMockedProxy =
        new CameraServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static CameraServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For CameraServiceProxy"));
    return new CameraServiceProxy.fromEndpoint(endpoint);
  }


  void getLatestFrame(void callback(core.MojoDataPipeConsumer content)) {
    if (impl != null) {
      impl.getLatestFrame(callback);
      return;
    }
    var params = new _CameraServiceGetLatestFrameParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((core.MojoDataPipeConsumer content) {
        z.bindCallback(() {
          callback(content);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _cameraServiceMethodGetLatestFrameName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _CameraServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<CameraService> {
  CameraService _impl;

  _CameraServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [CameraService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _CameraServiceStubControl.fromHandle(
      core.MojoHandle handle, [CameraService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _CameraServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => CameraService.serviceName;


  Function _cameraServiceGetLatestFrameResponseParamsResponder(
      int requestId) {
  return (core.MojoDataPipeConsumer content) {
      var result = new CameraServiceGetLatestFrameResponseParams();
      result.content = content;
      sendResponse(buildResponseWithId(
          result,
          _cameraServiceMethodGetLatestFrameName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _cameraServiceMethodGetLatestFrameName:
        _impl.getLatestFrame(_cameraServiceGetLatestFrameResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  CameraService get impl => _impl;
  set impl(CameraService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_CameraServiceStubControl($superString)";
  }

  int get version => 0;
}

class CameraServiceStub
    extends bindings.Stub<CameraService>
    implements CameraService,
               CameraServiceInterface,
               CameraServiceInterfaceRequest {
  CameraServiceStub.unbound([CameraService impl])
      : super(new _CameraServiceStubControl.unbound(impl));

  CameraServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [CameraService impl])
      : super(new _CameraServiceStubControl.fromEndpoint(endpoint, impl));

  CameraServiceStub.fromHandle(
      core.MojoHandle handle, [CameraService impl])
      : super(new _CameraServiceStubControl.fromHandle(handle, impl));

  static CameraServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For CameraServiceStub"));
    return new CameraServiceStub.fromEndpoint(endpoint);
  }


  void getLatestFrame(void callback(core.MojoDataPipeConsumer content)) {
    return impl.getLatestFrame(callback);
  }
}



