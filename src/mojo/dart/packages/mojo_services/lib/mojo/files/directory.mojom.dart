// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library directory_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/files/file.mojom.dart' as file_mojom;
import 'package:mojo_services/mojo/files/types.mojom.dart' as types_mojom;



class _DirectoryReadParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _DirectoryReadParams() : super(kVersions.last.size);

  _DirectoryReadParams.init(
  ) : super(kVersions.last.size);

  static _DirectoryReadParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DirectoryReadParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DirectoryReadParams result = new _DirectoryReadParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DirectoryReadParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DirectoryReadParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class DirectoryReadResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  types_mojom.Error error = null;
  List<types_mojom.DirectoryEntry> directoryContents = null;

  DirectoryReadResponseParams() : super(kVersions.last.size);

  DirectoryReadResponseParams.init(
    types_mojom.Error this.error, 
    List<types_mojom.DirectoryEntry> this.directoryContents
  ) : super(kVersions.last.size);

  static DirectoryReadResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DirectoryReadResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DirectoryReadResponseParams result = new DirectoryReadResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      if (decoder1 == null) {
        result.directoryContents = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.directoryContents = new List<types_mojom.DirectoryEntry>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.directoryContents[i1] = types_mojom.DirectoryEntry.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DirectoryReadResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
      fieldName = "directoryContents";
      if (directoryContents == null) {
        encoder0.encodeNullPointer(16, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(directoryContents.length, 16, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < directoryContents.length; ++i0) {
          encoder1.encodeStruct(directoryContents[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DirectoryReadResponseParams("
           "error: $error" ", "
           "directoryContents: $directoryContents" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    map["directoryContents"] = directoryContents;
    return map;
  }
}


class _DirectoryStatParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _DirectoryStatParams() : super(kVersions.last.size);

  _DirectoryStatParams.init(
  ) : super(kVersions.last.size);

  static _DirectoryStatParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DirectoryStatParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DirectoryStatParams result = new _DirectoryStatParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DirectoryStatParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DirectoryStatParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class DirectoryStatResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  types_mojom.Error error = null;
  types_mojom.FileInformation fileInformation = null;

  DirectoryStatResponseParams() : super(kVersions.last.size);

  DirectoryStatResponseParams.init(
    types_mojom.Error this.error, 
    types_mojom.FileInformation this.fileInformation
  ) : super(kVersions.last.size);

  static DirectoryStatResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DirectoryStatResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DirectoryStatResponseParams result = new DirectoryStatResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      result.fileInformation = types_mojom.FileInformation.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DirectoryStatResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
      fieldName = "fileInformation";
      encoder0.encodeStruct(fileInformation, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DirectoryStatResponseParams("
           "error: $error" ", "
           "fileInformation: $fileInformation" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    map["fileInformation"] = fileInformation;
    return map;
  }
}


class _DirectoryTouchParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  types_mojom.TimespecOrNow atime = null;
  types_mojom.TimespecOrNow mtime = null;

  _DirectoryTouchParams() : super(kVersions.last.size);

  _DirectoryTouchParams.init(
    types_mojom.TimespecOrNow this.atime, 
    types_mojom.TimespecOrNow this.mtime
  ) : super(kVersions.last.size);

  static _DirectoryTouchParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DirectoryTouchParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DirectoryTouchParams result = new _DirectoryTouchParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.atime = types_mojom.TimespecOrNow.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      result.mtime = types_mojom.TimespecOrNow.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DirectoryTouchParams";
    String fieldName;
    try {
      fieldName = "atime";
      encoder0.encodeStruct(atime, 8, true);
      fieldName = "mtime";
      encoder0.encodeStruct(mtime, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DirectoryTouchParams("
           "atime: $atime" ", "
           "mtime: $mtime" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["atime"] = atime;
    map["mtime"] = mtime;
    return map;
  }
}


class DirectoryTouchResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  DirectoryTouchResponseParams() : super(kVersions.last.size);

  DirectoryTouchResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static DirectoryTouchResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DirectoryTouchResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DirectoryTouchResponseParams result = new DirectoryTouchResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DirectoryTouchResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DirectoryTouchResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}


class _DirectoryOpenFileParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String path = null;
  file_mojom.FileInterfaceRequest file = null;
  int openFlags = 0;

  _DirectoryOpenFileParams() : super(kVersions.last.size);

  _DirectoryOpenFileParams.init(
    String this.path, 
    file_mojom.FileInterfaceRequest this.file, 
    int this.openFlags
  ) : super(kVersions.last.size);

  static _DirectoryOpenFileParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DirectoryOpenFileParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DirectoryOpenFileParams result = new _DirectoryOpenFileParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.path = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.file = decoder0.decodeInterfaceRequest(16, true, file_mojom.FileStub.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.openFlags = decoder0.decodeUint32(20);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DirectoryOpenFileParams";
    String fieldName;
    try {
      fieldName = "path";
      encoder0.encodeString(path, 8, false);
      fieldName = "file";
      encoder0.encodeInterfaceRequest(file, 16, true);
      fieldName = "openFlags";
      encoder0.encodeUint32(openFlags, 20);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DirectoryOpenFileParams("
           "path: $path" ", "
           "file: $file" ", "
           "openFlags: $openFlags" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class DirectoryOpenFileResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  DirectoryOpenFileResponseParams() : super(kVersions.last.size);

  DirectoryOpenFileResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static DirectoryOpenFileResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DirectoryOpenFileResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DirectoryOpenFileResponseParams result = new DirectoryOpenFileResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DirectoryOpenFileResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DirectoryOpenFileResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}


class _DirectoryOpenDirectoryParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String path = null;
  DirectoryInterfaceRequest directory = null;
  int openFlags = 0;

  _DirectoryOpenDirectoryParams() : super(kVersions.last.size);

  _DirectoryOpenDirectoryParams.init(
    String this.path, 
    DirectoryInterfaceRequest this.directory, 
    int this.openFlags
  ) : super(kVersions.last.size);

  static _DirectoryOpenDirectoryParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DirectoryOpenDirectoryParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DirectoryOpenDirectoryParams result = new _DirectoryOpenDirectoryParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.path = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.directory = decoder0.decodeInterfaceRequest(16, true, DirectoryStub.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.openFlags = decoder0.decodeUint32(20);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DirectoryOpenDirectoryParams";
    String fieldName;
    try {
      fieldName = "path";
      encoder0.encodeString(path, 8, false);
      fieldName = "directory";
      encoder0.encodeInterfaceRequest(directory, 16, true);
      fieldName = "openFlags";
      encoder0.encodeUint32(openFlags, 20);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DirectoryOpenDirectoryParams("
           "path: $path" ", "
           "directory: $directory" ", "
           "openFlags: $openFlags" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class DirectoryOpenDirectoryResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  DirectoryOpenDirectoryResponseParams() : super(kVersions.last.size);

  DirectoryOpenDirectoryResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static DirectoryOpenDirectoryResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DirectoryOpenDirectoryResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DirectoryOpenDirectoryResponseParams result = new DirectoryOpenDirectoryResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DirectoryOpenDirectoryResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DirectoryOpenDirectoryResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}


class _DirectoryRenameParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String path = null;
  String newPath = null;

  _DirectoryRenameParams() : super(kVersions.last.size);

  _DirectoryRenameParams.init(
    String this.path, 
    String this.newPath
  ) : super(kVersions.last.size);

  static _DirectoryRenameParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DirectoryRenameParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DirectoryRenameParams result = new _DirectoryRenameParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.path = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.newPath = decoder0.decodeString(16, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DirectoryRenameParams";
    String fieldName;
    try {
      fieldName = "path";
      encoder0.encodeString(path, 8, false);
      fieldName = "newPath";
      encoder0.encodeString(newPath, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DirectoryRenameParams("
           "path: $path" ", "
           "newPath: $newPath" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["path"] = path;
    map["newPath"] = newPath;
    return map;
  }
}


class DirectoryRenameResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  DirectoryRenameResponseParams() : super(kVersions.last.size);

  DirectoryRenameResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static DirectoryRenameResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DirectoryRenameResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DirectoryRenameResponseParams result = new DirectoryRenameResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DirectoryRenameResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DirectoryRenameResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}


class _DirectoryDeleteParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String path = null;
  int deleteFlags = 0;

  _DirectoryDeleteParams() : super(kVersions.last.size);

  _DirectoryDeleteParams.init(
    String this.path, 
    int this.deleteFlags
  ) : super(kVersions.last.size);

  static _DirectoryDeleteParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DirectoryDeleteParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DirectoryDeleteParams result = new _DirectoryDeleteParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.path = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.deleteFlags = decoder0.decodeUint32(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DirectoryDeleteParams";
    String fieldName;
    try {
      fieldName = "path";
      encoder0.encodeString(path, 8, false);
      fieldName = "deleteFlags";
      encoder0.encodeUint32(deleteFlags, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DirectoryDeleteParams("
           "path: $path" ", "
           "deleteFlags: $deleteFlags" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["path"] = path;
    map["deleteFlags"] = deleteFlags;
    return map;
  }
}


class DirectoryDeleteResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  DirectoryDeleteResponseParams() : super(kVersions.last.size);

  DirectoryDeleteResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static DirectoryDeleteResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DirectoryDeleteResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DirectoryDeleteResponseParams result = new DirectoryDeleteResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DirectoryDeleteResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DirectoryDeleteResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}

const int _directoryMethodReadName = 0;
const int _directoryMethodStatName = 1;
const int _directoryMethodTouchName = 2;
const int _directoryMethodOpenFileName = 3;
const int _directoryMethodOpenDirectoryName = 4;
const int _directoryMethodRenameName = 5;
const int _directoryMethodDeleteName = 6;

class _DirectoryServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Directory {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _DirectoryServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static DirectoryProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    DirectoryProxy p = new DirectoryProxy.unbound();
    String name = serviceName ?? Directory.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void read(void callback(types_mojom.Error error, List<types_mojom.DirectoryEntry> directoryContents));
  void stat(void callback(types_mojom.Error error, types_mojom.FileInformation fileInformation));
  void touch(types_mojom.TimespecOrNow atime,types_mojom.TimespecOrNow mtime,void callback(types_mojom.Error error));
  void openFile(String path,file_mojom.FileInterfaceRequest file,int openFlags,void callback(types_mojom.Error error));
  void openDirectory(String path,DirectoryInterfaceRequest directory,int openFlags,void callback(types_mojom.Error error));
  void rename(String path,String newPath,void callback(types_mojom.Error error));
  void delete(String path,int deleteFlags,void callback(types_mojom.Error error));
}

abstract class DirectoryInterface
    implements bindings.MojoInterface<Directory>,
               Directory {
  factory DirectoryInterface([Directory impl]) =>
      new DirectoryStub.unbound(impl);

  factory DirectoryInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Directory impl]) =>
      new DirectoryStub.fromEndpoint(endpoint, impl);

  factory DirectoryInterface.fromMock(
      Directory mock) =>
      new DirectoryProxy.fromMock(mock);
}

abstract class DirectoryInterfaceRequest
    implements bindings.MojoInterface<Directory>,
               Directory {
  factory DirectoryInterfaceRequest() =>
      new DirectoryProxy.unbound();
}

class _DirectoryProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Directory> {
  Directory impl;

  _DirectoryProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _DirectoryProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _DirectoryProxyControl.unbound() : super.unbound();

  String get serviceName => Directory.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _directoryMethodReadName:
        var r = DirectoryReadResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error , r.directoryContents );
        break;
      case _directoryMethodStatName:
        var r = DirectoryStatResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error , r.fileInformation );
        break;
      case _directoryMethodTouchName:
        var r = DirectoryTouchResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      case _directoryMethodOpenFileName:
        var r = DirectoryOpenFileResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      case _directoryMethodOpenDirectoryName:
        var r = DirectoryOpenDirectoryResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      case _directoryMethodRenameName:
        var r = DirectoryRenameResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      case _directoryMethodDeleteName:
        var r = DirectoryDeleteResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DirectoryProxyControl($superString)";
  }
}

class DirectoryProxy
    extends bindings.Proxy<Directory>
    implements Directory,
               DirectoryInterface,
               DirectoryInterfaceRequest {
  DirectoryProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _DirectoryProxyControl.fromEndpoint(endpoint));

  DirectoryProxy.fromHandle(core.MojoHandle handle)
      : super(new _DirectoryProxyControl.fromHandle(handle));

  DirectoryProxy.unbound()
      : super(new _DirectoryProxyControl.unbound());

  factory DirectoryProxy.fromMock(Directory mock) {
    DirectoryProxy newMockedProxy =
        new DirectoryProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static DirectoryProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DirectoryProxy"));
    return new DirectoryProxy.fromEndpoint(endpoint);
  }


  void read(void callback(types_mojom.Error error, List<types_mojom.DirectoryEntry> directoryContents)) {
    if (impl != null) {
      impl.read(callback);
      return;
    }
    var params = new _DirectoryReadParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error, List<types_mojom.DirectoryEntry> directoryContents) {
        z.bindCallback(() {
          callback(error, directoryContents);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _directoryMethodReadName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void stat(void callback(types_mojom.Error error, types_mojom.FileInformation fileInformation)) {
    if (impl != null) {
      impl.stat(callback);
      return;
    }
    var params = new _DirectoryStatParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error, types_mojom.FileInformation fileInformation) {
        z.bindCallback(() {
          callback(error, fileInformation);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _directoryMethodStatName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void touch(types_mojom.TimespecOrNow atime,types_mojom.TimespecOrNow mtime,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.touch(atime,mtime,callback);
      return;
    }
    var params = new _DirectoryTouchParams();
    params.atime = atime;
    params.mtime = mtime;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _directoryMethodTouchName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void openFile(String path,file_mojom.FileInterfaceRequest file,int openFlags,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.openFile(path,file,openFlags,callback);
      return;
    }
    var params = new _DirectoryOpenFileParams();
    params.path = path;
    params.file = file;
    params.openFlags = openFlags;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _directoryMethodOpenFileName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void openDirectory(String path,DirectoryInterfaceRequest directory,int openFlags,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.openDirectory(path,directory,openFlags,callback);
      return;
    }
    var params = new _DirectoryOpenDirectoryParams();
    params.path = path;
    params.directory = directory;
    params.openFlags = openFlags;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _directoryMethodOpenDirectoryName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void rename(String path,String newPath,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.rename(path,newPath,callback);
      return;
    }
    var params = new _DirectoryRenameParams();
    params.path = path;
    params.newPath = newPath;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _directoryMethodRenameName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void delete(String path,int deleteFlags,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.delete(path,deleteFlags,callback);
      return;
    }
    var params = new _DirectoryDeleteParams();
    params.path = path;
    params.deleteFlags = deleteFlags;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _directoryMethodDeleteName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _DirectoryStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Directory> {
  Directory _impl;

  _DirectoryStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Directory impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _DirectoryStubControl.fromHandle(
      core.MojoHandle handle, [Directory impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _DirectoryStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Directory.serviceName;


  Function _directoryReadResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error, List<types_mojom.DirectoryEntry> directoryContents) {
      var result = new DirectoryReadResponseParams();
      result.error = error;
      result.directoryContents = directoryContents;
      sendResponse(buildResponseWithId(
          result,
          _directoryMethodReadName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _directoryStatResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error, types_mojom.FileInformation fileInformation) {
      var result = new DirectoryStatResponseParams();
      result.error = error;
      result.fileInformation = fileInformation;
      sendResponse(buildResponseWithId(
          result,
          _directoryMethodStatName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _directoryTouchResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new DirectoryTouchResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _directoryMethodTouchName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _directoryOpenFileResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new DirectoryOpenFileResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _directoryMethodOpenFileName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _directoryOpenDirectoryResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new DirectoryOpenDirectoryResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _directoryMethodOpenDirectoryName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _directoryRenameResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new DirectoryRenameResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _directoryMethodRenameName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _directoryDeleteResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new DirectoryDeleteResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _directoryMethodDeleteName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _directoryMethodReadName:
        _impl.read(_directoryReadResponseParamsResponder(message.header.requestId));
        break;
      case _directoryMethodStatName:
        _impl.stat(_directoryStatResponseParamsResponder(message.header.requestId));
        break;
      case _directoryMethodTouchName:
        var params = _DirectoryTouchParams.deserialize(
            message.payload);
        _impl.touch(params.atime, params.mtime, _directoryTouchResponseParamsResponder(message.header.requestId));
        break;
      case _directoryMethodOpenFileName:
        var params = _DirectoryOpenFileParams.deserialize(
            message.payload);
        _impl.openFile(params.path, params.file, params.openFlags, _directoryOpenFileResponseParamsResponder(message.header.requestId));
        break;
      case _directoryMethodOpenDirectoryName:
        var params = _DirectoryOpenDirectoryParams.deserialize(
            message.payload);
        _impl.openDirectory(params.path, params.directory, params.openFlags, _directoryOpenDirectoryResponseParamsResponder(message.header.requestId));
        break;
      case _directoryMethodRenameName:
        var params = _DirectoryRenameParams.deserialize(
            message.payload);
        _impl.rename(params.path, params.newPath, _directoryRenameResponseParamsResponder(message.header.requestId));
        break;
      case _directoryMethodDeleteName:
        var params = _DirectoryDeleteParams.deserialize(
            message.payload);
        _impl.delete(params.path, params.deleteFlags, _directoryDeleteResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Directory get impl => _impl;
  set impl(Directory d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DirectoryStubControl($superString)";
  }

  int get version => 0;
}

class DirectoryStub
    extends bindings.Stub<Directory>
    implements Directory,
               DirectoryInterface,
               DirectoryInterfaceRequest {
  DirectoryStub.unbound([Directory impl])
      : super(new _DirectoryStubControl.unbound(impl));

  DirectoryStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Directory impl])
      : super(new _DirectoryStubControl.fromEndpoint(endpoint, impl));

  DirectoryStub.fromHandle(
      core.MojoHandle handle, [Directory impl])
      : super(new _DirectoryStubControl.fromHandle(handle, impl));

  static DirectoryStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DirectoryStub"));
    return new DirectoryStub.fromEndpoint(endpoint);
  }


  void read(void callback(types_mojom.Error error, List<types_mojom.DirectoryEntry> directoryContents)) {
    return impl.read(callback);
  }
  void stat(void callback(types_mojom.Error error, types_mojom.FileInformation fileInformation)) {
    return impl.stat(callback);
  }
  void touch(types_mojom.TimespecOrNow atime,types_mojom.TimespecOrNow mtime,void callback(types_mojom.Error error)) {
    return impl.touch(atime,mtime,callback);
  }
  void openFile(String path,file_mojom.FileInterfaceRequest file,int openFlags,void callback(types_mojom.Error error)) {
    return impl.openFile(path,file,openFlags,callback);
  }
  void openDirectory(String path,DirectoryInterfaceRequest directory,int openFlags,void callback(types_mojom.Error error)) {
    return impl.openDirectory(path,directory,openFlags,callback);
  }
  void rename(String path,String newPath,void callback(types_mojom.Error error)) {
    return impl.rename(path,newPath,callback);
  }
  void delete(String path,int deleteFlags,void callback(types_mojom.Error error)) {
    return impl.delete(path,deleteFlags,callback);
  }
}



