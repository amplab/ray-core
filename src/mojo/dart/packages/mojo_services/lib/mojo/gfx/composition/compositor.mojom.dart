// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library compositor_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/gfx/composition/renderers.mojom.dart' as renderers_mojom;
import 'package:mojo_services/mojo/gfx/composition/scene_token.mojom.dart' as scene_token_mojom;
import 'package:mojo_services/mojo/gfx/composition/scenes.mojom.dart' as scenes_mojom;
import 'package:mojom/mojo/context_provider.mojom.dart' as context_provider_mojom;
const int kLabelMaxLength = 32;



class _CompositorCreateSceneParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  scenes_mojom.SceneInterfaceRequest scene = null;
  String label = null;

  _CompositorCreateSceneParams() : super(kVersions.last.size);

  _CompositorCreateSceneParams.init(
    scenes_mojom.SceneInterfaceRequest this.scene, 
    String this.label
  ) : super(kVersions.last.size);

  static _CompositorCreateSceneParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _CompositorCreateSceneParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _CompositorCreateSceneParams result = new _CompositorCreateSceneParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.scene = decoder0.decodeInterfaceRequest(8, false, scenes_mojom.SceneStub.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.label = decoder0.decodeString(16, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_CompositorCreateSceneParams";
    String fieldName;
    try {
      fieldName = "scene";
      encoder0.encodeInterfaceRequest(scene, 8, false);
      fieldName = "label";
      encoder0.encodeString(label, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_CompositorCreateSceneParams("
           "scene: $scene" ", "
           "label: $label" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class CompositorCreateSceneResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  scene_token_mojom.SceneToken sceneToken = null;

  CompositorCreateSceneResponseParams() : super(kVersions.last.size);

  CompositorCreateSceneResponseParams.init(
    scene_token_mojom.SceneToken this.sceneToken
  ) : super(kVersions.last.size);

  static CompositorCreateSceneResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static CompositorCreateSceneResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    CompositorCreateSceneResponseParams result = new CompositorCreateSceneResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.sceneToken = scene_token_mojom.SceneToken.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "CompositorCreateSceneResponseParams";
    String fieldName;
    try {
      fieldName = "sceneToken";
      encoder0.encodeStruct(sceneToken, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "CompositorCreateSceneResponseParams("
           "sceneToken: $sceneToken" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["sceneToken"] = sceneToken;
    return map;
  }
}


class _CompositorCreateRendererParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  context_provider_mojom.ContextProviderInterface contextProvider = null;
  renderers_mojom.RendererInterfaceRequest renderer = null;
  String label = null;

  _CompositorCreateRendererParams() : super(kVersions.last.size);

  _CompositorCreateRendererParams.init(
    context_provider_mojom.ContextProviderInterface this.contextProvider, 
    renderers_mojom.RendererInterfaceRequest this.renderer, 
    String this.label
  ) : super(kVersions.last.size);

  static _CompositorCreateRendererParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _CompositorCreateRendererParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _CompositorCreateRendererParams result = new _CompositorCreateRendererParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.contextProvider = decoder0.decodeServiceInterface(8, false, context_provider_mojom.ContextProviderProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.renderer = decoder0.decodeInterfaceRequest(16, false, renderers_mojom.RendererStub.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.label = decoder0.decodeString(24, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_CompositorCreateRendererParams";
    String fieldName;
    try {
      fieldName = "contextProvider";
      encoder0.encodeInterface(contextProvider, 8, false);
      fieldName = "renderer";
      encoder0.encodeInterfaceRequest(renderer, 16, false);
      fieldName = "label";
      encoder0.encodeString(label, 24, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_CompositorCreateRendererParams("
           "contextProvider: $contextProvider" ", "
           "renderer: $renderer" ", "
           "label: $label" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _compositorMethodCreateSceneName = 0;
const int _compositorMethodCreateRendererName = 1;

class _CompositorServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Compositor {
  static const String serviceName = "mojo::gfx::composition::Compositor";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _CompositorServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static CompositorProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    CompositorProxy p = new CompositorProxy.unbound();
    String name = serviceName ?? Compositor.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void createScene(scenes_mojom.SceneInterfaceRequest scene,String label,void callback(scene_token_mojom.SceneToken sceneToken));
  void createRenderer(context_provider_mojom.ContextProviderInterface contextProvider, renderers_mojom.RendererInterfaceRequest renderer, String label);
}

abstract class CompositorInterface
    implements bindings.MojoInterface<Compositor>,
               Compositor {
  factory CompositorInterface([Compositor impl]) =>
      new CompositorStub.unbound(impl);

  factory CompositorInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Compositor impl]) =>
      new CompositorStub.fromEndpoint(endpoint, impl);

  factory CompositorInterface.fromMock(
      Compositor mock) =>
      new CompositorProxy.fromMock(mock);
}

abstract class CompositorInterfaceRequest
    implements bindings.MojoInterface<Compositor>,
               Compositor {
  factory CompositorInterfaceRequest() =>
      new CompositorProxy.unbound();
}

class _CompositorProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Compositor> {
  Compositor impl;

  _CompositorProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _CompositorProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _CompositorProxyControl.unbound() : super.unbound();

  String get serviceName => Compositor.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _compositorMethodCreateSceneName:
        var r = CompositorCreateSceneResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.sceneToken );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_CompositorProxyControl($superString)";
  }
}

class CompositorProxy
    extends bindings.Proxy<Compositor>
    implements Compositor,
               CompositorInterface,
               CompositorInterfaceRequest {
  CompositorProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _CompositorProxyControl.fromEndpoint(endpoint));

  CompositorProxy.fromHandle(core.MojoHandle handle)
      : super(new _CompositorProxyControl.fromHandle(handle));

  CompositorProxy.unbound()
      : super(new _CompositorProxyControl.unbound());

  factory CompositorProxy.fromMock(Compositor mock) {
    CompositorProxy newMockedProxy =
        new CompositorProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static CompositorProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For CompositorProxy"));
    return new CompositorProxy.fromEndpoint(endpoint);
  }


  void createScene(scenes_mojom.SceneInterfaceRequest scene,String label,void callback(scene_token_mojom.SceneToken sceneToken)) {
    if (impl != null) {
      impl.createScene(scene,label,callback);
      return;
    }
    var params = new _CompositorCreateSceneParams();
    params.scene = scene;
    params.label = label;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((scene_token_mojom.SceneToken sceneToken) {
        z.bindCallback(() {
          callback(sceneToken);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _compositorMethodCreateSceneName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void createRenderer(context_provider_mojom.ContextProviderInterface contextProvider, renderers_mojom.RendererInterfaceRequest renderer, String label) {
    if (impl != null) {
      impl.createRenderer(contextProvider, renderer, label);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _CompositorCreateRendererParams();
    params.contextProvider = contextProvider;
    params.renderer = renderer;
    params.label = label;
    ctrl.sendMessage(params,
        _compositorMethodCreateRendererName);
  }
}

class _CompositorStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Compositor> {
  Compositor _impl;

  _CompositorStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Compositor impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _CompositorStubControl.fromHandle(
      core.MojoHandle handle, [Compositor impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _CompositorStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Compositor.serviceName;


  Function _compositorCreateSceneResponseParamsResponder(
      int requestId) {
  return (scene_token_mojom.SceneToken sceneToken) {
      var result = new CompositorCreateSceneResponseParams();
      result.sceneToken = sceneToken;
      sendResponse(buildResponseWithId(
          result,
          _compositorMethodCreateSceneName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _compositorMethodCreateSceneName:
        var params = _CompositorCreateSceneParams.deserialize(
            message.payload);
        _impl.createScene(params.scene, params.label, _compositorCreateSceneResponseParamsResponder(message.header.requestId));
        break;
      case _compositorMethodCreateRendererName:
        var params = _CompositorCreateRendererParams.deserialize(
            message.payload);
        _impl.createRenderer(params.contextProvider, params.renderer, params.label);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Compositor get impl => _impl;
  set impl(Compositor d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_CompositorStubControl($superString)";
  }

  int get version => 0;
}

class CompositorStub
    extends bindings.Stub<Compositor>
    implements Compositor,
               CompositorInterface,
               CompositorInterfaceRequest {
  CompositorStub.unbound([Compositor impl])
      : super(new _CompositorStubControl.unbound(impl));

  CompositorStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Compositor impl])
      : super(new _CompositorStubControl.fromEndpoint(endpoint, impl));

  CompositorStub.fromHandle(
      core.MojoHandle handle, [Compositor impl])
      : super(new _CompositorStubControl.fromHandle(handle, impl));

  static CompositorStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For CompositorStub"));
    return new CompositorStub.fromEndpoint(endpoint);
  }


  void createScene(scenes_mojom.SceneInterfaceRequest scene,String label,void callback(scene_token_mojom.SceneToken sceneToken)) {
    return impl.createScene(scene,label,callback);
  }
  void createRenderer(context_provider_mojom.ContextProviderInterface contextProvider, renderers_mojom.RendererInterfaceRequest renderer, String label) {
    return impl.createRenderer(contextProvider, renderer, label);
  }
}



