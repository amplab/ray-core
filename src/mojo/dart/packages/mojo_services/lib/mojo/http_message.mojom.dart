// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library http_message_mojom;
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;

import 'package:mojo/mojo/http_header.mojom.dart' as http_header_mojom;



class HttpRequest extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  String method = "GET";
  String url = null;
  List<http_header_mojom.HttpHeader> headers = null;
  core.MojoDataPipeConsumer body = null;

  HttpRequest() : super(kVersions.last.size);

  HttpRequest.init(
    String this.method, 
    String this.url, 
    List<http_header_mojom.HttpHeader> this.headers, 
    core.MojoDataPipeConsumer this.body
  ) : super(kVersions.last.size);

  static HttpRequest deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static HttpRequest decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    HttpRequest result = new HttpRequest();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.method = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.url = decoder0.decodeString(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, true);
      if (decoder1 == null) {
        result.headers = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.headers = new List<http_header_mojom.HttpHeader>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.headers[i1] = http_header_mojom.HttpHeader.decode(decoder2);
        }
      }
    }
    if (mainDataHeader.version >= 0) {
      
      result.body = decoder0.decodeConsumerHandle(32, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "HttpRequest";
    String fieldName;
    try {
      fieldName = "method";
      encoder0.encodeString(method, 8, false);
      fieldName = "url";
      encoder0.encodeString(url, 16, false);
      fieldName = "headers";
      if (headers == null) {
        encoder0.encodeNullPointer(24, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(headers.length, 24, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < headers.length; ++i0) {
          encoder1.encodeStruct(headers[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
      fieldName = "body";
      encoder0.encodeConsumerHandle(body, 32, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "HttpRequest("
           "method: $method" ", "
           "url: $url" ", "
           "headers: $headers" ", "
           "body: $body" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class HttpResponse extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int statusCode = 200;
  core.MojoDataPipeConsumer body = null;
  List<http_header_mojom.HttpHeader> headers = null;

  HttpResponse() : super(kVersions.last.size);

  HttpResponse.init(
    int this.statusCode, 
    core.MojoDataPipeConsumer this.body, 
    List<http_header_mojom.HttpHeader> this.headers
  ) : super(kVersions.last.size);

  static HttpResponse deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static HttpResponse decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    HttpResponse result = new HttpResponse();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.statusCode = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.body = decoder0.decodeConsumerHandle(12, true);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      if (decoder1 == null) {
        result.headers = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.headers = new List<http_header_mojom.HttpHeader>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.headers[i1] = http_header_mojom.HttpHeader.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "HttpResponse";
    String fieldName;
    try {
      fieldName = "statusCode";
      encoder0.encodeUint32(statusCode, 8);
      fieldName = "body";
      encoder0.encodeConsumerHandle(body, 12, true);
      fieldName = "headers";
      if (headers == null) {
        encoder0.encodeNullPointer(16, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(headers.length, 16, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < headers.length; ++i0) {
          encoder1.encodeStruct(headers[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "HttpResponse("
           "statusCode: $statusCode" ", "
           "body: $body" ", "
           "headers: $headers" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}



