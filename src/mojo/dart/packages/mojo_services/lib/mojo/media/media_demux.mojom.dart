// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_demux_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/media_metadata.mojom.dart' as media_metadata_mojom;
import 'package:mojo_services/mojo/media/media_transport.mojom.dart' as media_transport_mojom;
import 'package:mojo_services/mojo/media/media_types.mojom.dart' as media_types_mojom;



class _MediaDemuxDescribeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaDemuxDescribeParams() : super(kVersions.last.size);

  _MediaDemuxDescribeParams.init(
  ) : super(kVersions.last.size);

  static _MediaDemuxDescribeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaDemuxDescribeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaDemuxDescribeParams result = new _MediaDemuxDescribeParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaDemuxDescribeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaDemuxDescribeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaDemuxDescribeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<media_types_mojom.MediaType> streamTypes = null;

  MediaDemuxDescribeResponseParams() : super(kVersions.last.size);

  MediaDemuxDescribeResponseParams.init(
    List<media_types_mojom.MediaType> this.streamTypes
  ) : super(kVersions.last.size);

  static MediaDemuxDescribeResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaDemuxDescribeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaDemuxDescribeResponseParams result = new MediaDemuxDescribeResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.streamTypes = new List<media_types_mojom.MediaType>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.streamTypes[i1] = media_types_mojom.MediaType.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaDemuxDescribeResponseParams";
    String fieldName;
    try {
      fieldName = "streamTypes";
      if (streamTypes == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(streamTypes.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < streamTypes.length; ++i0) {
          encoder1.encodeStruct(streamTypes[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaDemuxDescribeResponseParams("
           "streamTypes: $streamTypes" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["streamTypes"] = streamTypes;
    return map;
  }
}


class _MediaDemuxGetProducerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int streamIndex = 0;
  media_transport_mojom.MediaProducerInterfaceRequest producer = null;

  _MediaDemuxGetProducerParams() : super(kVersions.last.size);

  _MediaDemuxGetProducerParams.init(
    int this.streamIndex, 
    media_transport_mojom.MediaProducerInterfaceRequest this.producer
  ) : super(kVersions.last.size);

  static _MediaDemuxGetProducerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaDemuxGetProducerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaDemuxGetProducerParams result = new _MediaDemuxGetProducerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.streamIndex = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.producer = decoder0.decodeInterfaceRequest(12, false, media_transport_mojom.MediaProducerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaDemuxGetProducerParams";
    String fieldName;
    try {
      fieldName = "streamIndex";
      encoder0.encodeUint32(streamIndex, 8);
      fieldName = "producer";
      encoder0.encodeInterfaceRequest(producer, 12, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaDemuxGetProducerParams("
           "streamIndex: $streamIndex" ", "
           "producer: $producer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaDemuxGetMetadataParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int versionLastSeen = 0;

  _MediaDemuxGetMetadataParams() : super(kVersions.last.size);

  _MediaDemuxGetMetadataParams.init(
    int this.versionLastSeen
  ) : super(kVersions.last.size);

  static _MediaDemuxGetMetadataParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaDemuxGetMetadataParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaDemuxGetMetadataParams result = new _MediaDemuxGetMetadataParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.versionLastSeen = decoder0.decodeUint64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaDemuxGetMetadataParams";
    String fieldName;
    try {
      fieldName = "versionLastSeen";
      encoder0.encodeUint64(versionLastSeen, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaDemuxGetMetadataParams("
           "versionLastSeen: $versionLastSeen" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["versionLastSeen"] = versionLastSeen;
    return map;
  }
}


class MediaDemuxGetMetadataResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int version = 0;
  media_metadata_mojom.MediaMetadata metadata = null;

  MediaDemuxGetMetadataResponseParams() : super(kVersions.last.size);

  MediaDemuxGetMetadataResponseParams.init(
    int this.version, 
    media_metadata_mojom.MediaMetadata this.metadata
  ) : super(kVersions.last.size);

  static MediaDemuxGetMetadataResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaDemuxGetMetadataResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaDemuxGetMetadataResponseParams result = new MediaDemuxGetMetadataResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.version = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      result.metadata = media_metadata_mojom.MediaMetadata.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaDemuxGetMetadataResponseParams";
    String fieldName;
    try {
      fieldName = "version";
      encoder0.encodeUint64(version, 8);
      fieldName = "metadata";
      encoder0.encodeStruct(metadata, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaDemuxGetMetadataResponseParams("
           "version: $version" ", "
           "metadata: $metadata" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["version"] = version;
    map["metadata"] = metadata;
    return map;
  }
}


class _MediaDemuxPrimeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaDemuxPrimeParams() : super(kVersions.last.size);

  _MediaDemuxPrimeParams.init(
  ) : super(kVersions.last.size);

  static _MediaDemuxPrimeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaDemuxPrimeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaDemuxPrimeParams result = new _MediaDemuxPrimeParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaDemuxPrimeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaDemuxPrimeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaDemuxPrimeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaDemuxPrimeResponseParams() : super(kVersions.last.size);

  MediaDemuxPrimeResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaDemuxPrimeResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaDemuxPrimeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaDemuxPrimeResponseParams result = new MediaDemuxPrimeResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaDemuxPrimeResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaDemuxPrimeResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaDemuxFlushParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaDemuxFlushParams() : super(kVersions.last.size);

  _MediaDemuxFlushParams.init(
  ) : super(kVersions.last.size);

  static _MediaDemuxFlushParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaDemuxFlushParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaDemuxFlushParams result = new _MediaDemuxFlushParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaDemuxFlushParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaDemuxFlushParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaDemuxFlushResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaDemuxFlushResponseParams() : super(kVersions.last.size);

  MediaDemuxFlushResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaDemuxFlushResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaDemuxFlushResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaDemuxFlushResponseParams result = new MediaDemuxFlushResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaDemuxFlushResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaDemuxFlushResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaDemuxSeekParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int position = 0;

  _MediaDemuxSeekParams() : super(kVersions.last.size);

  _MediaDemuxSeekParams.init(
    int this.position
  ) : super(kVersions.last.size);

  static _MediaDemuxSeekParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaDemuxSeekParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaDemuxSeekParams result = new _MediaDemuxSeekParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.position = decoder0.decodeInt64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaDemuxSeekParams";
    String fieldName;
    try {
      fieldName = "position";
      encoder0.encodeInt64(position, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaDemuxSeekParams("
           "position: $position" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["position"] = position;
    return map;
  }
}


class MediaDemuxSeekResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaDemuxSeekResponseParams() : super(kVersions.last.size);

  MediaDemuxSeekResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaDemuxSeekResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaDemuxSeekResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaDemuxSeekResponseParams result = new MediaDemuxSeekResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaDemuxSeekResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaDemuxSeekResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _mediaDemuxMethodDescribeName = 0;
const int _mediaDemuxMethodGetProducerName = 1;
const int _mediaDemuxMethodGetMetadataName = 2;
const int _mediaDemuxMethodPrimeName = 3;
const int _mediaDemuxMethodFlushName = 4;
const int _mediaDemuxMethodSeekName = 5;

class _MediaDemuxServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaDemux {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaDemuxServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaDemuxProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaDemuxProxy p = new MediaDemuxProxy.unbound();
    String name = serviceName ?? MediaDemux.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void describe(void callback(List<media_types_mojom.MediaType> streamTypes));
  void getProducer(int streamIndex, media_transport_mojom.MediaProducerInterfaceRequest producer);
  void getMetadata(int versionLastSeen,void callback(int version, media_metadata_mojom.MediaMetadata metadata));
  void prime(void callback());
  void flush(void callback());
  void seek(int position,void callback());
  static const int kInitialMetadata = 0;
}

abstract class MediaDemuxInterface
    implements bindings.MojoInterface<MediaDemux>,
               MediaDemux {
  factory MediaDemuxInterface([MediaDemux impl]) =>
      new MediaDemuxStub.unbound(impl);

  factory MediaDemuxInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaDemux impl]) =>
      new MediaDemuxStub.fromEndpoint(endpoint, impl);

  factory MediaDemuxInterface.fromMock(
      MediaDemux mock) =>
      new MediaDemuxProxy.fromMock(mock);
}

abstract class MediaDemuxInterfaceRequest
    implements bindings.MojoInterface<MediaDemux>,
               MediaDemux {
  factory MediaDemuxInterfaceRequest() =>
      new MediaDemuxProxy.unbound();
}

class _MediaDemuxProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaDemux> {
  MediaDemux impl;

  _MediaDemuxProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaDemuxProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaDemuxProxyControl.unbound() : super.unbound();

  String get serviceName => MediaDemux.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaDemuxMethodDescribeName:
        var r = MediaDemuxDescribeResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.streamTypes );
        break;
      case _mediaDemuxMethodGetMetadataName:
        var r = MediaDemuxGetMetadataResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.version , r.metadata );
        break;
      case _mediaDemuxMethodPrimeName:
        var r = MediaDemuxPrimeResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      case _mediaDemuxMethodFlushName:
        var r = MediaDemuxFlushResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      case _mediaDemuxMethodSeekName:
        var r = MediaDemuxSeekResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaDemuxProxyControl($superString)";
  }
}

class MediaDemuxProxy
    extends bindings.Proxy<MediaDemux>
    implements MediaDemux,
               MediaDemuxInterface,
               MediaDemuxInterfaceRequest {
  MediaDemuxProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaDemuxProxyControl.fromEndpoint(endpoint));

  MediaDemuxProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaDemuxProxyControl.fromHandle(handle));

  MediaDemuxProxy.unbound()
      : super(new _MediaDemuxProxyControl.unbound());

  factory MediaDemuxProxy.fromMock(MediaDemux mock) {
    MediaDemuxProxy newMockedProxy =
        new MediaDemuxProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaDemuxProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaDemuxProxy"));
    return new MediaDemuxProxy.fromEndpoint(endpoint);
  }


  void describe(void callback(List<media_types_mojom.MediaType> streamTypes)) {
    if (impl != null) {
      impl.describe(callback);
      return;
    }
    var params = new _MediaDemuxDescribeParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((List<media_types_mojom.MediaType> streamTypes) {
        z.bindCallback(() {
          callback(streamTypes);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaDemuxMethodDescribeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getProducer(int streamIndex, media_transport_mojom.MediaProducerInterfaceRequest producer) {
    if (impl != null) {
      impl.getProducer(streamIndex, producer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaDemuxGetProducerParams();
    params.streamIndex = streamIndex;
    params.producer = producer;
    ctrl.sendMessage(params,
        _mediaDemuxMethodGetProducerName);
  }
  void getMetadata(int versionLastSeen,void callback(int version, media_metadata_mojom.MediaMetadata metadata)) {
    if (impl != null) {
      impl.getMetadata(versionLastSeen,callback);
      return;
    }
    var params = new _MediaDemuxGetMetadataParams();
    params.versionLastSeen = versionLastSeen;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int version, media_metadata_mojom.MediaMetadata metadata) {
        z.bindCallback(() {
          callback(version, metadata);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaDemuxMethodGetMetadataName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void prime(void callback()) {
    if (impl != null) {
      impl.prime(callback);
      return;
    }
    var params = new _MediaDemuxPrimeParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaDemuxMethodPrimeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void flush(void callback()) {
    if (impl != null) {
      impl.flush(callback);
      return;
    }
    var params = new _MediaDemuxFlushParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaDemuxMethodFlushName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void seek(int position,void callback()) {
    if (impl != null) {
      impl.seek(position,callback);
      return;
    }
    var params = new _MediaDemuxSeekParams();
    params.position = position;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaDemuxMethodSeekName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _MediaDemuxStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaDemux> {
  MediaDemux _impl;

  _MediaDemuxStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaDemux impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaDemuxStubControl.fromHandle(
      core.MojoHandle handle, [MediaDemux impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaDemuxStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaDemux.serviceName;


  Function _mediaDemuxDescribeResponseParamsResponder(
      int requestId) {
  return (List<media_types_mojom.MediaType> streamTypes) {
      var result = new MediaDemuxDescribeResponseParams();
      result.streamTypes = streamTypes;
      sendResponse(buildResponseWithId(
          result,
          _mediaDemuxMethodDescribeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaDemuxGetMetadataResponseParamsResponder(
      int requestId) {
  return (int version, media_metadata_mojom.MediaMetadata metadata) {
      var result = new MediaDemuxGetMetadataResponseParams();
      result.version = version;
      result.metadata = metadata;
      sendResponse(buildResponseWithId(
          result,
          _mediaDemuxMethodGetMetadataName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaDemuxPrimeResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaDemuxPrimeResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaDemuxMethodPrimeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaDemuxFlushResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaDemuxFlushResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaDemuxMethodFlushName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaDemuxSeekResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaDemuxSeekResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaDemuxMethodSeekName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaDemuxMethodDescribeName:
        _impl.describe(_mediaDemuxDescribeResponseParamsResponder(message.header.requestId));
        break;
      case _mediaDemuxMethodGetProducerName:
        var params = _MediaDemuxGetProducerParams.deserialize(
            message.payload);
        _impl.getProducer(params.streamIndex, params.producer);
        break;
      case _mediaDemuxMethodGetMetadataName:
        var params = _MediaDemuxGetMetadataParams.deserialize(
            message.payload);
        _impl.getMetadata(params.versionLastSeen, _mediaDemuxGetMetadataResponseParamsResponder(message.header.requestId));
        break;
      case _mediaDemuxMethodPrimeName:
        _impl.prime(_mediaDemuxPrimeResponseParamsResponder(message.header.requestId));
        break;
      case _mediaDemuxMethodFlushName:
        _impl.flush(_mediaDemuxFlushResponseParamsResponder(message.header.requestId));
        break;
      case _mediaDemuxMethodSeekName:
        var params = _MediaDemuxSeekParams.deserialize(
            message.payload);
        _impl.seek(params.position, _mediaDemuxSeekResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaDemux get impl => _impl;
  set impl(MediaDemux d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaDemuxStubControl($superString)";
  }

  int get version => 0;
}

class MediaDemuxStub
    extends bindings.Stub<MediaDemux>
    implements MediaDemux,
               MediaDemuxInterface,
               MediaDemuxInterfaceRequest {
  MediaDemuxStub.unbound([MediaDemux impl])
      : super(new _MediaDemuxStubControl.unbound(impl));

  MediaDemuxStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaDemux impl])
      : super(new _MediaDemuxStubControl.fromEndpoint(endpoint, impl));

  MediaDemuxStub.fromHandle(
      core.MojoHandle handle, [MediaDemux impl])
      : super(new _MediaDemuxStubControl.fromHandle(handle, impl));

  static MediaDemuxStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaDemuxStub"));
    return new MediaDemuxStub.fromEndpoint(endpoint);
  }


  void describe(void callback(List<media_types_mojom.MediaType> streamTypes)) {
    return impl.describe(callback);
  }
  void getProducer(int streamIndex, media_transport_mojom.MediaProducerInterfaceRequest producer) {
    return impl.getProducer(streamIndex, producer);
  }
  void getMetadata(int versionLastSeen,void callback(int version, media_metadata_mojom.MediaMetadata metadata)) {
    return impl.getMetadata(versionLastSeen,callback);
  }
  void prime(void callback()) {
    return impl.prime(callback);
  }
  void flush(void callback()) {
    return impl.flush(callback);
  }
  void seek(int position,void callback()) {
    return impl.seek(position,callback);
  }
}



