// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_renderer_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/media/media_transport.mojom.dart' as media_transport_mojom;
import 'package:mojo_services/mojo/media/media_types.mojom.dart' as media_types_mojom;
import 'package:mojo_services/mojo/media/timeline_controller.mojom.dart' as timeline_controller_mojom;



class _MediaRendererGetSupportedMediaTypesParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaRendererGetSupportedMediaTypesParams() : super(kVersions.last.size);

  _MediaRendererGetSupportedMediaTypesParams.init(
  ) : super(kVersions.last.size);

  static _MediaRendererGetSupportedMediaTypesParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaRendererGetSupportedMediaTypesParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaRendererGetSupportedMediaTypesParams result = new _MediaRendererGetSupportedMediaTypesParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaRendererGetSupportedMediaTypesParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaRendererGetSupportedMediaTypesParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaRendererGetSupportedMediaTypesResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<media_types_mojom.MediaTypeSet> supportedMediaTypes = null;

  MediaRendererGetSupportedMediaTypesResponseParams() : super(kVersions.last.size);

  MediaRendererGetSupportedMediaTypesResponseParams.init(
    List<media_types_mojom.MediaTypeSet> this.supportedMediaTypes
  ) : super(kVersions.last.size);

  static MediaRendererGetSupportedMediaTypesResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaRendererGetSupportedMediaTypesResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaRendererGetSupportedMediaTypesResponseParams result = new MediaRendererGetSupportedMediaTypesResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.supportedMediaTypes = new List<media_types_mojom.MediaTypeSet>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.supportedMediaTypes[i1] = media_types_mojom.MediaTypeSet.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaRendererGetSupportedMediaTypesResponseParams";
    String fieldName;
    try {
      fieldName = "supportedMediaTypes";
      if (supportedMediaTypes == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(supportedMediaTypes.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < supportedMediaTypes.length; ++i0) {
          encoder1.encodeStruct(supportedMediaTypes[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaRendererGetSupportedMediaTypesResponseParams("
           "supportedMediaTypes: $supportedMediaTypes" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["supportedMediaTypes"] = supportedMediaTypes;
    return map;
  }
}


class _MediaRendererSetMediaTypeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  media_types_mojom.MediaType mediaType = null;

  _MediaRendererSetMediaTypeParams() : super(kVersions.last.size);

  _MediaRendererSetMediaTypeParams.init(
    media_types_mojom.MediaType this.mediaType
  ) : super(kVersions.last.size);

  static _MediaRendererSetMediaTypeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaRendererSetMediaTypeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaRendererSetMediaTypeParams result = new _MediaRendererSetMediaTypeParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.mediaType = media_types_mojom.MediaType.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaRendererSetMediaTypeParams";
    String fieldName;
    try {
      fieldName = "mediaType";
      encoder0.encodeStruct(mediaType, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaRendererSetMediaTypeParams("
           "mediaType: $mediaType" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["mediaType"] = mediaType;
    return map;
  }
}


class _MediaRendererGetConsumerParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  media_transport_mojom.MediaConsumerInterfaceRequest consumer = null;

  _MediaRendererGetConsumerParams() : super(kVersions.last.size);

  _MediaRendererGetConsumerParams.init(
    media_transport_mojom.MediaConsumerInterfaceRequest this.consumer
  ) : super(kVersions.last.size);

  static _MediaRendererGetConsumerParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaRendererGetConsumerParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaRendererGetConsumerParams result = new _MediaRendererGetConsumerParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.consumer = decoder0.decodeInterfaceRequest(8, false, media_transport_mojom.MediaConsumerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaRendererGetConsumerParams";
    String fieldName;
    try {
      fieldName = "consumer";
      encoder0.encodeInterfaceRequest(consumer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaRendererGetConsumerParams("
           "consumer: $consumer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaRendererGetTimelineControlSiteParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  timeline_controller_mojom.MediaTimelineControlSiteInterfaceRequest timelineControlSite = null;

  _MediaRendererGetTimelineControlSiteParams() : super(kVersions.last.size);

  _MediaRendererGetTimelineControlSiteParams.init(
    timeline_controller_mojom.MediaTimelineControlSiteInterfaceRequest this.timelineControlSite
  ) : super(kVersions.last.size);

  static _MediaRendererGetTimelineControlSiteParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaRendererGetTimelineControlSiteParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaRendererGetTimelineControlSiteParams result = new _MediaRendererGetTimelineControlSiteParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.timelineControlSite = decoder0.decodeInterfaceRequest(8, false, timeline_controller_mojom.MediaTimelineControlSiteStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaRendererGetTimelineControlSiteParams";
    String fieldName;
    try {
      fieldName = "timelineControlSite";
      encoder0.encodeInterfaceRequest(timelineControlSite, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaRendererGetTimelineControlSiteParams("
           "timelineControlSite: $timelineControlSite" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _mediaRendererMethodGetSupportedMediaTypesName = 0;
const int _mediaRendererMethodSetMediaTypeName = 1;
const int _mediaRendererMethodGetConsumerName = 2;
const int _mediaRendererMethodGetTimelineControlSiteName = 3;

class _MediaRendererServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaRenderer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaRendererServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaRendererProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaRendererProxy p = new MediaRendererProxy.unbound();
    String name = serviceName ?? MediaRenderer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getSupportedMediaTypes(void callback(List<media_types_mojom.MediaTypeSet> supportedMediaTypes));
  void setMediaType(media_types_mojom.MediaType mediaType);
  void getConsumer(media_transport_mojom.MediaConsumerInterfaceRequest consumer);
  void getTimelineControlSite(timeline_controller_mojom.MediaTimelineControlSiteInterfaceRequest timelineControlSite);
}

abstract class MediaRendererInterface
    implements bindings.MojoInterface<MediaRenderer>,
               MediaRenderer {
  factory MediaRendererInterface([MediaRenderer impl]) =>
      new MediaRendererStub.unbound(impl);

  factory MediaRendererInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaRenderer impl]) =>
      new MediaRendererStub.fromEndpoint(endpoint, impl);

  factory MediaRendererInterface.fromMock(
      MediaRenderer mock) =>
      new MediaRendererProxy.fromMock(mock);
}

abstract class MediaRendererInterfaceRequest
    implements bindings.MojoInterface<MediaRenderer>,
               MediaRenderer {
  factory MediaRendererInterfaceRequest() =>
      new MediaRendererProxy.unbound();
}

class _MediaRendererProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaRenderer> {
  MediaRenderer impl;

  _MediaRendererProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaRendererProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaRendererProxyControl.unbound() : super.unbound();

  String get serviceName => MediaRenderer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaRendererMethodGetSupportedMediaTypesName:
        var r = MediaRendererGetSupportedMediaTypesResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.supportedMediaTypes );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaRendererProxyControl($superString)";
  }
}

class MediaRendererProxy
    extends bindings.Proxy<MediaRenderer>
    implements MediaRenderer,
               MediaRendererInterface,
               MediaRendererInterfaceRequest {
  MediaRendererProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaRendererProxyControl.fromEndpoint(endpoint));

  MediaRendererProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaRendererProxyControl.fromHandle(handle));

  MediaRendererProxy.unbound()
      : super(new _MediaRendererProxyControl.unbound());

  factory MediaRendererProxy.fromMock(MediaRenderer mock) {
    MediaRendererProxy newMockedProxy =
        new MediaRendererProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaRendererProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaRendererProxy"));
    return new MediaRendererProxy.fromEndpoint(endpoint);
  }


  void getSupportedMediaTypes(void callback(List<media_types_mojom.MediaTypeSet> supportedMediaTypes)) {
    if (impl != null) {
      impl.getSupportedMediaTypes(callback);
      return;
    }
    var params = new _MediaRendererGetSupportedMediaTypesParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((List<media_types_mojom.MediaTypeSet> supportedMediaTypes) {
        z.bindCallback(() {
          callback(supportedMediaTypes);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaRendererMethodGetSupportedMediaTypesName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void setMediaType(media_types_mojom.MediaType mediaType) {
    if (impl != null) {
      impl.setMediaType(mediaType);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaRendererSetMediaTypeParams();
    params.mediaType = mediaType;
    ctrl.sendMessage(params,
        _mediaRendererMethodSetMediaTypeName);
  }
  void getConsumer(media_transport_mojom.MediaConsumerInterfaceRequest consumer) {
    if (impl != null) {
      impl.getConsumer(consumer);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaRendererGetConsumerParams();
    params.consumer = consumer;
    ctrl.sendMessage(params,
        _mediaRendererMethodGetConsumerName);
  }
  void getTimelineControlSite(timeline_controller_mojom.MediaTimelineControlSiteInterfaceRequest timelineControlSite) {
    if (impl != null) {
      impl.getTimelineControlSite(timelineControlSite);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaRendererGetTimelineControlSiteParams();
    params.timelineControlSite = timelineControlSite;
    ctrl.sendMessage(params,
        _mediaRendererMethodGetTimelineControlSiteName);
  }
}

class _MediaRendererStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaRenderer> {
  MediaRenderer _impl;

  _MediaRendererStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaRenderer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaRendererStubControl.fromHandle(
      core.MojoHandle handle, [MediaRenderer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaRendererStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaRenderer.serviceName;


  Function _mediaRendererGetSupportedMediaTypesResponseParamsResponder(
      int requestId) {
  return (List<media_types_mojom.MediaTypeSet> supportedMediaTypes) {
      var result = new MediaRendererGetSupportedMediaTypesResponseParams();
      result.supportedMediaTypes = supportedMediaTypes;
      sendResponse(buildResponseWithId(
          result,
          _mediaRendererMethodGetSupportedMediaTypesName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaRendererMethodGetSupportedMediaTypesName:
        _impl.getSupportedMediaTypes(_mediaRendererGetSupportedMediaTypesResponseParamsResponder(message.header.requestId));
        break;
      case _mediaRendererMethodSetMediaTypeName:
        var params = _MediaRendererSetMediaTypeParams.deserialize(
            message.payload);
        _impl.setMediaType(params.mediaType);
        break;
      case _mediaRendererMethodGetConsumerName:
        var params = _MediaRendererGetConsumerParams.deserialize(
            message.payload);
        _impl.getConsumer(params.consumer);
        break;
      case _mediaRendererMethodGetTimelineControlSiteName:
        var params = _MediaRendererGetTimelineControlSiteParams.deserialize(
            message.payload);
        _impl.getTimelineControlSite(params.timelineControlSite);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaRenderer get impl => _impl;
  set impl(MediaRenderer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaRendererStubControl($superString)";
  }

  int get version => 0;
}

class MediaRendererStub
    extends bindings.Stub<MediaRenderer>
    implements MediaRenderer,
               MediaRendererInterface,
               MediaRendererInterfaceRequest {
  MediaRendererStub.unbound([MediaRenderer impl])
      : super(new _MediaRendererStubControl.unbound(impl));

  MediaRendererStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaRenderer impl])
      : super(new _MediaRendererStubControl.fromEndpoint(endpoint, impl));

  MediaRendererStub.fromHandle(
      core.MojoHandle handle, [MediaRenderer impl])
      : super(new _MediaRendererStubControl.fromHandle(handle, impl));

  static MediaRendererStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaRendererStub"));
    return new MediaRendererStub.fromEndpoint(endpoint);
  }


  void getSupportedMediaTypes(void callback(List<media_types_mojom.MediaTypeSet> supportedMediaTypes)) {
    return impl.getSupportedMediaTypes(callback);
  }
  void setMediaType(media_types_mojom.MediaType mediaType) {
    return impl.setMediaType(mediaType);
  }
  void getConsumer(media_transport_mojom.MediaConsumerInterfaceRequest consumer) {
    return impl.getConsumer(consumer);
  }
  void getTimelineControlSite(timeline_controller_mojom.MediaTimelineControlSiteInterfaceRequest timelineControlSite) {
    return impl.getTimelineControlSite(timelineControlSite);
  }
}



