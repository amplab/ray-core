// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library media_transport_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class MediaPacketRegion extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int offset = 0;
  int length = 0;

  MediaPacketRegion() : super(kVersions.last.size);

  MediaPacketRegion.init(
    int this.offset, 
    int this.length
  ) : super(kVersions.last.size);

  static MediaPacketRegion deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacketRegion decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacketRegion result = new MediaPacketRegion();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.offset = decoder0.decodeUint64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.length = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacketRegion";
    String fieldName;
    try {
      fieldName = "offset";
      encoder0.encodeUint64(offset, 8);
      fieldName = "length";
      encoder0.encodeUint64(length, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacketRegion("
           "offset: $offset" ", "
           "length: $length" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["offset"] = offset;
    map["length"] = length;
    return map;
  }
}


class MediaPacket extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  static const int kNoTimestamp = 9223372036854775807;
  int pts = 9223372036854775807;
  bool endOfStream = false;
  MediaPacketRegion payload = null;
  List<MediaPacketRegion> extraPayload = null;

  MediaPacket() : super(kVersions.last.size);

  MediaPacket.init(
    int this.pts, 
    bool this.endOfStream, 
    MediaPacketRegion this.payload, 
    List<MediaPacketRegion> this.extraPayload
  ) : super(kVersions.last.size);

  static MediaPacket deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPacket decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPacket result = new MediaPacket();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.pts = decoder0.decodeInt64(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.endOfStream = decoder0.decodeBool(16, 0);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, false);
      result.payload = MediaPacketRegion.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(32, true);
      if (decoder1 == null) {
        result.extraPayload = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.extraPayload = new List<MediaPacketRegion>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.extraPayload[i1] = MediaPacketRegion.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPacket";
    String fieldName;
    try {
      fieldName = "pts";
      encoder0.encodeInt64(pts, 8);
      fieldName = "endOfStream";
      encoder0.encodeBool(endOfStream, 16, 0);
      fieldName = "payload";
      encoder0.encodeStruct(payload, 24, false);
      fieldName = "extraPayload";
      if (extraPayload == null) {
        encoder0.encodeNullPointer(32, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(extraPayload.length, 32, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < extraPayload.length; ++i0) {
          encoder1.encodeStruct(extraPayload[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPacket("
           "pts: $pts" ", "
           "endOfStream: $endOfStream" ", "
           "payload: $payload" ", "
           "extraPayload: $extraPayload" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["pts"] = pts;
    map["endOfStream"] = endOfStream;
    map["payload"] = payload;
    map["extraPayload"] = extraPayload;
    return map;
  }
}


class _MediaProducerConnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaConsumerInterface consumer = null;

  _MediaProducerConnectParams() : super(kVersions.last.size);

  _MediaProducerConnectParams.init(
    MediaConsumerInterface this.consumer
  ) : super(kVersions.last.size);

  static _MediaProducerConnectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaProducerConnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaProducerConnectParams result = new _MediaProducerConnectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.consumer = decoder0.decodeServiceInterface(8, false, MediaConsumerProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaProducerConnectParams";
    String fieldName;
    try {
      fieldName = "consumer";
      encoder0.encodeInterface(consumer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaProducerConnectParams("
           "consumer: $consumer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class MediaProducerConnectResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaProducerConnectResponseParams() : super(kVersions.last.size);

  MediaProducerConnectResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaProducerConnectResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaProducerConnectResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaProducerConnectResponseParams result = new MediaProducerConnectResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaProducerConnectResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaProducerConnectResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaProducerDisconnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaProducerDisconnectParams() : super(kVersions.last.size);

  _MediaProducerDisconnectParams.init(
  ) : super(kVersions.last.size);

  static _MediaProducerDisconnectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaProducerDisconnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaProducerDisconnectParams result = new _MediaProducerDisconnectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaProducerDisconnectParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaProducerDisconnectParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaPullModeProducerGetBufferParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaPullModeProducerGetBufferParams() : super(kVersions.last.size);

  _MediaPullModeProducerGetBufferParams.init(
  ) : super(kVersions.last.size);

  static _MediaPullModeProducerGetBufferParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPullModeProducerGetBufferParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPullModeProducerGetBufferParams result = new _MediaPullModeProducerGetBufferParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPullModeProducerGetBufferParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPullModeProducerGetBufferParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaPullModeProducerGetBufferResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  core.MojoSharedBuffer buffer = null;

  MediaPullModeProducerGetBufferResponseParams() : super(kVersions.last.size);

  MediaPullModeProducerGetBufferResponseParams.init(
    core.MojoSharedBuffer this.buffer
  ) : super(kVersions.last.size);

  static MediaPullModeProducerGetBufferResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPullModeProducerGetBufferResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPullModeProducerGetBufferResponseParams result = new MediaPullModeProducerGetBufferResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.buffer = decoder0.decodeSharedBufferHandle(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPullModeProducerGetBufferResponseParams";
    String fieldName;
    try {
      fieldName = "buffer";
      encoder0.encodeSharedBufferHandle(buffer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPullModeProducerGetBufferResponseParams("
           "buffer: $buffer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _MediaPullModeProducerPullPacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacket toRelease = null;

  _MediaPullModeProducerPullPacketParams() : super(kVersions.last.size);

  _MediaPullModeProducerPullPacketParams.init(
    MediaPacket this.toRelease
  ) : super(kVersions.last.size);

  static _MediaPullModeProducerPullPacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPullModeProducerPullPacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPullModeProducerPullPacketParams result = new _MediaPullModeProducerPullPacketParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.toRelease = MediaPacket.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPullModeProducerPullPacketParams";
    String fieldName;
    try {
      fieldName = "toRelease";
      encoder0.encodeStruct(toRelease, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPullModeProducerPullPacketParams("
           "toRelease: $toRelease" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["toRelease"] = toRelease;
    return map;
  }
}


class MediaPullModeProducerPullPacketResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacket packet = null;

  MediaPullModeProducerPullPacketResponseParams() : super(kVersions.last.size);

  MediaPullModeProducerPullPacketResponseParams.init(
    MediaPacket this.packet
  ) : super(kVersions.last.size);

  static MediaPullModeProducerPullPacketResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaPullModeProducerPullPacketResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaPullModeProducerPullPacketResponseParams result = new MediaPullModeProducerPullPacketResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.packet = MediaPacket.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaPullModeProducerPullPacketResponseParams";
    String fieldName;
    try {
      fieldName = "packet";
      encoder0.encodeStruct(packet, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaPullModeProducerPullPacketResponseParams("
           "packet: $packet" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["packet"] = packet;
    return map;
  }
}


class _MediaPullModeProducerReleasePacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacket toRelease = null;

  _MediaPullModeProducerReleasePacketParams() : super(kVersions.last.size);

  _MediaPullModeProducerReleasePacketParams.init(
    MediaPacket this.toRelease
  ) : super(kVersions.last.size);

  static _MediaPullModeProducerReleasePacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaPullModeProducerReleasePacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaPullModeProducerReleasePacketParams result = new _MediaPullModeProducerReleasePacketParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.toRelease = MediaPacket.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaPullModeProducerReleasePacketParams";
    String fieldName;
    try {
      fieldName = "toRelease";
      encoder0.encodeStruct(toRelease, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaPullModeProducerReleasePacketParams("
           "toRelease: $toRelease" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["toRelease"] = toRelease;
    return map;
  }
}


class _MediaConsumerSetBufferParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  core.MojoSharedBuffer buffer = null;

  _MediaConsumerSetBufferParams() : super(kVersions.last.size);

  _MediaConsumerSetBufferParams.init(
    core.MojoSharedBuffer this.buffer
  ) : super(kVersions.last.size);

  static _MediaConsumerSetBufferParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaConsumerSetBufferParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaConsumerSetBufferParams result = new _MediaConsumerSetBufferParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.buffer = decoder0.decodeSharedBufferHandle(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaConsumerSetBufferParams";
    String fieldName;
    try {
      fieldName = "buffer";
      encoder0.encodeSharedBufferHandle(buffer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaConsumerSetBufferParams("
           "buffer: $buffer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class MediaConsumerSetBufferResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaConsumerSetBufferResponseParams() : super(kVersions.last.size);

  MediaConsumerSetBufferResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaConsumerSetBufferResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaConsumerSetBufferResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaConsumerSetBufferResponseParams result = new MediaConsumerSetBufferResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaConsumerSetBufferResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaConsumerSetBufferResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaConsumerSendPacketParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaPacket packet = null;

  _MediaConsumerSendPacketParams() : super(kVersions.last.size);

  _MediaConsumerSendPacketParams.init(
    MediaPacket this.packet
  ) : super(kVersions.last.size);

  static _MediaConsumerSendPacketParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaConsumerSendPacketParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaConsumerSendPacketParams result = new _MediaConsumerSendPacketParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.packet = MediaPacket.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaConsumerSendPacketParams";
    String fieldName;
    try {
      fieldName = "packet";
      encoder0.encodeStruct(packet, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaConsumerSendPacketParams("
           "packet: $packet" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["packet"] = packet;
    return map;
  }
}


class MediaConsumerSendPacketResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  MediaConsumerSendResult result = null;

  MediaConsumerSendPacketResponseParams() : super(kVersions.last.size);

  MediaConsumerSendPacketResponseParams.init(
    MediaConsumerSendResult this.result
  ) : super(kVersions.last.size);

  static MediaConsumerSendPacketResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaConsumerSendPacketResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaConsumerSendPacketResponseParams result = new MediaConsumerSendPacketResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.result = MediaConsumerSendResult.decode(decoder0, 8);
        if (result.result == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable MediaConsumerSendResult.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaConsumerSendPacketResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeEnum(result, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaConsumerSendPacketResponseParams("
           "result: $result" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    return map;
  }
}


class _MediaConsumerPrimeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaConsumerPrimeParams() : super(kVersions.last.size);

  _MediaConsumerPrimeParams.init(
  ) : super(kVersions.last.size);

  static _MediaConsumerPrimeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaConsumerPrimeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaConsumerPrimeParams result = new _MediaConsumerPrimeParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaConsumerPrimeParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaConsumerPrimeParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaConsumerPrimeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaConsumerPrimeResponseParams() : super(kVersions.last.size);

  MediaConsumerPrimeResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaConsumerPrimeResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaConsumerPrimeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaConsumerPrimeResponseParams result = new MediaConsumerPrimeResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaConsumerPrimeResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaConsumerPrimeResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _MediaConsumerFlushParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _MediaConsumerFlushParams() : super(kVersions.last.size);

  _MediaConsumerFlushParams.init(
  ) : super(kVersions.last.size);

  static _MediaConsumerFlushParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _MediaConsumerFlushParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _MediaConsumerFlushParams result = new _MediaConsumerFlushParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_MediaConsumerFlushParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_MediaConsumerFlushParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class MediaConsumerFlushResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  MediaConsumerFlushResponseParams() : super(kVersions.last.size);

  MediaConsumerFlushResponseParams.init(
  ) : super(kVersions.last.size);

  static MediaConsumerFlushResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static MediaConsumerFlushResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    MediaConsumerFlushResponseParams result = new MediaConsumerFlushResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "MediaConsumerFlushResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "MediaConsumerFlushResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _mediaProducerMethodConnectName = 0;
const int _mediaProducerMethodDisconnectName = 1;

class _MediaProducerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaProducer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaProducerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaProducerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaProducerProxy p = new MediaProducerProxy.unbound();
    String name = serviceName ?? MediaProducer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void connect(MediaConsumerInterface consumer,void callback());
  void disconnect();
}

abstract class MediaProducerInterface
    implements bindings.MojoInterface<MediaProducer>,
               MediaProducer {
  factory MediaProducerInterface([MediaProducer impl]) =>
      new MediaProducerStub.unbound(impl);

  factory MediaProducerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaProducer impl]) =>
      new MediaProducerStub.fromEndpoint(endpoint, impl);

  factory MediaProducerInterface.fromMock(
      MediaProducer mock) =>
      new MediaProducerProxy.fromMock(mock);
}

abstract class MediaProducerInterfaceRequest
    implements bindings.MojoInterface<MediaProducer>,
               MediaProducer {
  factory MediaProducerInterfaceRequest() =>
      new MediaProducerProxy.unbound();
}

class _MediaProducerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaProducer> {
  MediaProducer impl;

  _MediaProducerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaProducerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaProducerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaProducer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaProducerMethodConnectName:
        var r = MediaProducerConnectResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaProducerProxyControl($superString)";
  }
}

class MediaProducerProxy
    extends bindings.Proxy<MediaProducer>
    implements MediaProducer,
               MediaProducerInterface,
               MediaProducerInterfaceRequest {
  MediaProducerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaProducerProxyControl.fromEndpoint(endpoint));

  MediaProducerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaProducerProxyControl.fromHandle(handle));

  MediaProducerProxy.unbound()
      : super(new _MediaProducerProxyControl.unbound());

  factory MediaProducerProxy.fromMock(MediaProducer mock) {
    MediaProducerProxy newMockedProxy =
        new MediaProducerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaProducerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaProducerProxy"));
    return new MediaProducerProxy.fromEndpoint(endpoint);
  }


  void connect(MediaConsumerInterface consumer,void callback()) {
    if (impl != null) {
      impl.connect(consumer,callback);
      return;
    }
    var params = new _MediaProducerConnectParams();
    params.consumer = consumer;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaProducerMethodConnectName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void disconnect() {
    if (impl != null) {
      impl.disconnect();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaProducerDisconnectParams();
    ctrl.sendMessage(params,
        _mediaProducerMethodDisconnectName);
  }
}

class _MediaProducerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaProducer> {
  MediaProducer _impl;

  _MediaProducerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaProducer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaProducerStubControl.fromHandle(
      core.MojoHandle handle, [MediaProducer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaProducerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaProducer.serviceName;


  Function _mediaProducerConnectResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaProducerConnectResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaProducerMethodConnectName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaProducerMethodConnectName:
        var params = _MediaProducerConnectParams.deserialize(
            message.payload);
        _impl.connect(params.consumer, _mediaProducerConnectResponseParamsResponder(message.header.requestId));
        break;
      case _mediaProducerMethodDisconnectName:
        _impl.disconnect();
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaProducer get impl => _impl;
  set impl(MediaProducer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaProducerStubControl($superString)";
  }

  int get version => 0;
}

class MediaProducerStub
    extends bindings.Stub<MediaProducer>
    implements MediaProducer,
               MediaProducerInterface,
               MediaProducerInterfaceRequest {
  MediaProducerStub.unbound([MediaProducer impl])
      : super(new _MediaProducerStubControl.unbound(impl));

  MediaProducerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaProducer impl])
      : super(new _MediaProducerStubControl.fromEndpoint(endpoint, impl));

  MediaProducerStub.fromHandle(
      core.MojoHandle handle, [MediaProducer impl])
      : super(new _MediaProducerStubControl.fromHandle(handle, impl));

  static MediaProducerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaProducerStub"));
    return new MediaProducerStub.fromEndpoint(endpoint);
  }


  void connect(MediaConsumerInterface consumer,void callback()) {
    return impl.connect(consumer,callback);
  }
  void disconnect() {
    return impl.disconnect();
  }
}

const int _mediaPullModeProducerMethodGetBufferName = 0;
const int _mediaPullModeProducerMethodPullPacketName = 1;
const int _mediaPullModeProducerMethodReleasePacketName = 2;

class _MediaPullModeProducerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaPullModeProducer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaPullModeProducerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaPullModeProducerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaPullModeProducerProxy p = new MediaPullModeProducerProxy.unbound();
    String name = serviceName ?? MediaPullModeProducer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getBuffer(void callback(core.MojoSharedBuffer buffer));
  void pullPacket(MediaPacket toRelease,void callback(MediaPacket packet));
  void releasePacket(MediaPacket toRelease);
}

abstract class MediaPullModeProducerInterface
    implements bindings.MojoInterface<MediaPullModeProducer>,
               MediaPullModeProducer {
  factory MediaPullModeProducerInterface([MediaPullModeProducer impl]) =>
      new MediaPullModeProducerStub.unbound(impl);

  factory MediaPullModeProducerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaPullModeProducer impl]) =>
      new MediaPullModeProducerStub.fromEndpoint(endpoint, impl);

  factory MediaPullModeProducerInterface.fromMock(
      MediaPullModeProducer mock) =>
      new MediaPullModeProducerProxy.fromMock(mock);
}

abstract class MediaPullModeProducerInterfaceRequest
    implements bindings.MojoInterface<MediaPullModeProducer>,
               MediaPullModeProducer {
  factory MediaPullModeProducerInterfaceRequest() =>
      new MediaPullModeProducerProxy.unbound();
}

class _MediaPullModeProducerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaPullModeProducer> {
  MediaPullModeProducer impl;

  _MediaPullModeProducerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaPullModeProducerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaPullModeProducerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaPullModeProducer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaPullModeProducerMethodGetBufferName:
        var r = MediaPullModeProducerGetBufferResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.buffer );
        break;
      case _mediaPullModeProducerMethodPullPacketName:
        var r = MediaPullModeProducerPullPacketResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.packet );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPullModeProducerProxyControl($superString)";
  }
}

class MediaPullModeProducerProxy
    extends bindings.Proxy<MediaPullModeProducer>
    implements MediaPullModeProducer,
               MediaPullModeProducerInterface,
               MediaPullModeProducerInterfaceRequest {
  MediaPullModeProducerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaPullModeProducerProxyControl.fromEndpoint(endpoint));

  MediaPullModeProducerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaPullModeProducerProxyControl.fromHandle(handle));

  MediaPullModeProducerProxy.unbound()
      : super(new _MediaPullModeProducerProxyControl.unbound());

  factory MediaPullModeProducerProxy.fromMock(MediaPullModeProducer mock) {
    MediaPullModeProducerProxy newMockedProxy =
        new MediaPullModeProducerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaPullModeProducerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPullModeProducerProxy"));
    return new MediaPullModeProducerProxy.fromEndpoint(endpoint);
  }


  void getBuffer(void callback(core.MojoSharedBuffer buffer)) {
    if (impl != null) {
      impl.getBuffer(callback);
      return;
    }
    var params = new _MediaPullModeProducerGetBufferParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((core.MojoSharedBuffer buffer) {
        z.bindCallback(() {
          callback(buffer);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPullModeProducerMethodGetBufferName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void pullPacket(MediaPacket toRelease,void callback(MediaPacket packet)) {
    if (impl != null) {
      impl.pullPacket(toRelease,callback);
      return;
    }
    var params = new _MediaPullModeProducerPullPacketParams();
    params.toRelease = toRelease;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((MediaPacket packet) {
        z.bindCallback(() {
          callback(packet);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaPullModeProducerMethodPullPacketName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void releasePacket(MediaPacket toRelease) {
    if (impl != null) {
      impl.releasePacket(toRelease);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _MediaPullModeProducerReleasePacketParams();
    params.toRelease = toRelease;
    ctrl.sendMessage(params,
        _mediaPullModeProducerMethodReleasePacketName);
  }
}

class _MediaPullModeProducerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaPullModeProducer> {
  MediaPullModeProducer _impl;

  _MediaPullModeProducerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPullModeProducer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPullModeProducerStubControl.fromHandle(
      core.MojoHandle handle, [MediaPullModeProducer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaPullModeProducerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaPullModeProducer.serviceName;


  Function _mediaPullModeProducerGetBufferResponseParamsResponder(
      int requestId) {
  return (core.MojoSharedBuffer buffer) {
      var result = new MediaPullModeProducerGetBufferResponseParams();
      result.buffer = buffer;
      sendResponse(buildResponseWithId(
          result,
          _mediaPullModeProducerMethodGetBufferName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaPullModeProducerPullPacketResponseParamsResponder(
      int requestId) {
  return (MediaPacket packet) {
      var result = new MediaPullModeProducerPullPacketResponseParams();
      result.packet = packet;
      sendResponse(buildResponseWithId(
          result,
          _mediaPullModeProducerMethodPullPacketName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaPullModeProducerMethodGetBufferName:
        _impl.getBuffer(_mediaPullModeProducerGetBufferResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPullModeProducerMethodPullPacketName:
        var params = _MediaPullModeProducerPullPacketParams.deserialize(
            message.payload);
        _impl.pullPacket(params.toRelease, _mediaPullModeProducerPullPacketResponseParamsResponder(message.header.requestId));
        break;
      case _mediaPullModeProducerMethodReleasePacketName:
        var params = _MediaPullModeProducerReleasePacketParams.deserialize(
            message.payload);
        _impl.releasePacket(params.toRelease);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaPullModeProducer get impl => _impl;
  set impl(MediaPullModeProducer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaPullModeProducerStubControl($superString)";
  }

  int get version => 0;
}

class MediaPullModeProducerStub
    extends bindings.Stub<MediaPullModeProducer>
    implements MediaPullModeProducer,
               MediaPullModeProducerInterface,
               MediaPullModeProducerInterfaceRequest {
  MediaPullModeProducerStub.unbound([MediaPullModeProducer impl])
      : super(new _MediaPullModeProducerStubControl.unbound(impl));

  MediaPullModeProducerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaPullModeProducer impl])
      : super(new _MediaPullModeProducerStubControl.fromEndpoint(endpoint, impl));

  MediaPullModeProducerStub.fromHandle(
      core.MojoHandle handle, [MediaPullModeProducer impl])
      : super(new _MediaPullModeProducerStubControl.fromHandle(handle, impl));

  static MediaPullModeProducerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaPullModeProducerStub"));
    return new MediaPullModeProducerStub.fromEndpoint(endpoint);
  }


  void getBuffer(void callback(core.MojoSharedBuffer buffer)) {
    return impl.getBuffer(callback);
  }
  void pullPacket(MediaPacket toRelease,void callback(MediaPacket packet)) {
    return impl.pullPacket(toRelease,callback);
  }
  void releasePacket(MediaPacket toRelease) {
    return impl.releasePacket(toRelease);
  }
}

const int _mediaConsumerMethodSetBufferName = 0;
const int _mediaConsumerMethodSendPacketName = 1;
const int _mediaConsumerMethodPrimeName = 2;
const int _mediaConsumerMethodFlushName = 3;
  
class MediaConsumerSendResult extends bindings.MojoEnum {
  static const MediaConsumerSendResult consumed = const MediaConsumerSendResult._(0);
  static const MediaConsumerSendResult flushed = const MediaConsumerSendResult._(1);

  const MediaConsumerSendResult._(int v) : super(v);

  static const Map<String, MediaConsumerSendResult> valuesMap = const {
    "consumed": consumed,
    "flushed": flushed,
  };
  static const List<MediaConsumerSendResult> values = const [
    consumed,
    flushed,
  ];

  static MediaConsumerSendResult valueOf(String name) => valuesMap[name];

  factory MediaConsumerSendResult(int v) {
    switch (v) {
      case 0:
        return MediaConsumerSendResult.consumed;
      case 1:
        return MediaConsumerSendResult.flushed;
      default:
        return null;
    }
  }

  static MediaConsumerSendResult decode(bindings.Decoder decoder0, int offset) {
    int v = decoder0.decodeUint32(offset);
    MediaConsumerSendResult result = new MediaConsumerSendResult(v);
    if (result == null) {
      throw new bindings.MojoCodecError(
          'Bad value $v for enum MediaConsumerSendResult.');
    }
    return result;
  }

  String toString() {
    switch(this) {
      case consumed:
        return 'MediaConsumerSendResult.consumed';
      case flushed:
        return 'MediaConsumerSendResult.flushed';
      default:
        return null;
    }
  }

  int toJson() => mojoEnumValue;
}

class _MediaConsumerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class MediaConsumer {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _MediaConsumerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static MediaConsumerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    MediaConsumerProxy p = new MediaConsumerProxy.unbound();
    String name = serviceName ?? MediaConsumer.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void setBuffer(core.MojoSharedBuffer buffer,void callback());
  void sendPacket(MediaPacket packet,void callback(MediaConsumerSendResult result));
  void prime(void callback());
  void flush(void callback());
  static const int kMaxBufferLen = 4611686018427387903;
}

abstract class MediaConsumerInterface
    implements bindings.MojoInterface<MediaConsumer>,
               MediaConsumer {
  factory MediaConsumerInterface([MediaConsumer impl]) =>
      new MediaConsumerStub.unbound(impl);

  factory MediaConsumerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [MediaConsumer impl]) =>
      new MediaConsumerStub.fromEndpoint(endpoint, impl);

  factory MediaConsumerInterface.fromMock(
      MediaConsumer mock) =>
      new MediaConsumerProxy.fromMock(mock);
}

abstract class MediaConsumerInterfaceRequest
    implements bindings.MojoInterface<MediaConsumer>,
               MediaConsumer {
  factory MediaConsumerInterfaceRequest() =>
      new MediaConsumerProxy.unbound();
}

class _MediaConsumerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<MediaConsumer> {
  MediaConsumer impl;

  _MediaConsumerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _MediaConsumerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _MediaConsumerProxyControl.unbound() : super.unbound();

  String get serviceName => MediaConsumer.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _mediaConsumerMethodSetBufferName:
        var r = MediaConsumerSetBufferResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      case _mediaConsumerMethodSendPacketName:
        var r = MediaConsumerSendPacketResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.result );
        break;
      case _mediaConsumerMethodPrimeName:
        var r = MediaConsumerPrimeResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      case _mediaConsumerMethodFlushName:
        var r = MediaConsumerFlushResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaConsumerProxyControl($superString)";
  }
}

class MediaConsumerProxy
    extends bindings.Proxy<MediaConsumer>
    implements MediaConsumer,
               MediaConsumerInterface,
               MediaConsumerInterfaceRequest {
  MediaConsumerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _MediaConsumerProxyControl.fromEndpoint(endpoint));

  MediaConsumerProxy.fromHandle(core.MojoHandle handle)
      : super(new _MediaConsumerProxyControl.fromHandle(handle));

  MediaConsumerProxy.unbound()
      : super(new _MediaConsumerProxyControl.unbound());

  factory MediaConsumerProxy.fromMock(MediaConsumer mock) {
    MediaConsumerProxy newMockedProxy =
        new MediaConsumerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static MediaConsumerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaConsumerProxy"));
    return new MediaConsumerProxy.fromEndpoint(endpoint);
  }


  void setBuffer(core.MojoSharedBuffer buffer,void callback()) {
    if (impl != null) {
      impl.setBuffer(buffer,callback);
      return;
    }
    var params = new _MediaConsumerSetBufferParams();
    params.buffer = buffer;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaConsumerMethodSetBufferName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void sendPacket(MediaPacket packet,void callback(MediaConsumerSendResult result)) {
    if (impl != null) {
      impl.sendPacket(packet,callback);
      return;
    }
    var params = new _MediaConsumerSendPacketParams();
    params.packet = packet;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((MediaConsumerSendResult result) {
        z.bindCallback(() {
          callback(result);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaConsumerMethodSendPacketName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void prime(void callback()) {
    if (impl != null) {
      impl.prime(callback);
      return;
    }
    var params = new _MediaConsumerPrimeParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaConsumerMethodPrimeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void flush(void callback()) {
    if (impl != null) {
      impl.flush(callback);
      return;
    }
    var params = new _MediaConsumerFlushParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _mediaConsumerMethodFlushName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _MediaConsumerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<MediaConsumer> {
  MediaConsumer _impl;

  _MediaConsumerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaConsumer impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaConsumerStubControl.fromHandle(
      core.MojoHandle handle, [MediaConsumer impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _MediaConsumerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => MediaConsumer.serviceName;


  Function _mediaConsumerSetBufferResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaConsumerSetBufferResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaConsumerMethodSetBufferName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaConsumerSendPacketResponseParamsResponder(
      int requestId) {
  return (MediaConsumerSendResult result) {
      var result = new MediaConsumerSendPacketResponseParams();
      result.result = result;
      sendResponse(buildResponseWithId(
          result,
          _mediaConsumerMethodSendPacketName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaConsumerPrimeResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaConsumerPrimeResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaConsumerMethodPrimeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _mediaConsumerFlushResponseParamsResponder(
      int requestId) {
  return () {
      var result = new MediaConsumerFlushResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _mediaConsumerMethodFlushName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _mediaConsumerMethodSetBufferName:
        var params = _MediaConsumerSetBufferParams.deserialize(
            message.payload);
        _impl.setBuffer(params.buffer, _mediaConsumerSetBufferResponseParamsResponder(message.header.requestId));
        break;
      case _mediaConsumerMethodSendPacketName:
        var params = _MediaConsumerSendPacketParams.deserialize(
            message.payload);
        _impl.sendPacket(params.packet, _mediaConsumerSendPacketResponseParamsResponder(message.header.requestId));
        break;
      case _mediaConsumerMethodPrimeName:
        _impl.prime(_mediaConsumerPrimeResponseParamsResponder(message.header.requestId));
        break;
      case _mediaConsumerMethodFlushName:
        _impl.flush(_mediaConsumerFlushResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  MediaConsumer get impl => _impl;
  set impl(MediaConsumer d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_MediaConsumerStubControl($superString)";
  }

  int get version => 0;
}

class MediaConsumerStub
    extends bindings.Stub<MediaConsumer>
    implements MediaConsumer,
               MediaConsumerInterface,
               MediaConsumerInterfaceRequest {
  MediaConsumerStub.unbound([MediaConsumer impl])
      : super(new _MediaConsumerStubControl.unbound(impl));

  MediaConsumerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [MediaConsumer impl])
      : super(new _MediaConsumerStubControl.fromEndpoint(endpoint, impl));

  MediaConsumerStub.fromHandle(
      core.MojoHandle handle, [MediaConsumer impl])
      : super(new _MediaConsumerStubControl.fromHandle(handle, impl));

  static MediaConsumerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For MediaConsumerStub"));
    return new MediaConsumerStub.fromEndpoint(endpoint);
  }


  void setBuffer(core.MojoSharedBuffer buffer,void callback()) {
    return impl.setBuffer(buffer,callback);
  }
  void sendPacket(MediaPacket packet,void callback(MediaConsumerSendResult result)) {
    return impl.sendPacket(packet,callback);
  }
  void prime(void callback()) {
    return impl.prime(callback);
  }
  void flush(void callback()) {
    return impl.flush(callback);
  }
}



