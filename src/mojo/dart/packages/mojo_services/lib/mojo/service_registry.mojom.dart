// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library service_registry_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo/mojo/service_provider.mojom.dart' as service_provider_mojom;



class _ServiceRegistryAddServicesParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  List<String> interfaceNames = null;
  service_provider_mojom.ServiceProviderInterface serviceProvider = null;

  _ServiceRegistryAddServicesParams() : super(kVersions.last.size);

  _ServiceRegistryAddServicesParams.init(
    List<String> this.interfaceNames, 
    service_provider_mojom.ServiceProviderInterface this.serviceProvider
  ) : super(kVersions.last.size);

  static _ServiceRegistryAddServicesParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ServiceRegistryAddServicesParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ServiceRegistryAddServicesParams result = new _ServiceRegistryAddServicesParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.interfaceNames = new List<String>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.interfaceNames[i1] = decoder1.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
        }
      }
    }
    if (mainDataHeader.version >= 0) {
      
      result.serviceProvider = decoder0.decodeServiceInterface(16, false, service_provider_mojom.ServiceProviderProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ServiceRegistryAddServicesParams";
    String fieldName;
    try {
      fieldName = "interfaceNames";
      if (interfaceNames == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(interfaceNames.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < interfaceNames.length; ++i0) {
          encoder1.encodeString(interfaceNames[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
      fieldName = "serviceProvider";
      encoder0.encodeInterface(serviceProvider, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ServiceRegistryAddServicesParams("
           "interfaceNames: $interfaceNames" ", "
           "serviceProvider: $serviceProvider" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _serviceRegistryMethodAddServicesName = 0;

class _ServiceRegistryServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class ServiceRegistry {
  static const String serviceName = "mojo::ServiceRegistry";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ServiceRegistryServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ServiceRegistryProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ServiceRegistryProxy p = new ServiceRegistryProxy.unbound();
    String name = serviceName ?? ServiceRegistry.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void addServices(List<String> interfaceNames, service_provider_mojom.ServiceProviderInterface serviceProvider);
}

abstract class ServiceRegistryInterface
    implements bindings.MojoInterface<ServiceRegistry>,
               ServiceRegistry {
  factory ServiceRegistryInterface([ServiceRegistry impl]) =>
      new ServiceRegistryStub.unbound(impl);

  factory ServiceRegistryInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [ServiceRegistry impl]) =>
      new ServiceRegistryStub.fromEndpoint(endpoint, impl);

  factory ServiceRegistryInterface.fromMock(
      ServiceRegistry mock) =>
      new ServiceRegistryProxy.fromMock(mock);
}

abstract class ServiceRegistryInterfaceRequest
    implements bindings.MojoInterface<ServiceRegistry>,
               ServiceRegistry {
  factory ServiceRegistryInterfaceRequest() =>
      new ServiceRegistryProxy.unbound();
}

class _ServiceRegistryProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<ServiceRegistry> {
  ServiceRegistry impl;

  _ServiceRegistryProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ServiceRegistryProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ServiceRegistryProxyControl.unbound() : super.unbound();

  String get serviceName => ServiceRegistry.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ServiceRegistryProxyControl($superString)";
  }
}

class ServiceRegistryProxy
    extends bindings.Proxy<ServiceRegistry>
    implements ServiceRegistry,
               ServiceRegistryInterface,
               ServiceRegistryInterfaceRequest {
  ServiceRegistryProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ServiceRegistryProxyControl.fromEndpoint(endpoint));

  ServiceRegistryProxy.fromHandle(core.MojoHandle handle)
      : super(new _ServiceRegistryProxyControl.fromHandle(handle));

  ServiceRegistryProxy.unbound()
      : super(new _ServiceRegistryProxyControl.unbound());

  factory ServiceRegistryProxy.fromMock(ServiceRegistry mock) {
    ServiceRegistryProxy newMockedProxy =
        new ServiceRegistryProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ServiceRegistryProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ServiceRegistryProxy"));
    return new ServiceRegistryProxy.fromEndpoint(endpoint);
  }


  void addServices(List<String> interfaceNames, service_provider_mojom.ServiceProviderInterface serviceProvider) {
    if (impl != null) {
      impl.addServices(interfaceNames, serviceProvider);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ServiceRegistryAddServicesParams();
    params.interfaceNames = interfaceNames;
    params.serviceProvider = serviceProvider;
    ctrl.sendMessage(params,
        _serviceRegistryMethodAddServicesName);
  }
}

class _ServiceRegistryStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<ServiceRegistry> {
  ServiceRegistry _impl;

  _ServiceRegistryStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ServiceRegistry impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ServiceRegistryStubControl.fromHandle(
      core.MojoHandle handle, [ServiceRegistry impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ServiceRegistryStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => ServiceRegistry.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _serviceRegistryMethodAddServicesName:
        var params = _ServiceRegistryAddServicesParams.deserialize(
            message.payload);
        _impl.addServices(params.interfaceNames, params.serviceProvider);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  ServiceRegistry get impl => _impl;
  set impl(ServiceRegistry d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ServiceRegistryStubControl($superString)";
  }

  int get version => 0;
}

class ServiceRegistryStub
    extends bindings.Stub<ServiceRegistry>
    implements ServiceRegistry,
               ServiceRegistryInterface,
               ServiceRegistryInterfaceRequest {
  ServiceRegistryStub.unbound([ServiceRegistry impl])
      : super(new _ServiceRegistryStubControl.unbound(impl));

  ServiceRegistryStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ServiceRegistry impl])
      : super(new _ServiceRegistryStubControl.fromEndpoint(endpoint, impl));

  ServiceRegistryStub.fromHandle(
      core.MojoHandle handle, [ServiceRegistry impl])
      : super(new _ServiceRegistryStubControl.fromHandle(handle, impl));

  static ServiceRegistryStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ServiceRegistryStub"));
    return new ServiceRegistryStub.fromEndpoint(endpoint);
  }


  void addServices(List<String> interfaceNames, service_provider_mojom.ServiceProviderInterface serviceProvider) {
    return impl.addServices(interfaceNames, serviceProvider);
  }
}



