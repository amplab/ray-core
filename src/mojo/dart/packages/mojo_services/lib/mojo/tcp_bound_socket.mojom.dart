// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library tcp_bound_socket_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo/mojo/network_error.mojom.dart' as network_error_mojom;
import 'package:mojo_services/mojo/net_address.mojom.dart' as net_address_mojom;
import 'package:mojo_services/mojo/tcp_connected_socket.mojom.dart' as tcp_connected_socket_mojom;
import 'package:mojo_services/mojo/tcp_server_socket.mojom.dart' as tcp_server_socket_mojom;



class _TcpBoundSocketStartListeningParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  tcp_server_socket_mojom.TcpServerSocketInterfaceRequest server = null;

  _TcpBoundSocketStartListeningParams() : super(kVersions.last.size);

  _TcpBoundSocketStartListeningParams.init(
    tcp_server_socket_mojom.TcpServerSocketInterfaceRequest this.server
  ) : super(kVersions.last.size);

  static _TcpBoundSocketStartListeningParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _TcpBoundSocketStartListeningParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _TcpBoundSocketStartListeningParams result = new _TcpBoundSocketStartListeningParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.server = decoder0.decodeInterfaceRequest(8, false, tcp_server_socket_mojom.TcpServerSocketStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_TcpBoundSocketStartListeningParams";
    String fieldName;
    try {
      fieldName = "server";
      encoder0.encodeInterfaceRequest(server, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_TcpBoundSocketStartListeningParams("
           "server: $server" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class TcpBoundSocketStartListeningResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  network_error_mojom.NetworkError result = null;

  TcpBoundSocketStartListeningResponseParams() : super(kVersions.last.size);

  TcpBoundSocketStartListeningResponseParams.init(
    network_error_mojom.NetworkError this.result
  ) : super(kVersions.last.size);

  static TcpBoundSocketStartListeningResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static TcpBoundSocketStartListeningResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    TcpBoundSocketStartListeningResponseParams result = new TcpBoundSocketStartListeningResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.result = network_error_mojom.NetworkError.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "TcpBoundSocketStartListeningResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeStruct(result, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "TcpBoundSocketStartListeningResponseParams("
           "result: $result" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    return map;
  }
}


class _TcpBoundSocketConnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  net_address_mojom.NetAddress remoteAddress = null;
  core.MojoDataPipeConsumer sendStream = null;
  core.MojoDataPipeProducer receiveStream = null;
  tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket = null;

  _TcpBoundSocketConnectParams() : super(kVersions.last.size);

  _TcpBoundSocketConnectParams.init(
    net_address_mojom.NetAddress this.remoteAddress, 
    core.MojoDataPipeConsumer this.sendStream, 
    core.MojoDataPipeProducer this.receiveStream, 
    tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest this.clientSocket
  ) : super(kVersions.last.size);

  static _TcpBoundSocketConnectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _TcpBoundSocketConnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _TcpBoundSocketConnectParams result = new _TcpBoundSocketConnectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.remoteAddress = net_address_mojom.NetAddress.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.sendStream = decoder0.decodeConsumerHandle(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.receiveStream = decoder0.decodeProducerHandle(20, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.clientSocket = decoder0.decodeInterfaceRequest(24, false, tcp_connected_socket_mojom.TcpConnectedSocketStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_TcpBoundSocketConnectParams";
    String fieldName;
    try {
      fieldName = "remoteAddress";
      encoder0.encodeStruct(remoteAddress, 8, false);
      fieldName = "sendStream";
      encoder0.encodeConsumerHandle(sendStream, 16, false);
      fieldName = "receiveStream";
      encoder0.encodeProducerHandle(receiveStream, 20, false);
      fieldName = "clientSocket";
      encoder0.encodeInterfaceRequest(clientSocket, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_TcpBoundSocketConnectParams("
           "remoteAddress: $remoteAddress" ", "
           "sendStream: $sendStream" ", "
           "receiveStream: $receiveStream" ", "
           "clientSocket: $clientSocket" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class TcpBoundSocketConnectResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  network_error_mojom.NetworkError result = null;

  TcpBoundSocketConnectResponseParams() : super(kVersions.last.size);

  TcpBoundSocketConnectResponseParams.init(
    network_error_mojom.NetworkError this.result
  ) : super(kVersions.last.size);

  static TcpBoundSocketConnectResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static TcpBoundSocketConnectResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    TcpBoundSocketConnectResponseParams result = new TcpBoundSocketConnectResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.result = network_error_mojom.NetworkError.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "TcpBoundSocketConnectResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeStruct(result, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "TcpBoundSocketConnectResponseParams("
           "result: $result" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    return map;
  }
}

const int _tcpBoundSocketMethodStartListeningName = 0;
const int _tcpBoundSocketMethodConnectName = 1;

class _TcpBoundSocketServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class TcpBoundSocket {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _TcpBoundSocketServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static TcpBoundSocketProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    TcpBoundSocketProxy p = new TcpBoundSocketProxy.unbound();
    String name = serviceName ?? TcpBoundSocket.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void startListening(tcp_server_socket_mojom.TcpServerSocketInterfaceRequest server,void callback(network_error_mojom.NetworkError result));
  void connect(net_address_mojom.NetAddress remoteAddress,core.MojoDataPipeConsumer sendStream,core.MojoDataPipeProducer receiveStream,tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket,void callback(network_error_mojom.NetworkError result));
}

abstract class TcpBoundSocketInterface
    implements bindings.MojoInterface<TcpBoundSocket>,
               TcpBoundSocket {
  factory TcpBoundSocketInterface([TcpBoundSocket impl]) =>
      new TcpBoundSocketStub.unbound(impl);

  factory TcpBoundSocketInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [TcpBoundSocket impl]) =>
      new TcpBoundSocketStub.fromEndpoint(endpoint, impl);

  factory TcpBoundSocketInterface.fromMock(
      TcpBoundSocket mock) =>
      new TcpBoundSocketProxy.fromMock(mock);
}

abstract class TcpBoundSocketInterfaceRequest
    implements bindings.MojoInterface<TcpBoundSocket>,
               TcpBoundSocket {
  factory TcpBoundSocketInterfaceRequest() =>
      new TcpBoundSocketProxy.unbound();
}

class _TcpBoundSocketProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<TcpBoundSocket> {
  TcpBoundSocket impl;

  _TcpBoundSocketProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _TcpBoundSocketProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _TcpBoundSocketProxyControl.unbound() : super.unbound();

  String get serviceName => TcpBoundSocket.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _tcpBoundSocketMethodStartListeningName:
        var r = TcpBoundSocketStartListeningResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.result );
        break;
      case _tcpBoundSocketMethodConnectName:
        var r = TcpBoundSocketConnectResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.result );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_TcpBoundSocketProxyControl($superString)";
  }
}

class TcpBoundSocketProxy
    extends bindings.Proxy<TcpBoundSocket>
    implements TcpBoundSocket,
               TcpBoundSocketInterface,
               TcpBoundSocketInterfaceRequest {
  TcpBoundSocketProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _TcpBoundSocketProxyControl.fromEndpoint(endpoint));

  TcpBoundSocketProxy.fromHandle(core.MojoHandle handle)
      : super(new _TcpBoundSocketProxyControl.fromHandle(handle));

  TcpBoundSocketProxy.unbound()
      : super(new _TcpBoundSocketProxyControl.unbound());

  factory TcpBoundSocketProxy.fromMock(TcpBoundSocket mock) {
    TcpBoundSocketProxy newMockedProxy =
        new TcpBoundSocketProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static TcpBoundSocketProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For TcpBoundSocketProxy"));
    return new TcpBoundSocketProxy.fromEndpoint(endpoint);
  }


  void startListening(tcp_server_socket_mojom.TcpServerSocketInterfaceRequest server,void callback(network_error_mojom.NetworkError result)) {
    if (impl != null) {
      impl.startListening(server,callback);
      return;
    }
    var params = new _TcpBoundSocketStartListeningParams();
    params.server = server;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((network_error_mojom.NetworkError result) {
        z.bindCallback(() {
          callback(result);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _tcpBoundSocketMethodStartListeningName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void connect(net_address_mojom.NetAddress remoteAddress,core.MojoDataPipeConsumer sendStream,core.MojoDataPipeProducer receiveStream,tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket,void callback(network_error_mojom.NetworkError result)) {
    if (impl != null) {
      impl.connect(remoteAddress,sendStream,receiveStream,clientSocket,callback);
      return;
    }
    var params = new _TcpBoundSocketConnectParams();
    params.remoteAddress = remoteAddress;
    params.sendStream = sendStream;
    params.receiveStream = receiveStream;
    params.clientSocket = clientSocket;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((network_error_mojom.NetworkError result) {
        z.bindCallback(() {
          callback(result);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _tcpBoundSocketMethodConnectName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _TcpBoundSocketStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<TcpBoundSocket> {
  TcpBoundSocket _impl;

  _TcpBoundSocketStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [TcpBoundSocket impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _TcpBoundSocketStubControl.fromHandle(
      core.MojoHandle handle, [TcpBoundSocket impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _TcpBoundSocketStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => TcpBoundSocket.serviceName;


  Function _tcpBoundSocketStartListeningResponseParamsResponder(
      int requestId) {
  return (network_error_mojom.NetworkError result) {
      var result = new TcpBoundSocketStartListeningResponseParams();
      result.result = result;
      sendResponse(buildResponseWithId(
          result,
          _tcpBoundSocketMethodStartListeningName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _tcpBoundSocketConnectResponseParamsResponder(
      int requestId) {
  return (network_error_mojom.NetworkError result) {
      var result = new TcpBoundSocketConnectResponseParams();
      result.result = result;
      sendResponse(buildResponseWithId(
          result,
          _tcpBoundSocketMethodConnectName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _tcpBoundSocketMethodStartListeningName:
        var params = _TcpBoundSocketStartListeningParams.deserialize(
            message.payload);
        _impl.startListening(params.server, _tcpBoundSocketStartListeningResponseParamsResponder(message.header.requestId));
        break;
      case _tcpBoundSocketMethodConnectName:
        var params = _TcpBoundSocketConnectParams.deserialize(
            message.payload);
        _impl.connect(params.remoteAddress, params.sendStream, params.receiveStream, params.clientSocket, _tcpBoundSocketConnectResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  TcpBoundSocket get impl => _impl;
  set impl(TcpBoundSocket d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_TcpBoundSocketStubControl($superString)";
  }

  int get version => 0;
}

class TcpBoundSocketStub
    extends bindings.Stub<TcpBoundSocket>
    implements TcpBoundSocket,
               TcpBoundSocketInterface,
               TcpBoundSocketInterfaceRequest {
  TcpBoundSocketStub.unbound([TcpBoundSocket impl])
      : super(new _TcpBoundSocketStubControl.unbound(impl));

  TcpBoundSocketStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [TcpBoundSocket impl])
      : super(new _TcpBoundSocketStubControl.fromEndpoint(endpoint, impl));

  TcpBoundSocketStub.fromHandle(
      core.MojoHandle handle, [TcpBoundSocket impl])
      : super(new _TcpBoundSocketStubControl.fromHandle(handle, impl));

  static TcpBoundSocketStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For TcpBoundSocketStub"));
    return new TcpBoundSocketStub.fromEndpoint(endpoint);
  }


  void startListening(tcp_server_socket_mojom.TcpServerSocketInterfaceRequest server,void callback(network_error_mojom.NetworkError result)) {
    return impl.startListening(server,callback);
  }
  void connect(net_address_mojom.NetAddress remoteAddress,core.MojoDataPipeConsumer sendStream,core.MojoDataPipeProducer receiveStream,tcp_connected_socket_mojom.TcpConnectedSocketInterfaceRequest clientSocket,void callback(network_error_mojom.NetworkError result)) {
    return impl.connect(remoteAddress,sendStream,receiveStream,clientSocket,callback);
  }
}



