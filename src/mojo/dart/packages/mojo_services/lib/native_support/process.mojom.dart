// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library process_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/files/file.mojom.dart' as file_mojom;
import 'package:mojo_services/mojo/files/types.mojom.dart' as types_mojom;



class _ProcessSpawnParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(64, 0)
  ];
  List<int> path = null;
  List<List<int>> argv = null;
  List<List<int>> envp = null;
  file_mojom.FileInterface stdinFile = null;
  file_mojom.FileInterface stdoutFile = null;
  file_mojom.FileInterface stderrFile = null;
  ProcessControllerInterfaceRequest processController = null;

  _ProcessSpawnParams() : super(kVersions.last.size);

  _ProcessSpawnParams.init(
    List<int> this.path, 
    List<List<int>> this.argv, 
    List<List<int>> this.envp, 
    file_mojom.FileInterface this.stdinFile, 
    file_mojom.FileInterface this.stdoutFile, 
    file_mojom.FileInterface this.stderrFile, 
    ProcessControllerInterfaceRequest this.processController
  ) : super(kVersions.last.size);

  static _ProcessSpawnParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ProcessSpawnParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ProcessSpawnParams result = new _ProcessSpawnParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.path = decoder0.decodeUint8Array(8, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      if (decoder1 == null) {
        result.argv = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.argv = new List<List<int>>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.argv[i1] = decoder1.decodeUint8Array(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, true);
      if (decoder1 == null) {
        result.envp = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.envp = new List<List<int>>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.envp[i1] = decoder1.decodeUint8Array(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
    }
    if (mainDataHeader.version >= 0) {
      
      result.stdinFile = decoder0.decodeServiceInterface(32, true, file_mojom.FileProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.stdoutFile = decoder0.decodeServiceInterface(40, true, file_mojom.FileProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.stderrFile = decoder0.decodeServiceInterface(48, true, file_mojom.FileProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.processController = decoder0.decodeInterfaceRequest(56, false, ProcessControllerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ProcessSpawnParams";
    String fieldName;
    try {
      fieldName = "path";
      encoder0.encodeUint8Array(path, 8, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
      fieldName = "argv";
      if (argv == null) {
        encoder0.encodeNullPointer(16, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(argv.length, 16, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < argv.length; ++i0) {
          encoder1.encodeUint8Array(argv[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
      fieldName = "envp";
      if (envp == null) {
        encoder0.encodeNullPointer(24, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(envp.length, 24, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < envp.length; ++i0) {
          encoder1.encodeUint8Array(envp[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
      fieldName = "stdinFile";
      encoder0.encodeInterface(stdinFile, 32, true);
      fieldName = "stdoutFile";
      encoder0.encodeInterface(stdoutFile, 40, true);
      fieldName = "stderrFile";
      encoder0.encodeInterface(stderrFile, 48, true);
      fieldName = "processController";
      encoder0.encodeInterfaceRequest(processController, 56, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ProcessSpawnParams("
           "path: $path" ", "
           "argv: $argv" ", "
           "envp: $envp" ", "
           "stdinFile: $stdinFile" ", "
           "stdoutFile: $stdoutFile" ", "
           "stderrFile: $stderrFile" ", "
           "processController: $processController" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class ProcessSpawnResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  ProcessSpawnResponseParams() : super(kVersions.last.size);

  ProcessSpawnResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static ProcessSpawnResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ProcessSpawnResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ProcessSpawnResponseParams result = new ProcessSpawnResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ProcessSpawnResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ProcessSpawnResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}


class _ProcessSpawnWithTerminalParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(48, 0)
  ];
  List<int> path = null;
  List<List<int>> argv = null;
  List<List<int>> envp = null;
  file_mojom.FileInterface terminalFile = null;
  ProcessControllerInterfaceRequest processController = null;

  _ProcessSpawnWithTerminalParams() : super(kVersions.last.size);

  _ProcessSpawnWithTerminalParams.init(
    List<int> this.path, 
    List<List<int>> this.argv, 
    List<List<int>> this.envp, 
    file_mojom.FileInterface this.terminalFile, 
    ProcessControllerInterfaceRequest this.processController
  ) : super(kVersions.last.size);

  static _ProcessSpawnWithTerminalParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ProcessSpawnWithTerminalParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ProcessSpawnWithTerminalParams result = new _ProcessSpawnWithTerminalParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.path = decoder0.decodeUint8Array(8, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      if (decoder1 == null) {
        result.argv = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.argv = new List<List<int>>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.argv[i1] = decoder1.decodeUint8Array(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(24, true);
      if (decoder1 == null) {
        result.envp = null;
      } else {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.envp = new List<List<int>>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.envp[i1] = decoder1.decodeUint8Array(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
    }
    if (mainDataHeader.version >= 0) {
      
      result.terminalFile = decoder0.decodeServiceInterface(32, false, file_mojom.FileProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.processController = decoder0.decodeInterfaceRequest(40, false, ProcessControllerStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ProcessSpawnWithTerminalParams";
    String fieldName;
    try {
      fieldName = "path";
      encoder0.encodeUint8Array(path, 8, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
      fieldName = "argv";
      if (argv == null) {
        encoder0.encodeNullPointer(16, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(argv.length, 16, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < argv.length; ++i0) {
          encoder1.encodeUint8Array(argv[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
      fieldName = "envp";
      if (envp == null) {
        encoder0.encodeNullPointer(24, true);
      } else {
        var encoder1 = encoder0.encodePointerArray(envp.length, 24, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < envp.length; ++i0) {
          encoder1.encodeUint8Array(envp[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
        }
      }
      fieldName = "terminalFile";
      encoder0.encodeInterface(terminalFile, 32, false);
      fieldName = "processController";
      encoder0.encodeInterfaceRequest(processController, 40, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ProcessSpawnWithTerminalParams("
           "path: $path" ", "
           "argv: $argv" ", "
           "envp: $envp" ", "
           "terminalFile: $terminalFile" ", "
           "processController: $processController" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class ProcessSpawnWithTerminalResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  ProcessSpawnWithTerminalResponseParams() : super(kVersions.last.size);

  ProcessSpawnWithTerminalResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static ProcessSpawnWithTerminalResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ProcessSpawnWithTerminalResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ProcessSpawnWithTerminalResponseParams result = new ProcessSpawnWithTerminalResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ProcessSpawnWithTerminalResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ProcessSpawnWithTerminalResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}


class _ProcessControllerWaitParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _ProcessControllerWaitParams() : super(kVersions.last.size);

  _ProcessControllerWaitParams.init(
  ) : super(kVersions.last.size);

  static _ProcessControllerWaitParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ProcessControllerWaitParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ProcessControllerWaitParams result = new _ProcessControllerWaitParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ProcessControllerWaitParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ProcessControllerWaitParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class ProcessControllerWaitResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;
  int exitStatus = 0;

  ProcessControllerWaitResponseParams() : super(kVersions.last.size);

  ProcessControllerWaitResponseParams.init(
    types_mojom.Error this.error, 
    int this.exitStatus
  ) : super(kVersions.last.size);

  static ProcessControllerWaitResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ProcessControllerWaitResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ProcessControllerWaitResponseParams result = new ProcessControllerWaitResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    if (mainDataHeader.version >= 0) {
      
      result.exitStatus = decoder0.decodeInt32(12);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ProcessControllerWaitResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
      fieldName = "exitStatus";
      encoder0.encodeInt32(exitStatus, 12);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ProcessControllerWaitResponseParams("
           "error: $error" ", "
           "exitStatus: $exitStatus" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    map["exitStatus"] = exitStatus;
    return map;
  }
}


class _ProcessControllerKillParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int signal = 0;

  _ProcessControllerKillParams() : super(kVersions.last.size);

  _ProcessControllerKillParams.init(
    int this.signal
  ) : super(kVersions.last.size);

  static _ProcessControllerKillParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ProcessControllerKillParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ProcessControllerKillParams result = new _ProcessControllerKillParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.signal = decoder0.decodeInt32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ProcessControllerKillParams";
    String fieldName;
    try {
      fieldName = "signal";
      encoder0.encodeInt32(signal, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ProcessControllerKillParams("
           "signal: $signal" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["signal"] = signal;
    return map;
  }
}


class ProcessControllerKillResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  types_mojom.Error error = null;

  ProcessControllerKillResponseParams() : super(kVersions.last.size);

  ProcessControllerKillResponseParams.init(
    types_mojom.Error this.error
  ) : super(kVersions.last.size);

  static ProcessControllerKillResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ProcessControllerKillResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ProcessControllerKillResponseParams result = new ProcessControllerKillResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.error = types_mojom.Error.decode(decoder0, 8);
        if (result.error == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable types_mojom.Error.');
        }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ProcessControllerKillResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeEnum(error, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ProcessControllerKillResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}

const int _processMethodSpawnName = 0;
const int _processMethodSpawnWithTerminalName = 1;

class _ProcessServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Process {
  static const String serviceName = "native_support::Process";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ProcessServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ProcessProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ProcessProxy p = new ProcessProxy.unbound();
    String name = serviceName ?? Process.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void spawn(List<int> path,List<List<int>> argv,List<List<int>> envp,file_mojom.FileInterface stdinFile,file_mojom.FileInterface stdoutFile,file_mojom.FileInterface stderrFile,ProcessControllerInterfaceRequest processController,void callback(types_mojom.Error error));
  void spawnWithTerminal(List<int> path,List<List<int>> argv,List<List<int>> envp,file_mojom.FileInterface terminalFile,ProcessControllerInterfaceRequest processController,void callback(types_mojom.Error error));
}

abstract class ProcessInterface
    implements bindings.MojoInterface<Process>,
               Process {
  factory ProcessInterface([Process impl]) =>
      new ProcessStub.unbound(impl);

  factory ProcessInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Process impl]) =>
      new ProcessStub.fromEndpoint(endpoint, impl);

  factory ProcessInterface.fromMock(
      Process mock) =>
      new ProcessProxy.fromMock(mock);
}

abstract class ProcessInterfaceRequest
    implements bindings.MojoInterface<Process>,
               Process {
  factory ProcessInterfaceRequest() =>
      new ProcessProxy.unbound();
}

class _ProcessProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Process> {
  Process impl;

  _ProcessProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ProcessProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ProcessProxyControl.unbound() : super.unbound();

  String get serviceName => Process.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _processMethodSpawnName:
        var r = ProcessSpawnResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      case _processMethodSpawnWithTerminalName:
        var r = ProcessSpawnWithTerminalResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ProcessProxyControl($superString)";
  }
}

class ProcessProxy
    extends bindings.Proxy<Process>
    implements Process,
               ProcessInterface,
               ProcessInterfaceRequest {
  ProcessProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ProcessProxyControl.fromEndpoint(endpoint));

  ProcessProxy.fromHandle(core.MojoHandle handle)
      : super(new _ProcessProxyControl.fromHandle(handle));

  ProcessProxy.unbound()
      : super(new _ProcessProxyControl.unbound());

  factory ProcessProxy.fromMock(Process mock) {
    ProcessProxy newMockedProxy =
        new ProcessProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ProcessProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ProcessProxy"));
    return new ProcessProxy.fromEndpoint(endpoint);
  }


  void spawn(List<int> path,List<List<int>> argv,List<List<int>> envp,file_mojom.FileInterface stdinFile,file_mojom.FileInterface stdoutFile,file_mojom.FileInterface stderrFile,ProcessControllerInterfaceRequest processController,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.spawn(path,argv,envp,stdinFile,stdoutFile,stderrFile,processController,callback);
      return;
    }
    var params = new _ProcessSpawnParams();
    params.path = path;
    params.argv = argv;
    params.envp = envp;
    params.stdinFile = stdinFile;
    params.stdoutFile = stdoutFile;
    params.stderrFile = stderrFile;
    params.processController = processController;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _processMethodSpawnName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void spawnWithTerminal(List<int> path,List<List<int>> argv,List<List<int>> envp,file_mojom.FileInterface terminalFile,ProcessControllerInterfaceRequest processController,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.spawnWithTerminal(path,argv,envp,terminalFile,processController,callback);
      return;
    }
    var params = new _ProcessSpawnWithTerminalParams();
    params.path = path;
    params.argv = argv;
    params.envp = envp;
    params.terminalFile = terminalFile;
    params.processController = processController;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _processMethodSpawnWithTerminalName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _ProcessStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Process> {
  Process _impl;

  _ProcessStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Process impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ProcessStubControl.fromHandle(
      core.MojoHandle handle, [Process impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ProcessStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Process.serviceName;


  Function _processSpawnResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new ProcessSpawnResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _processMethodSpawnName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _processSpawnWithTerminalResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new ProcessSpawnWithTerminalResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _processMethodSpawnWithTerminalName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _processMethodSpawnName:
        var params = _ProcessSpawnParams.deserialize(
            message.payload);
        _impl.spawn(params.path, params.argv, params.envp, params.stdinFile, params.stdoutFile, params.stderrFile, params.processController, _processSpawnResponseParamsResponder(message.header.requestId));
        break;
      case _processMethodSpawnWithTerminalName:
        var params = _ProcessSpawnWithTerminalParams.deserialize(
            message.payload);
        _impl.spawnWithTerminal(params.path, params.argv, params.envp, params.terminalFile, params.processController, _processSpawnWithTerminalResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Process get impl => _impl;
  set impl(Process d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ProcessStubControl($superString)";
  }

  int get version => 0;
}

class ProcessStub
    extends bindings.Stub<Process>
    implements Process,
               ProcessInterface,
               ProcessInterfaceRequest {
  ProcessStub.unbound([Process impl])
      : super(new _ProcessStubControl.unbound(impl));

  ProcessStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Process impl])
      : super(new _ProcessStubControl.fromEndpoint(endpoint, impl));

  ProcessStub.fromHandle(
      core.MojoHandle handle, [Process impl])
      : super(new _ProcessStubControl.fromHandle(handle, impl));

  static ProcessStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ProcessStub"));
    return new ProcessStub.fromEndpoint(endpoint);
  }


  void spawn(List<int> path,List<List<int>> argv,List<List<int>> envp,file_mojom.FileInterface stdinFile,file_mojom.FileInterface stdoutFile,file_mojom.FileInterface stderrFile,ProcessControllerInterfaceRequest processController,void callback(types_mojom.Error error)) {
    return impl.spawn(path,argv,envp,stdinFile,stdoutFile,stderrFile,processController,callback);
  }
  void spawnWithTerminal(List<int> path,List<List<int>> argv,List<List<int>> envp,file_mojom.FileInterface terminalFile,ProcessControllerInterfaceRequest processController,void callback(types_mojom.Error error)) {
    return impl.spawnWithTerminal(path,argv,envp,terminalFile,processController,callback);
  }
}

const int _processControllerMethodWaitName = 0;
const int _processControllerMethodKillName = 1;

class _ProcessControllerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class ProcessController {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ProcessControllerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ProcessControllerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ProcessControllerProxy p = new ProcessControllerProxy.unbound();
    String name = serviceName ?? ProcessController.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void wait(void callback(types_mojom.Error error, int exitStatus));
  void kill(int signal,void callback(types_mojom.Error error));
}

abstract class ProcessControllerInterface
    implements bindings.MojoInterface<ProcessController>,
               ProcessController {
  factory ProcessControllerInterface([ProcessController impl]) =>
      new ProcessControllerStub.unbound(impl);

  factory ProcessControllerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [ProcessController impl]) =>
      new ProcessControllerStub.fromEndpoint(endpoint, impl);

  factory ProcessControllerInterface.fromMock(
      ProcessController mock) =>
      new ProcessControllerProxy.fromMock(mock);
}

abstract class ProcessControllerInterfaceRequest
    implements bindings.MojoInterface<ProcessController>,
               ProcessController {
  factory ProcessControllerInterfaceRequest() =>
      new ProcessControllerProxy.unbound();
}

class _ProcessControllerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<ProcessController> {
  ProcessController impl;

  _ProcessControllerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ProcessControllerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ProcessControllerProxyControl.unbound() : super.unbound();

  String get serviceName => ProcessController.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _processControllerMethodWaitName:
        var r = ProcessControllerWaitResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error , r.exitStatus );
        break;
      case _processControllerMethodKillName:
        var r = ProcessControllerKillResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ProcessControllerProxyControl($superString)";
  }
}

class ProcessControllerProxy
    extends bindings.Proxy<ProcessController>
    implements ProcessController,
               ProcessControllerInterface,
               ProcessControllerInterfaceRequest {
  ProcessControllerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ProcessControllerProxyControl.fromEndpoint(endpoint));

  ProcessControllerProxy.fromHandle(core.MojoHandle handle)
      : super(new _ProcessControllerProxyControl.fromHandle(handle));

  ProcessControllerProxy.unbound()
      : super(new _ProcessControllerProxyControl.unbound());

  factory ProcessControllerProxy.fromMock(ProcessController mock) {
    ProcessControllerProxy newMockedProxy =
        new ProcessControllerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ProcessControllerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ProcessControllerProxy"));
    return new ProcessControllerProxy.fromEndpoint(endpoint);
  }


  void wait(void callback(types_mojom.Error error, int exitStatus)) {
    if (impl != null) {
      impl.wait(callback);
      return;
    }
    var params = new _ProcessControllerWaitParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error, int exitStatus) {
        z.bindCallback(() {
          callback(error, exitStatus);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _processControllerMethodWaitName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void kill(int signal,void callback(types_mojom.Error error)) {
    if (impl != null) {
      impl.kill(signal,callback);
      return;
    }
    var params = new _ProcessControllerKillParams();
    params.signal = signal;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((types_mojom.Error error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _processControllerMethodKillName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _ProcessControllerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<ProcessController> {
  ProcessController _impl;

  _ProcessControllerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ProcessController impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ProcessControllerStubControl.fromHandle(
      core.MojoHandle handle, [ProcessController impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ProcessControllerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => ProcessController.serviceName;


  Function _processControllerWaitResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error, int exitStatus) {
      var result = new ProcessControllerWaitResponseParams();
      result.error = error;
      result.exitStatus = exitStatus;
      sendResponse(buildResponseWithId(
          result,
          _processControllerMethodWaitName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _processControllerKillResponseParamsResponder(
      int requestId) {
  return (types_mojom.Error error) {
      var result = new ProcessControllerKillResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _processControllerMethodKillName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _processControllerMethodWaitName:
        _impl.wait(_processControllerWaitResponseParamsResponder(message.header.requestId));
        break;
      case _processControllerMethodKillName:
        var params = _ProcessControllerKillParams.deserialize(
            message.payload);
        _impl.kill(params.signal, _processControllerKillResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  ProcessController get impl => _impl;
  set impl(ProcessController d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ProcessControllerStubControl($superString)";
  }

  int get version => 0;
}

class ProcessControllerStub
    extends bindings.Stub<ProcessController>
    implements ProcessController,
               ProcessControllerInterface,
               ProcessControllerInterfaceRequest {
  ProcessControllerStub.unbound([ProcessController impl])
      : super(new _ProcessControllerStubControl.unbound(impl));

  ProcessControllerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ProcessController impl])
      : super(new _ProcessControllerStubControl.fromEndpoint(endpoint, impl));

  ProcessControllerStub.fromHandle(
      core.MojoHandle handle, [ProcessController impl])
      : super(new _ProcessControllerStubControl.fromHandle(handle, impl));

  static ProcessControllerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ProcessControllerStub"));
    return new ProcessControllerStub.fromEndpoint(endpoint);
  }


  void wait(void callback(types_mojom.Error error, int exitStatus)) {
    return impl.wait(callback);
  }
  void kill(int signal,void callback(types_mojom.Error error)) {
    return impl.kill(signal,callback);
  }
}



