// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library vsync_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _VSyncProviderAwaitVSyncParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _VSyncProviderAwaitVSyncParams() : super(kVersions.last.size);

  _VSyncProviderAwaitVSyncParams.init(
  ) : super(kVersions.last.size);

  static _VSyncProviderAwaitVSyncParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _VSyncProviderAwaitVSyncParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _VSyncProviderAwaitVSyncParams result = new _VSyncProviderAwaitVSyncParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_VSyncProviderAwaitVSyncParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_VSyncProviderAwaitVSyncParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class VSyncProviderAwaitVSyncResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int timeStamp = 0;

  VSyncProviderAwaitVSyncResponseParams() : super(kVersions.last.size);

  VSyncProviderAwaitVSyncResponseParams.init(
    int this.timeStamp
  ) : super(kVersions.last.size);

  static VSyncProviderAwaitVSyncResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static VSyncProviderAwaitVSyncResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    VSyncProviderAwaitVSyncResponseParams result = new VSyncProviderAwaitVSyncResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.timeStamp = decoder0.decodeInt64(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "VSyncProviderAwaitVSyncResponseParams";
    String fieldName;
    try {
      fieldName = "timeStamp";
      encoder0.encodeInt64(timeStamp, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "VSyncProviderAwaitVSyncResponseParams("
           "timeStamp: $timeStamp" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["timeStamp"] = timeStamp;
    return map;
  }
}

const int _vSyncProviderMethodAwaitVSyncName = 0;

class _VSyncProviderServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class VSyncProvider {
  static const String serviceName = "vsync::VSyncProvider";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _VSyncProviderServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static VSyncProviderProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    VSyncProviderProxy p = new VSyncProviderProxy.unbound();
    String name = serviceName ?? VSyncProvider.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void awaitVSync(void callback(int timeStamp));
}

abstract class VSyncProviderInterface
    implements bindings.MojoInterface<VSyncProvider>,
               VSyncProvider {
  factory VSyncProviderInterface([VSyncProvider impl]) =>
      new VSyncProviderStub.unbound(impl);

  factory VSyncProviderInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [VSyncProvider impl]) =>
      new VSyncProviderStub.fromEndpoint(endpoint, impl);

  factory VSyncProviderInterface.fromMock(
      VSyncProvider mock) =>
      new VSyncProviderProxy.fromMock(mock);
}

abstract class VSyncProviderInterfaceRequest
    implements bindings.MojoInterface<VSyncProvider>,
               VSyncProvider {
  factory VSyncProviderInterfaceRequest() =>
      new VSyncProviderProxy.unbound();
}

class _VSyncProviderProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<VSyncProvider> {
  VSyncProvider impl;

  _VSyncProviderProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _VSyncProviderProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _VSyncProviderProxyControl.unbound() : super.unbound();

  String get serviceName => VSyncProvider.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _vSyncProviderMethodAwaitVSyncName:
        var r = VSyncProviderAwaitVSyncResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.timeStamp );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_VSyncProviderProxyControl($superString)";
  }
}

class VSyncProviderProxy
    extends bindings.Proxy<VSyncProvider>
    implements VSyncProvider,
               VSyncProviderInterface,
               VSyncProviderInterfaceRequest {
  VSyncProviderProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _VSyncProviderProxyControl.fromEndpoint(endpoint));

  VSyncProviderProxy.fromHandle(core.MojoHandle handle)
      : super(new _VSyncProviderProxyControl.fromHandle(handle));

  VSyncProviderProxy.unbound()
      : super(new _VSyncProviderProxyControl.unbound());

  factory VSyncProviderProxy.fromMock(VSyncProvider mock) {
    VSyncProviderProxy newMockedProxy =
        new VSyncProviderProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static VSyncProviderProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For VSyncProviderProxy"));
    return new VSyncProviderProxy.fromEndpoint(endpoint);
  }


  void awaitVSync(void callback(int timeStamp)) {
    if (impl != null) {
      impl.awaitVSync(callback);
      return;
    }
    var params = new _VSyncProviderAwaitVSyncParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int timeStamp) {
        z.bindCallback(() {
          callback(timeStamp);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _vSyncProviderMethodAwaitVSyncName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _VSyncProviderStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<VSyncProvider> {
  VSyncProvider _impl;

  _VSyncProviderStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [VSyncProvider impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _VSyncProviderStubControl.fromHandle(
      core.MojoHandle handle, [VSyncProvider impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _VSyncProviderStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => VSyncProvider.serviceName;


  Function _vSyncProviderAwaitVSyncResponseParamsResponder(
      int requestId) {
  return (int timeStamp) {
      var result = new VSyncProviderAwaitVSyncResponseParams();
      result.timeStamp = timeStamp;
      sendResponse(buildResponseWithId(
          result,
          _vSyncProviderMethodAwaitVSyncName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _vSyncProviderMethodAwaitVSyncName:
        _impl.awaitVSync(_vSyncProviderAwaitVSyncResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  VSyncProvider get impl => _impl;
  set impl(VSyncProvider d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_VSyncProviderStubControl($superString)";
  }

  int get version => 0;
}

class VSyncProviderStub
    extends bindings.Stub<VSyncProvider>
    implements VSyncProvider,
               VSyncProviderInterface,
               VSyncProviderInterfaceRequest {
  VSyncProviderStub.unbound([VSyncProvider impl])
      : super(new _VSyncProviderStubControl.unbound(impl));

  VSyncProviderStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [VSyncProvider impl])
      : super(new _VSyncProviderStubControl.fromEndpoint(endpoint, impl));

  VSyncProviderStub.fromHandle(
      core.MojoHandle handle, [VSyncProvider impl])
      : super(new _VSyncProviderStubControl.fromHandle(handle, impl));

  static VSyncProviderStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For VSyncProviderStub"));
    return new VSyncProviderStub.fromEndpoint(endpoint);
  }


  void awaitVSync(void callback(int timeStamp)) {
    return impl.awaitVSync(callback);
  }
}



